[[0.151023,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0,"y":0,"visible":true}}],[9.000000000000001e-05,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],[">                                              ",{}],["~",{"fg":2}],["                                                                         ",{}]]},"cursor":{"x":16}}],[1.389368,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                                                        ",{}]]}}],[6e-06,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                                              ",{}],["~",{"fg":2}],["         ",{}]]}}],[12.393041,{}],[1.371227,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> H                                                                                                            ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.08271299999999999,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> He                                                                                                           ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.110382,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> Hel                                                                                                          ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.115137,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> Hell                                                                                                         ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":20}}],[0.203772,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> Hello                                                                                                        ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.13398,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> Helloo                                                                                                       ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.246136,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> Helloo=                                                                                                      ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.324911,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> Helloo                                                                                                       ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.110811,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> Hello                                                                                                        ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.167149,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> Hell                                                                                                         ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":20}}],[0.103732,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> Hel                                                                                                          ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.113805,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> He                                                                                                           ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.110245,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> H                                                                                                            ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.21015,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                                              ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[0.1812,{}],[0.139479,{}],[169.482338,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> c                                                                                                            ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.157475,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> cd                                                                                                           ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.08991,{"cursor":{"x":19}}],[0.119673,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> cd /                                                                                                         ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":20}}],[0.228085,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> cd /m                                                                                                        ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.414737,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> cd /                                                                                                         ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":20}}],[0.105513,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> cd /t                                                                                                        ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.08673400000000001,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> cd /tm                                                                                                       ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.145727,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> cd /tmp",{}],["/",{"bold":true}],["                                                                                                     ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.269372,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> cd /tmp                                                                                                      ",{}],["~",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.010069,{"lines":{"1":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                                           ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":16,"y":1}}],[0.272117,{"lines":{"1":[["benjica@",{}],["gunter",{"underline":true}],["> l                                                                                                         ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.382289,{"lines":{"1":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                                           ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[0.117736,{"lines":{"1":[["benjica@",{}],["gunter",{"underline":true}],["> r                                                                                                         ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.072409,{"lines":{"1":[["benjica@",{}],["gunter",{"underline":true}],["> rm                                                                                                        ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.089937,{"cursor":{"x":19}}],[0.785075,{"lines":{"1":[["benjica@",{}],["gunter",{"underline":true}],["> rm g                                                                                                      ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":20}}],[0.063607,{"lines":{"1":[["benjica@",{}],["gunter",{"underline":true}],["> rm gi                                                                                                     ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.10569,{"lines":{"1":[["benjica@",{}],["gunter",{"underline":true}],["> rm git-fibonacci                                                                                          ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":32}}],[1.316443,{"cursor":{"x":31}}],[0.14328,{"cursor":{"x":30}}],[0.12504,{"cursor":{"x":29}}],[0.115777,{"cursor":{"x":28}}],[0.104904,{"cursor":{"x":27}}],[0.095258,{"cursor":{"x":26}}],[0.105411,{"cursor":{"x":25}}],[0.103276,{"cursor":{"x":24}}],[0.105505,{"cursor":{"x":23}}],[0.095274,{"cursor":{"x":22}}],[0.107803,{"cursor":{"x":21}}],[0.142317,{"cursor":{"x":20}}],[0.088895,{"cursor":{"x":19}}],[0.604824,{"lines":{"1":[["benjica@",{}],["gunter",{"underline":true}],["> rm -git-fibonacci                                                                                         ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":20}}],[0.076782,{"lines":{"1":[["benjica@",{}],["gunter",{"underline":true}],["> rm -rgit-fibonacci                                                                                        ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.14593,{"lines":{"1":[["benjica@",{}],["gunter",{"underline":true}],["> rm -rfgit-fibonacci                                                                                       ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.13387,{"lines":{"1":[["benjica@",{}],["gunter",{"underline":true}],["> rm -rf git-fibonacci                                                                                      ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.183053,{"cursor":{"x":0,"y":2}}],[0.003023,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                                           ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[1.333939,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],["> i                                                                                                         ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.387001,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                                           ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[0.155184,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],["> u                                                                                                         ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.184011,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],["> uz                                                                                                        ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.697028,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],["> u                                                                                                         ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.162581,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],["> um                                                                                                        ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.118831,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],["> umz                                                                                                       ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.221736,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],["> umz[                                                                                                      ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":20}}],[0.236216,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],["> umz                                                                                                       ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.131221,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],["> um                                                                                                        ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.13762,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],["> u                                                                                                         ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.216312,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],["> un                                                                                                        ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.202393,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],["> unz                                                                                                       ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.210264,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],["> unzi                                                                                                      ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":20}}],[0.093223,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],["> unzip                                                                                                     ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.133199,{}],[4.5e-05,{"lines":{"3":[["unzip      unzip-mem  unzipsfx                                                                                                         ",{}]]}}],[0.349967,{"cursor":{"x":22}}],[0.755269,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],["> unzip g                                                                                                   ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.069118,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],["> unzip gi                                                                                                  ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.121661,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],["> unzip git-fibonacci.zip",{}],[" ",{"bold":true}],["                                                                                  ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":40}}],[0.764342,{"lines":{"2":[["benjica@",{}],["gunter",{"underline":true}],["> unzip git-fibonacci.zip                                                                                   ",{}],["/tmp",{"fg":2}],["         ",{}]],"3":[["                                                                                                                                       ",{}]]},"cursor":{"x":0,"y":3}}],[0.011526,{"lines":{"0":[["   creating: git-fibonacci/.git/objects/pack/                                                                                          ",{}]],"1":[["   creating: git-fibonacci/.git/objects/f4/                                                                                            ",{}]],"2":[[" extracting: git-fibonacci/.git/objects/f4/832158c4527d8c719cd7b33d625d0f1a2c909a                                                      ",{}]],"3":[["   creating: git-fibonacci/.git/objects/fe/                                                                                            ",{}]],"4":[[" extracting: git-fibonacci/.git/objects/fe/5dae60fbe8a9bc1afc7cf0f12edbe21221df7a                                                      ",{}]],"5":[["   creating: git-fibonacci/.git/objects/ef/                                                                                            ",{}]],"6":[[" extracting: git-fibonacci/.git/objects/ef/48b4ee2ee81ceeefe50ed97d5dcdf347d099ea                                                      ",{}]],"7":[["   creating: git-fibonacci/.git/objects/8f/                                                                                            ",{}]],"8":[[" extracting: git-fibonacci/.git/objects/8f/01ee3d65532c24b97b2138a88793979f9b281e                                                      ",{}]],"9":[["   creating: git-fibonacci/.git/objects/d0/                                                                                            ",{}]],"10":[[" extracting: git-fibonacci/.git/objects/d0/e33b296197358602cf4dc4909d33dec0270ee1                                                      ",{}]],"11":[["   creating: git-fibonacci/.git/objects/79/                                                                                            ",{}]],"12":[[" extracting: git-fibonacci/.git/objects/79/6bee0e4317c2f7af648e9987bf77c9975e8dfd                                                      ",{}]],"13":[["   creating: git-fibonacci/.git/objects/9e/                                                                                            ",{}]],"14":[[" extracting: git-fibonacci/.git/objects/9e/de53a47526031df08155df498ad1a7b7ebec86                                                      ",{}]],"15":[[" extracting: git-fibonacci/.git/objects/9e/24883bbcf0dc3d304c5a3a6bd606bfc931281b                                                      ",{}]],"16":[["   creating: git-fibonacci/.git/refs/                                                                                                  ",{}]],"17":[["   creating: git-fibonacci/.git/refs/tags/                                                                                             ",{}]],"18":[["   creating: git-fibonacci/.git/refs/heads/                                                                                            ",{}]],"19":[[" extracting: git-fibonacci/.git/refs/heads/iterative_refactor                                                                          ",{}]],"20":[[" extracting: git-fibonacci/.git/refs/heads/master                                                                                      ",{}]],"21":[[" extracting: git-fibonacci/.git/ORIG_HEAD                                                                                              ",{}]],"22":[["  inflating: git-fibonacci/.git/index                                                                                                  ",{}]],"23":[["  inflating: git-fibonacci/.git/description                                                                                            ",{}]],"24":[["  inflating: git-fibonacci/.git/config                                                                                                 ",{}]],"25":[["   creating: git-fibonacci/.git/branches/                                                                                              ",{}]],"26":[["   creating: git-fibonacci/.git/logs/                                                                                                  ",{}]],"27":[["  inflating: git-fibonacci/.git/logs/HEAD                                                                                              ",{}]],"28":[["   creating: git-fibonacci/.git/logs/refs/                                                                                             ",{}]],"29":[["   creating: git-fibonacci/.git/logs/refs/heads/                                                                                       ",{}]],"30":[["  inflating: git-fibonacci/.git/logs/refs/heads/iterative_refactor                                                                     ",{}]],"31":[["  inflating: git-fibonacci/.git/logs/refs/heads/master                                                                                 ",{}]],"32":[["  inflating: git-fibonacci/README.md                                                                                                   ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                                           ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":16,"y":33}}],[0.954403,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> c                                                                                                         ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.150744,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> cd                                                                                                        ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.079128,{"cursor":{"x":19}}],[0.241145,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> cd g                                                                                                      ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":20}}],[0.091653,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> cd gi                                                                                                     ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.08541700000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> cd git-fibonacci",{}],["/",{"bold":true}],["                                                                                         ",{}],["/tmp",{"fg":2}],["         ",{}]]},"cursor":{"x":33}}],[0.8001549999999999,{"lines":{"0":[["   creating: git-fibonacci/.git/objects/f4/                                                                                            ",{}]],"1":[[" extracting: git-fibonacci/.git/objects/f4/832158c4527d8c719cd7b33d625d0f1a2c909a                                                      ",{}]],"2":[["   creating: git-fibonacci/.git/objects/fe/                                                                                            ",{}]],"3":[[" extracting: git-fibonacci/.git/objects/fe/5dae60fbe8a9bc1afc7cf0f12edbe21221df7a                                                      ",{}]],"4":[["   creating: git-fibonacci/.git/objects/ef/                                                                                            ",{}]],"5":[[" extracting: git-fibonacci/.git/objects/ef/48b4ee2ee81ceeefe50ed97d5dcdf347d099ea                                                      ",{}]],"6":[["   creating: git-fibonacci/.git/objects/8f/                                                                                            ",{}]],"7":[[" extracting: git-fibonacci/.git/objects/8f/01ee3d65532c24b97b2138a88793979f9b281e                                                      ",{}]],"8":[["   creating: git-fibonacci/.git/objects/d0/                                                                                            ",{}]],"9":[[" extracting: git-fibonacci/.git/objects/d0/e33b296197358602cf4dc4909d33dec0270ee1                                                      ",{}]],"10":[["   creating: git-fibonacci/.git/objects/79/                                                                                            ",{}]],"11":[[" extracting: git-fibonacci/.git/objects/79/6bee0e4317c2f7af648e9987bf77c9975e8dfd                                                      ",{}]],"12":[["   creating: git-fibonacci/.git/objects/9e/                                                                                            ",{}]],"13":[[" extracting: git-fibonacci/.git/objects/9e/de53a47526031df08155df498ad1a7b7ebec86                                                      ",{}]],"14":[[" extracting: git-fibonacci/.git/objects/9e/24883bbcf0dc3d304c5a3a6bd606bfc931281b                                                      ",{}]],"15":[["   creating: git-fibonacci/.git/refs/                                                                                                  ",{}]],"16":[["   creating: git-fibonacci/.git/refs/tags/                                                                                             ",{}]],"17":[["   creating: git-fibonacci/.git/refs/heads/                                                                                            ",{}]],"18":[[" extracting: git-fibonacci/.git/refs/heads/iterative_refactor                                                                          ",{}]],"19":[[" extracting: git-fibonacci/.git/refs/heads/master                                                                                      ",{}]],"20":[[" extracting: git-fibonacci/.git/ORIG_HEAD                                                                                              ",{}]],"21":[["  inflating: git-fibonacci/.git/index                                                                                                  ",{}]],"22":[["  inflating: git-fibonacci/.git/description                                                                                            ",{}]],"23":[["  inflating: git-fibonacci/.git/config                                                                                                 ",{}]],"24":[["   creating: git-fibonacci/.git/branches/                                                                                              ",{}]],"25":[["   creating: git-fibonacci/.git/logs/                                                                                                  ",{}]],"26":[["  inflating: git-fibonacci/.git/logs/HEAD                                                                                              ",{}]],"27":[["   creating: git-fibonacci/.git/logs/refs/                                                                                             ",{}]],"28":[["   creating: git-fibonacci/.git/logs/refs/heads/                                                                                       ",{}]],"29":[["  inflating: git-fibonacci/.git/logs/refs/heads/iterative_refactor                                                                     ",{}]],"30":[["  inflating: git-fibonacci/.git/logs/refs/heads/master                                                                                 ",{}]],"31":[["  inflating: git-fibonacci/README.md                                                                                                   ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> cd git-fibonacci                                                                                          ",{}],["/tmp",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.018056,{}],[3.5e-05,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[0.904699,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> l                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.108029,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> ls                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.153463,{"lines":{"0":[[" extracting: git-fibonacci/.git/objects/f4/832158c4527d8c719cd7b33d625d0f1a2c909a                                                      ",{}]],"1":[["   creating: git-fibonacci/.git/objects/fe/                                                                                            ",{}]],"2":[[" extracting: git-fibonacci/.git/objects/fe/5dae60fbe8a9bc1afc7cf0f12edbe21221df7a                                                      ",{}]],"3":[["   creating: git-fibonacci/.git/objects/ef/                                                                                            ",{}]],"4":[[" extracting: git-fibonacci/.git/objects/ef/48b4ee2ee81ceeefe50ed97d5dcdf347d099ea                                                      ",{}]],"5":[["   creating: git-fibonacci/.git/objects/8f/                                                                                            ",{}]],"6":[[" extracting: git-fibonacci/.git/objects/8f/01ee3d65532c24b97b2138a88793979f9b281e                                                      ",{}]],"7":[["   creating: git-fibonacci/.git/objects/d0/                                                                                            ",{}]],"8":[[" extracting: git-fibonacci/.git/objects/d0/e33b296197358602cf4dc4909d33dec0270ee1                                                      ",{}]],"9":[["   creating: git-fibonacci/.git/objects/79/                                                                                            ",{}]],"10":[[" extracting: git-fibonacci/.git/objects/79/6bee0e4317c2f7af648e9987bf77c9975e8dfd                                                      ",{}]],"11":[["   creating: git-fibonacci/.git/objects/9e/                                                                                            ",{}]],"12":[[" extracting: git-fibonacci/.git/objects/9e/de53a47526031df08155df498ad1a7b7ebec86                                                      ",{}]],"13":[[" extracting: git-fibonacci/.git/objects/9e/24883bbcf0dc3d304c5a3a6bd606bfc931281b                                                      ",{}]],"14":[["   creating: git-fibonacci/.git/refs/                                                                                                  ",{}]],"15":[["   creating: git-fibonacci/.git/refs/tags/                                                                                             ",{}]],"16":[["   creating: git-fibonacci/.git/refs/heads/                                                                                            ",{}]],"17":[[" extracting: git-fibonacci/.git/refs/heads/iterative_refactor                                                                          ",{}]],"18":[[" extracting: git-fibonacci/.git/refs/heads/master                                                                                      ",{}]],"19":[[" extracting: git-fibonacci/.git/ORIG_HEAD                                                                                              ",{}]],"20":[["  inflating: git-fibonacci/.git/index                                                                                                  ",{}]],"21":[["  inflating: git-fibonacci/.git/description                                                                                            ",{}]],"22":[["  inflating: git-fibonacci/.git/config                                                                                                 ",{}]],"23":[["   creating: git-fibonacci/.git/branches/                                                                                              ",{}]],"24":[["   creating: git-fibonacci/.git/logs/                                                                                                  ",{}]],"25":[["  inflating: git-fibonacci/.git/logs/HEAD                                                                                              ",{}]],"26":[["   creating: git-fibonacci/.git/logs/refs/                                                                                             ",{}]],"27":[["   creating: git-fibonacci/.git/logs/refs/heads/                                                                                       ",{}]],"28":[["  inflating: git-fibonacci/.git/logs/refs/heads/iterative_refactor                                                                     ",{}]],"29":[["  inflating: git-fibonacci/.git/logs/refs/heads/master                                                                                 ",{}]],"30":[["  inflating: git-fibonacci/README.md                                                                                                   ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> cd git-fibonacci                                                                                          ",{}],["/tmp",{"fg":2}],["         ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> ls                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.001164,{"lines":{"0":[["   creating: git-fibonacci/.git/objects/fe/                                                                                            ",{}]],"1":[[" extracting: git-fibonacci/.git/objects/fe/5dae60fbe8a9bc1afc7cf0f12edbe21221df7a                                                      ",{}]],"2":[["   creating: git-fibonacci/.git/objects/ef/                                                                                            ",{}]],"3":[[" extracting: git-fibonacci/.git/objects/ef/48b4ee2ee81ceeefe50ed97d5dcdf347d099ea                                                      ",{}]],"4":[["   creating: git-fibonacci/.git/objects/8f/                                                                                            ",{}]],"5":[[" extracting: git-fibonacci/.git/objects/8f/01ee3d65532c24b97b2138a88793979f9b281e                                                      ",{}]],"6":[["   creating: git-fibonacci/.git/objects/d0/                                                                                            ",{}]],"7":[[" extracting: git-fibonacci/.git/objects/d0/e33b296197358602cf4dc4909d33dec0270ee1                                                      ",{}]],"8":[["   creating: git-fibonacci/.git/objects/79/                                                                                            ",{}]],"9":[[" extracting: git-fibonacci/.git/objects/79/6bee0e4317c2f7af648e9987bf77c9975e8dfd                                                      ",{}]],"10":[["   creating: git-fibonacci/.git/objects/9e/                                                                                            ",{}]],"11":[[" extracting: git-fibonacci/.git/objects/9e/de53a47526031df08155df498ad1a7b7ebec86                                                      ",{}]],"12":[[" extracting: git-fibonacci/.git/objects/9e/24883bbcf0dc3d304c5a3a6bd606bfc931281b                                                      ",{}]],"13":[["   creating: git-fibonacci/.git/refs/                                                                                                  ",{}]],"14":[["   creating: git-fibonacci/.git/refs/tags/                                                                                             ",{}]],"15":[["   creating: git-fibonacci/.git/refs/heads/                                                                                            ",{}]],"16":[[" extracting: git-fibonacci/.git/refs/heads/iterative_refactor                                                                          ",{}]],"17":[[" extracting: git-fibonacci/.git/refs/heads/master                                                                                      ",{}]],"18":[[" extracting: git-fibonacci/.git/ORIG_HEAD                                                                                              ",{}]],"19":[["  inflating: git-fibonacci/.git/index                                                                                                  ",{}]],"20":[["  inflating: git-fibonacci/.git/description                                                                                            ",{}]],"21":[["  inflating: git-fibonacci/.git/config                                                                                                 ",{}]],"22":[["   creating: git-fibonacci/.git/branches/                                                                                              ",{}]],"23":[["   creating: git-fibonacci/.git/logs/                                                                                                  ",{}]],"24":[["  inflating: git-fibonacci/.git/logs/HEAD                                                                                              ",{}]],"25":[["   creating: git-fibonacci/.git/logs/refs/                                                                                             ",{}]],"26":[["   creating: git-fibonacci/.git/logs/refs/heads/                                                                                       ",{}]],"27":[["  inflating: git-fibonacci/.git/logs/refs/heads/iterative_refactor                                                                     ",{}]],"28":[["  inflating: git-fibonacci/.git/logs/refs/heads/master                                                                                 ",{}]],"29":[["  inflating: git-fibonacci/README.md                                                                                                   ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> cd git-fibonacci                                                                                          ",{}],["/tmp",{"fg":2}],["         ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> ls                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["fib.rb  README.md                                                                                                                      ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[4.455151,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> v                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.050857,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.118065,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.070233,{"cursor":{"x":20}}],[0.390805,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim f                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.14936,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb",{}],[" ",{"bold":true}],["                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.282819,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[4e-06,{"lines":{"0":[[" extracting: git-fibonacci/.git/objects/fe/5dae60fbe8a9bc1afc7cf0f12edbe21221df7a                                                      ",{}]],"1":[["   creating: git-fibonacci/.git/objects/ef/                                                                                            ",{}]],"2":[[" extracting: git-fibonacci/.git/objects/ef/48b4ee2ee81ceeefe50ed97d5dcdf347d099ea                                                      ",{}]],"3":[["   creating: git-fibonacci/.git/objects/8f/                                                                                            ",{}]],"4":[[" extracting: git-fibonacci/.git/objects/8f/01ee3d65532c24b97b2138a88793979f9b281e                                                      ",{}]],"5":[["   creating: git-fibonacci/.git/objects/d0/                                                                                            ",{}]],"6":[[" extracting: git-fibonacci/.git/objects/d0/e33b296197358602cf4dc4909d33dec0270ee1                                                      ",{}]],"7":[["   creating: git-fibonacci/.git/objects/79/                                                                                            ",{}]],"8":[[" extracting: git-fibonacci/.git/objects/79/6bee0e4317c2f7af648e9987bf77c9975e8dfd                                                      ",{}]],"9":[["   creating: git-fibonacci/.git/objects/9e/                                                                                            ",{}]],"10":[[" extracting: git-fibonacci/.git/objects/9e/de53a47526031df08155df498ad1a7b7ebec86                                                      ",{}]],"11":[[" extracting: git-fibonacci/.git/objects/9e/24883bbcf0dc3d304c5a3a6bd606bfc931281b                                                      ",{}]],"12":[["   creating: git-fibonacci/.git/refs/                                                                                                  ",{}]],"13":[["   creating: git-fibonacci/.git/refs/tags/                                                                                             ",{}]],"14":[["   creating: git-fibonacci/.git/refs/heads/                                                                                            ",{}]],"15":[[" extracting: git-fibonacci/.git/refs/heads/iterative_refactor                                                                          ",{}]],"16":[[" extracting: git-fibonacci/.git/refs/heads/master                                                                                      ",{}]],"17":[[" extracting: git-fibonacci/.git/ORIG_HEAD                                                                                              ",{}]],"18":[["  inflating: git-fibonacci/.git/index                                                                                                  ",{}]],"19":[["  inflating: git-fibonacci/.git/description                                                                                            ",{}]],"20":[["  inflating: git-fibonacci/.git/config                                                                                                 ",{}]],"21":[["   creating: git-fibonacci/.git/branches/                                                                                              ",{}]],"22":[["   creating: git-fibonacci/.git/logs/                                                                                                  ",{}]],"23":[["  inflating: git-fibonacci/.git/logs/HEAD                                                                                              ",{}]],"24":[["   creating: git-fibonacci/.git/logs/refs/                                                                                             ",{}]],"25":[["   creating: git-fibonacci/.git/logs/refs/heads/                                                                                       ",{}]],"26":[["  inflating: git-fibonacci/.git/logs/refs/heads/iterative_refactor                                                                     ",{}]],"27":[["  inflating: git-fibonacci/.git/logs/refs/heads/master                                                                                 ",{}]],"28":[["  inflating: git-fibonacci/README.md                                                                                                   ",{}]],"29":[["benjica@",{}],["gunter",{"underline":true}],["> cd git-fibonacci                                                                                          ",{}],["/tmp",{"fg":2}],["         ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> ls                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["fib.rb  README.md                                                                                                                      ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.39761,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["                                                                                                                                       ",{}]]}}],[0.000498,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                                            ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":18,"visible":false}}],[0.062805,{"lines":{"0":[["  1 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["sum",{"fg":110,"bg":16}],["(list)                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  2 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# This is a functional call that iteratively tabulates a given array",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  3 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list.reduce(",{"fg":254,"bg":16}],[":+",{"fg":148,"bg":16}],[")                                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  6 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci",{"fg":110,"bg":16}],["(n)                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"6":[["  7 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"7":[["  8 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"8":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 10 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{}]]},"cursor":{"x":16,"y":9}}],[0.006685000000000001,{"lines":{"9":[[" 10 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 11 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 12 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 13 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 14 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 15 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 16 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 17 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 19 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 20 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 21 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 22 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 23 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 24 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                             ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 26 ",{"fg":237,"bg":16}],["  puts sum(fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 27 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 28 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 29 ",{"fg":237,"bg":16}],["main()                                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"29":[["~                                                                                                                              ",{"fg":237,"bg":16}],["        ",{}]],"30":[["~                                                                                                                              ",{"fg":237,"bg":16}],["        ",{}]],"31":[["~                                                                                                                              ",{"fg":237,"bg":16}],["        ",{}]],"32":[["~                                                                                                                              ",{"fg":237,"bg":16}],["        ",{}]],"33":[["\"fib.rb\" 29L, 537C                                                                                           1,1           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":0,"visible":true}}],[6.950932,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           2,1-2         All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":1}}],[0.168989,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           3,1-2         All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":2}}],[0.119278,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           4,1           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":3}}],[0.132739,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           5,0-1         All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":4}}],[0.140092,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           6,1           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":5}}],[0.139799,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           7,1-2         All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":6}}],[0.085355,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           8,1-2         All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":7}}],[0.142338,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           9,1-2         All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":8}}],[0.115893,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           10,1-2        All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":9}}],[0.118417,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           11,1-2        All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":10}}],[0.127585,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           12,0-1        All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":11}}],[1.619925,{"lines":{"33":[[":                                                                                                                             ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":1,"y":33}}],[4.258039,{"lines":{"33":[[":q                                                                                                                            ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":2}}],[1.508884,{"cursor":{"x":0,"visible":false}}],[0.002154,{"lines":{"0":[[" extracting: git-fibonacci/.git/objects/fe/5dae60fbe8a9bc1afc7cf0f12edbe21221df7a                                                      ",{}]],"1":[["   creating: git-fibonacci/.git/objects/ef/                                                                                            ",{}]],"2":[[" extracting: git-fibonacci/.git/objects/ef/48b4ee2ee81ceeefe50ed97d5dcdf347d099ea                                                      ",{}]],"3":[["   creating: git-fibonacci/.git/objects/8f/                                                                                            ",{}]],"4":[[" extracting: git-fibonacci/.git/objects/8f/01ee3d65532c24b97b2138a88793979f9b281e                                                      ",{}]],"5":[["   creating: git-fibonacci/.git/objects/d0/                                                                                            ",{}]],"6":[[" extracting: git-fibonacci/.git/objects/d0/e33b296197358602cf4dc4909d33dec0270ee1                                                      ",{}]],"7":[["   creating: git-fibonacci/.git/objects/79/                                                                                            ",{}]],"8":[[" extracting: git-fibonacci/.git/objects/79/6bee0e4317c2f7af648e9987bf77c9975e8dfd                                                      ",{}]],"9":[["   creating: git-fibonacci/.git/objects/9e/                                                                                            ",{}]],"10":[[" extracting: git-fibonacci/.git/objects/9e/de53a47526031df08155df498ad1a7b7ebec86                                                      ",{}]],"11":[[" extracting: git-fibonacci/.git/objects/9e/24883bbcf0dc3d304c5a3a6bd606bfc931281b                                                      ",{}]],"12":[["   creating: git-fibonacci/.git/refs/                                                                                                  ",{}]],"13":[["   creating: git-fibonacci/.git/refs/tags/                                                                                             ",{}]],"14":[["   creating: git-fibonacci/.git/refs/heads/                                                                                            ",{}]],"15":[[" extracting: git-fibonacci/.git/refs/heads/iterative_refactor                                                                          ",{}]],"16":[[" extracting: git-fibonacci/.git/refs/heads/master                                                                                      ",{}]],"17":[[" extracting: git-fibonacci/.git/ORIG_HEAD                                                                                              ",{}]],"18":[["  inflating: git-fibonacci/.git/index                                                                                                  ",{}]],"19":[["  inflating: git-fibonacci/.git/description                                                                                            ",{}]],"20":[["  inflating: git-fibonacci/.git/config                                                                                                 ",{}]],"21":[["   creating: git-fibonacci/.git/branches/                                                                                              ",{}]],"22":[["   creating: git-fibonacci/.git/logs/                                                                                                  ",{}]],"23":[["  inflating: git-fibonacci/.git/logs/HEAD                                                                                              ",{}]],"24":[["   creating: git-fibonacci/.git/logs/refs/                                                                                             ",{}]],"25":[["   creating: git-fibonacci/.git/logs/refs/heads/                                                                                       ",{}]],"26":[["  inflating: git-fibonacci/.git/logs/refs/heads/iterative_refactor                                                                     ",{}]],"27":[["  inflating: git-fibonacci/.git/logs/refs/heads/master                                                                                 ",{}]],"28":[["  inflating: git-fibonacci/README.md                                                                                                   ",{}]],"29":[["benjica@",{}],["gunter",{"underline":true}],["> cd git-fibonacci                                                                                          ",{}],["/tmp",{"fg":2}],["         ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> ls                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["fib.rb  README.md                                                                                                                      ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16,"visible":true}}],[2.420369,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.05843,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.101667,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.101237,{"cursor":{"x":20}}],[0.492128,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git b                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.16037,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git br                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.065119,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git bra                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.08798,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git bran                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.14799,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git branc                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.07387000000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git branch                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.173721,{"lines":{"0":[["   creating: git-fibonacci/.git/objects/ef/                                                                                            ",{}]],"1":[[" extracting: git-fibonacci/.git/objects/ef/48b4ee2ee81ceeefe50ed97d5dcdf347d099ea                                                      ",{}]],"2":[["   creating: git-fibonacci/.git/objects/8f/                                                                                            ",{}]],"3":[[" extracting: git-fibonacci/.git/objects/8f/01ee3d65532c24b97b2138a88793979f9b281e                                                      ",{}]],"4":[["   creating: git-fibonacci/.git/objects/d0/                                                                                            ",{}]],"5":[[" extracting: git-fibonacci/.git/objects/d0/e33b296197358602cf4dc4909d33dec0270ee1                                                      ",{}]],"6":[["   creating: git-fibonacci/.git/objects/79/                                                                                            ",{}]],"7":[[" extracting: git-fibonacci/.git/objects/79/6bee0e4317c2f7af648e9987bf77c9975e8dfd                                                      ",{}]],"8":[["   creating: git-fibonacci/.git/objects/9e/                                                                                            ",{}]],"9":[[" extracting: git-fibonacci/.git/objects/9e/de53a47526031df08155df498ad1a7b7ebec86                                                      ",{}]],"10":[[" extracting: git-fibonacci/.git/objects/9e/24883bbcf0dc3d304c5a3a6bd606bfc931281b                                                      ",{}]],"11":[["   creating: git-fibonacci/.git/refs/                                                                                                  ",{}]],"12":[["   creating: git-fibonacci/.git/refs/tags/                                                                                             ",{}]],"13":[["   creating: git-fibonacci/.git/refs/heads/                                                                                            ",{}]],"14":[[" extracting: git-fibonacci/.git/refs/heads/iterative_refactor                                                                          ",{}]],"15":[[" extracting: git-fibonacci/.git/refs/heads/master                                                                                      ",{}]],"16":[[" extracting: git-fibonacci/.git/ORIG_HEAD                                                                                              ",{}]],"17":[["  inflating: git-fibonacci/.git/index                                                                                                  ",{}]],"18":[["  inflating: git-fibonacci/.git/description                                                                                            ",{}]],"19":[["  inflating: git-fibonacci/.git/config                                                                                                 ",{}]],"20":[["   creating: git-fibonacci/.git/branches/                                                                                              ",{}]],"21":[["   creating: git-fibonacci/.git/logs/                                                                                                  ",{}]],"22":[["  inflating: git-fibonacci/.git/logs/HEAD                                                                                              ",{}]],"23":[["   creating: git-fibonacci/.git/logs/refs/                                                                                             ",{}]],"24":[["   creating: git-fibonacci/.git/logs/refs/heads/                                                                                       ",{}]],"25":[["  inflating: git-fibonacci/.git/logs/refs/heads/iterative_refactor                                                                     ",{}]],"26":[["  inflating: git-fibonacci/.git/logs/refs/heads/master                                                                                 ",{}]],"27":[["  inflating: git-fibonacci/README.md                                                                                                   ",{}]],"28":[["benjica@",{}],["gunter",{"underline":true}],["> cd git-fibonacci                                                                                          ",{}],["/tmp",{"fg":2}],["         ",{}]],"29":[["benjica@",{}],["gunter",{"underline":true}],["> ls                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"30":[["fib.rb  README.md                                                                                                                      ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> git branch                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.003858,{"lines":{"0":[["   creating: git-fibonacci/.git/objects/8f/                                                                                            ",{}]],"1":[[" extracting: git-fibonacci/.git/objects/8f/01ee3d65532c24b97b2138a88793979f9b281e                                                      ",{}]],"2":[["   creating: git-fibonacci/.git/objects/d0/                                                                                            ",{}]],"3":[[" extracting: git-fibonacci/.git/objects/d0/e33b296197358602cf4dc4909d33dec0270ee1                                                      ",{}]],"4":[["   creating: git-fibonacci/.git/objects/79/                                                                                            ",{}]],"5":[[" extracting: git-fibonacci/.git/objects/79/6bee0e4317c2f7af648e9987bf77c9975e8dfd                                                      ",{}]],"6":[["   creating: git-fibonacci/.git/objects/9e/                                                                                            ",{}]],"7":[[" extracting: git-fibonacci/.git/objects/9e/de53a47526031df08155df498ad1a7b7ebec86                                                      ",{}]],"8":[[" extracting: git-fibonacci/.git/objects/9e/24883bbcf0dc3d304c5a3a6bd606bfc931281b                                                      ",{}]],"9":[["   creating: git-fibonacci/.git/refs/                                                                                                  ",{}]],"10":[["   creating: git-fibonacci/.git/refs/tags/                                                                                             ",{}]],"11":[["   creating: git-fibonacci/.git/refs/heads/                                                                                            ",{}]],"12":[[" extracting: git-fibonacci/.git/refs/heads/iterative_refactor                                                                          ",{}]],"13":[[" extracting: git-fibonacci/.git/refs/heads/master                                                                                      ",{}]],"14":[[" extracting: git-fibonacci/.git/ORIG_HEAD                                                                                              ",{}]],"15":[["  inflating: git-fibonacci/.git/index                                                                                                  ",{}]],"16":[["  inflating: git-fibonacci/.git/description                                                                                            ",{}]],"17":[["  inflating: git-fibonacci/.git/config                                                                                                 ",{}]],"18":[["   creating: git-fibonacci/.git/branches/                                                                                              ",{}]],"19":[["   creating: git-fibonacci/.git/logs/                                                                                                  ",{}]],"20":[["  inflating: git-fibonacci/.git/logs/HEAD                                                                                              ",{}]],"21":[["   creating: git-fibonacci/.git/logs/refs/                                                                                             ",{}]],"22":[["   creating: git-fibonacci/.git/logs/refs/heads/                                                                                       ",{}]],"23":[["  inflating: git-fibonacci/.git/logs/refs/heads/iterative_refactor                                                                     ",{}]],"24":[["  inflating: git-fibonacci/.git/logs/refs/heads/master                                                                                 ",{}]],"25":[["  inflating: git-fibonacci/README.md                                                                                                   ",{}]],"26":[["benjica@",{}],["gunter",{"underline":true}],["> cd git-fibonacci                                                                                          ",{}],["/tmp",{"fg":2}],["         ",{}]],"27":[["benjica@",{}],["gunter",{"underline":true}],["> ls                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"28":[["fib.rb  README.md                                                                                                                      ",{}]],"29":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> git branch                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["  iterative_refactor                                                                                                                   ",{}]],"32":[["* ",{}],["master",{"fg":2}],["                                                                                                                               ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[7.064758,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.110189,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.056627,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.083161,{"cursor":{"x":20}}],[0.160451,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git c                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.050901,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git co                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.157952,{"cursor":{"x":23}}],[0.131487,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git co i                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.216534,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git co iterative_refactor",{}],[" ",{"bold":true}],["                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":42}}],[0.92709,{"lines":{"0":[[" extracting: git-fibonacci/.git/objects/8f/01ee3d65532c24b97b2138a88793979f9b281e                                                      ",{}]],"1":[["   creating: git-fibonacci/.git/objects/d0/                                                                                            ",{}]],"2":[[" extracting: git-fibonacci/.git/objects/d0/e33b296197358602cf4dc4909d33dec0270ee1                                                      ",{}]],"3":[["   creating: git-fibonacci/.git/objects/79/                                                                                            ",{}]],"4":[[" extracting: git-fibonacci/.git/objects/79/6bee0e4317c2f7af648e9987bf77c9975e8dfd                                                      ",{}]],"5":[["   creating: git-fibonacci/.git/objects/9e/                                                                                            ",{}]],"6":[[" extracting: git-fibonacci/.git/objects/9e/de53a47526031df08155df498ad1a7b7ebec86                                                      ",{}]],"7":[[" extracting: git-fibonacci/.git/objects/9e/24883bbcf0dc3d304c5a3a6bd606bfc931281b                                                      ",{}]],"8":[["   creating: git-fibonacci/.git/refs/                                                                                                  ",{}]],"9":[["   creating: git-fibonacci/.git/refs/tags/                                                                                             ",{}]],"10":[["   creating: git-fibonacci/.git/refs/heads/                                                                                            ",{}]],"11":[[" extracting: git-fibonacci/.git/refs/heads/iterative_refactor                                                                          ",{}]],"12":[[" extracting: git-fibonacci/.git/refs/heads/master                                                                                      ",{}]],"13":[[" extracting: git-fibonacci/.git/ORIG_HEAD                                                                                              ",{}]],"14":[["  inflating: git-fibonacci/.git/index                                                                                                  ",{}]],"15":[["  inflating: git-fibonacci/.git/description                                                                                            ",{}]],"16":[["  inflating: git-fibonacci/.git/config                                                                                                 ",{}]],"17":[["   creating: git-fibonacci/.git/branches/                                                                                              ",{}]],"18":[["   creating: git-fibonacci/.git/logs/                                                                                                  ",{}]],"19":[["  inflating: git-fibonacci/.git/logs/HEAD                                                                                              ",{}]],"20":[["   creating: git-fibonacci/.git/logs/refs/                                                                                             ",{}]],"21":[["   creating: git-fibonacci/.git/logs/refs/heads/                                                                                       ",{}]],"22":[["  inflating: git-fibonacci/.git/logs/refs/heads/iterative_refactor                                                                     ",{}]],"23":[["  inflating: git-fibonacci/.git/logs/refs/heads/master                                                                                 ",{}]],"24":[["  inflating: git-fibonacci/README.md                                                                                                   ",{}]],"25":[["benjica@",{}],["gunter",{"underline":true}],["> cd git-fibonacci                                                                                          ",{}],["/tmp",{"fg":2}],["         ",{}]],"26":[["benjica@",{}],["gunter",{"underline":true}],["> ls                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"27":[["fib.rb  README.md                                                                                                                      ",{}]],"28":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"29":[["benjica@",{}],["gunter",{"underline":true}],["> git branch                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"30":[["  iterative_refactor                                                                                                                   ",{}]],"31":[["* ",{}],["master",{"fg":2}],["                                                                                                                               ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> git co iterative_refactor                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.003066,{"lines":{"0":[["   creating: git-fibonacci/.git/objects/d0/                                                                                            ",{}]],"1":[[" extracting: git-fibonacci/.git/objects/d0/e33b296197358602cf4dc4909d33dec0270ee1                                                      ",{}]],"2":[["   creating: git-fibonacci/.git/objects/79/                                                                                            ",{}]],"3":[[" extracting: git-fibonacci/.git/objects/79/6bee0e4317c2f7af648e9987bf77c9975e8dfd                                                      ",{}]],"4":[["   creating: git-fibonacci/.git/objects/9e/                                                                                            ",{}]],"5":[[" extracting: git-fibonacci/.git/objects/9e/de53a47526031df08155df498ad1a7b7ebec86                                                      ",{}]],"6":[[" extracting: git-fibonacci/.git/objects/9e/24883bbcf0dc3d304c5a3a6bd606bfc931281b                                                      ",{}]],"7":[["   creating: git-fibonacci/.git/refs/                                                                                                  ",{}]],"8":[["   creating: git-fibonacci/.git/refs/tags/                                                                                             ",{}]],"9":[["   creating: git-fibonacci/.git/refs/heads/                                                                                            ",{}]],"10":[[" extracting: git-fibonacci/.git/refs/heads/iterative_refactor                                                                          ",{}]],"11":[[" extracting: git-fibonacci/.git/refs/heads/master                                                                                      ",{}]],"12":[[" extracting: git-fibonacci/.git/ORIG_HEAD                                                                                              ",{}]],"13":[["  inflating: git-fibonacci/.git/index                                                                                                  ",{}]],"14":[["  inflating: git-fibonacci/.git/description                                                                                            ",{}]],"15":[["  inflating: git-fibonacci/.git/config                                                                                                 ",{}]],"16":[["   creating: git-fibonacci/.git/branches/                                                                                              ",{}]],"17":[["   creating: git-fibonacci/.git/logs/                                                                                                  ",{}]],"18":[["  inflating: git-fibonacci/.git/logs/HEAD                                                                                              ",{}]],"19":[["   creating: git-fibonacci/.git/logs/refs/                                                                                             ",{}]],"20":[["   creating: git-fibonacci/.git/logs/refs/heads/                                                                                       ",{}]],"21":[["  inflating: git-fibonacci/.git/logs/refs/heads/iterative_refactor                                                                     ",{}]],"22":[["  inflating: git-fibonacci/.git/logs/refs/heads/master                                                                                 ",{}]],"23":[["  inflating: git-fibonacci/README.md                                                                                                   ",{}]],"24":[["benjica@",{}],["gunter",{"underline":true}],["> cd git-fibonacci                                                                                          ",{}],["/tmp",{"fg":2}],["         ",{}]],"25":[["benjica@",{}],["gunter",{"underline":true}],["> ls                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"26":[["fib.rb  README.md                                                                                                                      ",{}]],"27":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"28":[["benjica@",{}],["gunter",{"underline":true}],["> git branch                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"29":[["  iterative_refactor                                                                                                                   ",{}]],"30":[["* ",{}],["master",{"fg":2}],["                                                                                                                               ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> git co iterative_refactor                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["Switched to branch 'iterative_refactor'                                                                                                ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[0.01544,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> '                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[2.564122,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[0.101418,{}],[0.216841,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> v                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.067967,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.140921,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.091596,{"cursor":{"x":20}}],[0.562073,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim i                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.443911,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim it                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.119899,{}],[0.739626,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim i                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.131611,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":20}}],[0.44178,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim f                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.144131,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb",{}],[" ",{"bold":true}],["                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.264189,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[4e-06,{"lines":{"0":[[" extracting: git-fibonacci/.git/objects/d0/e33b296197358602cf4dc4909d33dec0270ee1                                                      ",{}]],"1":[["   creating: git-fibonacci/.git/objects/79/                                                                                            ",{}]],"2":[[" extracting: git-fibonacci/.git/objects/79/6bee0e4317c2f7af648e9987bf77c9975e8dfd                                                      ",{}]],"3":[["   creating: git-fibonacci/.git/objects/9e/                                                                                            ",{}]],"4":[[" extracting: git-fibonacci/.git/objects/9e/de53a47526031df08155df498ad1a7b7ebec86                                                      ",{}]],"5":[[" extracting: git-fibonacci/.git/objects/9e/24883bbcf0dc3d304c5a3a6bd606bfc931281b                                                      ",{}]],"6":[["   creating: git-fibonacci/.git/refs/                                                                                                  ",{}]],"7":[["   creating: git-fibonacci/.git/refs/tags/                                                                                             ",{}]],"8":[["   creating: git-fibonacci/.git/refs/heads/                                                                                            ",{}]],"9":[[" extracting: git-fibonacci/.git/refs/heads/iterative_refactor                                                                          ",{}]],"10":[[" extracting: git-fibonacci/.git/refs/heads/master                                                                                      ",{}]],"11":[[" extracting: git-fibonacci/.git/ORIG_HEAD                                                                                              ",{}]],"12":[["  inflating: git-fibonacci/.git/index                                                                                                  ",{}]],"13":[["  inflating: git-fibonacci/.git/description                                                                                            ",{}]],"14":[["  inflating: git-fibonacci/.git/config                                                                                                 ",{}]],"15":[["   creating: git-fibonacci/.git/branches/                                                                                              ",{}]],"16":[["   creating: git-fibonacci/.git/logs/                                                                                                  ",{}]],"17":[["  inflating: git-fibonacci/.git/logs/HEAD                                                                                              ",{}]],"18":[["   creating: git-fibonacci/.git/logs/refs/                                                                                             ",{}]],"19":[["   creating: git-fibonacci/.git/logs/refs/heads/                                                                                       ",{}]],"20":[["  inflating: git-fibonacci/.git/logs/refs/heads/iterative_refactor                                                                     ",{}]],"21":[["  inflating: git-fibonacci/.git/logs/refs/heads/master                                                                                 ",{}]],"22":[["  inflating: git-fibonacci/README.md                                                                                                   ",{}]],"23":[["benjica@",{}],["gunter",{"underline":true}],["> cd git-fibonacci                                                                                          ",{}],["/tmp",{"fg":2}],["         ",{}]],"24":[["benjica@",{}],["gunter",{"underline":true}],["> ls                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"25":[["fib.rb  README.md                                                                                                                      ",{}]],"26":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"27":[["benjica@",{}],["gunter",{"underline":true}],["> git branch                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"28":[["  iterative_refactor                                                                                                                   ",{}]],"29":[["* ",{}],["master",{"fg":2}],["                                                                                                                               ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> git co iterative_refactor                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["Switched to branch 'iterative_refactor'                                                                                                ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.139869,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["                                                                                                                                       ",{}]]}}],[0.000368,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                                            ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":18,"visible":false}}],[0.043811,{"lines":{"0":[["  1 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["sum",{"fg":110,"bg":16}],["(list)                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  2 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# This is a functional call that iteratively tabulates a given array",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  3 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list.reduce(",{"fg":254,"bg":16}],[":+",{"fg":148,"bg":16}],[")                                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  6 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"6":[["  7 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"7":[["  8 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"8":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 10 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                    ",{"fg":254,"bg":16}],["                                                                                    ",{}]]},"cursor":{"x":51,"y":9}}],[0.005623,{"lines":{"9":[[" 10 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 11 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 15 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 16 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 17 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 18 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 19 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 20 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 21 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 22 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 24 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 25 ",{"fg":237,"bg":16}],["    b = a                                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 26 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 27 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 28 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 29 ",{"fg":237,"bg":16}],["    list << sum                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"30":[[" 31 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"31":[[" 32 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"32":[[" 33 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"33":[["\"fib.rb\" 41L, 639C                                                                                           1,1           Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":0,"visible":true}}],[0.557239,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           2,1-2         Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":1}}],[0.17554,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           3,1-2         Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":2}}],[0.145673,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           4,1           Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":3}}],[0.153393,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           5,0-1         Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":4}}],[0.147695,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           6,1           Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":5}}],[0.131103,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           7,1-2         Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":6}}],[0.660182,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           8,0-1         Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":7}}],[0.040687,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           9,1-2         Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":8}}],[0.039577,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           10,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":9}}],[0.040274,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           11,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":10}}],[0.040739,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           12,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":11}}],[0.04022,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           13,0-1        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":12}}],[0.040937,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           14,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":13}}],[0.040517,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           15,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":14}}],[0.040509,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           16,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":15}}],[0.04014,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           17,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":16}}],[0.040687,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           18,0-1        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":17}}],[0.040348,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           19,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":18}}],[0.040375,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           20,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":19}}],[0.040143,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           21,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":20}}],[0.040625,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           22,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":21}}],[0.040476,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           23,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":22}}],[0.039985,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           24,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":23}}],[0.040509,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           25,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":24}}],[0.040603,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           26,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":25}}],[0.040427,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           27,0-1        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":26}}],[0.039842,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           28,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":27}}],[0.040536,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           29,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":28}}],[0.039642,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           30,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":29}}],[0.04009,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           31,0-1        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":30}}],[0.039738,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           32,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":31}}],[0.039515,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           33,1          Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":32}}],[0.040384,{"lines":{"0":[["  2 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# This is a functional call that iteratively tabulates a given array",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  3 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list.reduce(",{"fg":254,"bg":16}],[":+",{"fg":148,"bg":16}],[")                                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  6 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  7 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"6":[["  8 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"7":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 10 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 11 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 15 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 16 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 17 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 18 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 19 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 20 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 21 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 22 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 24 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 25 ",{"fg":237,"bg":16}],["    b = a                                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 26 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 27 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 28 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 29 ",{"fg":237,"bg":16}],["    list << sum                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 31 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"30":[[" 32 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"31":[[" 33 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"32":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             34,0-1        12%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.040234,{"lines":{"0":[["  3 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list.reduce(",{"fg":254,"bg":16}],[":+",{"fg":148,"bg":16}],[")                                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  6 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  7 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  8 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"6":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 10 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 11 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 15 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 16 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 17 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 18 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 19 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 20 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 21 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 22 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 24 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 25 ",{"fg":237,"bg":16}],["    b = a                                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 26 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 27 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 28 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 29 ",{"fg":237,"bg":16}],["    list << sum                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 31 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 32 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"30":[[" 33 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"31":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"32":[[" 35 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"33":[["                                                                                                             35,1          25%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.040719,{"lines":{"0":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  6 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  7 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  8 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 10 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 11 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 15 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 16 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 17 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 18 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 19 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 20 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 21 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 22 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 24 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 25 ",{"fg":237,"bg":16}],["    b = a                                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 26 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 27 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 28 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 29 ",{"fg":237,"bg":16}],["    list << sum                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 31 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 32 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 33 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"30":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"31":[[" 35 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"32":[[" 36 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"33":[["                                                                                                             36,1-2        37%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5}}],[0.039472,{"lines":{"0":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  6 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  7 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  8 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 10 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 11 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 15 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 16 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 17 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 18 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 19 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 20 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 21 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 22 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 24 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 25 ",{"fg":237,"bg":16}],["    b = a                                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 26 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 27 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 28 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 29 ",{"fg":237,"bg":16}],["    list << sum                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 31 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 32 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 33 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"30":[[" 35 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"31":[[" 36 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"32":[[" 37 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"33":[["                                                                                                             37,1-2        50%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.480557,{"lines":{"0":[["  6 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  7 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  8 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 10 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 11 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 15 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 16 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 17 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 18 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 19 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 20 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 21 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 22 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 24 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 25 ",{"fg":237,"bg":16}],["    b = a                                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 26 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 27 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 28 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 29 ",{"fg":237,"bg":16}],["    list << sum                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 31 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 32 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 33 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"29":[[" 35 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"30":[[" 36 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"31":[[" 37 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"32":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"33":[["                                                                                                             38,1-2        62%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.370976,{"lines":{"0":[["  7 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  8 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 10 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 11 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 15 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 16 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 17 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 18 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 19 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 20 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 21 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 22 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 24 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 25 ",{"fg":237,"bg":16}],["    b = a                                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 26 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 27 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 28 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 29 ",{"fg":237,"bg":16}],["    list << sum                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 31 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 32 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 33 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"28":[[" 35 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"29":[[" 36 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"30":[[" 37 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"31":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"32":[[" 39 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"33":[["                                                                                                             39,1          75%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4}}],[0.739354,{"lines":{"33":[["                                                                                                             38,1-2        75%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":31}}],[0.205742,{"lines":{"33":[["                                                                                                             37,1-2        75%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":30}}],[0.110474,{"lines":{"33":[["                                                                                                             36,1-2        75%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":29}}],[0.27657,{"lines":{"33":[["                                                                                                             35,1          75%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":28}}],[0.205523,{"lines":{"33":[["                                                                                                             34,0-1        75%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":27}}],[0.223503,{"lines":{"33":[["                                                                                                             33,1          75%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":26}}],[0.54747,{"lines":{"33":[["                                                                                                             34,0-1        75%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":27}}],[0.234069,{"lines":{"33":[["                                                                                                             35,1          75%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":28}}],[0.230487,{"lines":{"33":[["                                                                                                             36,1-2        75%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":29}}],[0.338967,{"lines":{"33":[["                                                                                                             35,1          75%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":28}}],[0.173663,{"lines":{"33":[["                                                                                                             34,0-1        75%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":27}}],[0.200306,{"lines":{"33":[["                                                                                                             33,1          75%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":26}}],[0.256937,{"lines":{"33":[["                                                                                                             32,1-2        75%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":25}}],[0.49857,{"lines":{"33":[["                                                                                                             31,0-1        75%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":24}}],[2.406874,{"lines":{"33":[[":                                                                                                                             ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":1,"y":33}}],[1.600906,{"lines":{"33":[[":q                                                                                                                            ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":2}}],[0.160525,{"cursor":{"x":0}}],[0.008126,{"lines":{"0":[[" extracting: git-fibonacci/.git/objects/d0/e33b296197358602cf4dc4909d33dec0270ee1                                                      ",{}]],"1":[["   creating: git-fibonacci/.git/objects/79/                                                                                            ",{}]],"2":[[" extracting: git-fibonacci/.git/objects/79/6bee0e4317c2f7af648e9987bf77c9975e8dfd                                                      ",{}]],"3":[["   creating: git-fibonacci/.git/objects/9e/                                                                                            ",{}]],"4":[[" extracting: git-fibonacci/.git/objects/9e/de53a47526031df08155df498ad1a7b7ebec86                                                      ",{}]],"5":[[" extracting: git-fibonacci/.git/objects/9e/24883bbcf0dc3d304c5a3a6bd606bfc931281b                                                      ",{}]],"6":[["   creating: git-fibonacci/.git/refs/                                                                                                  ",{}]],"7":[["   creating: git-fibonacci/.git/refs/tags/                                                                                             ",{}]],"8":[["   creating: git-fibonacci/.git/refs/heads/                                                                                            ",{}]],"9":[[" extracting: git-fibonacci/.git/refs/heads/iterative_refactor                                                                          ",{}]],"10":[[" extracting: git-fibonacci/.git/refs/heads/master                                                                                      ",{}]],"11":[[" extracting: git-fibonacci/.git/ORIG_HEAD                                                                                              ",{}]],"12":[["  inflating: git-fibonacci/.git/index                                                                                                  ",{}]],"13":[["  inflating: git-fibonacci/.git/description                                                                                            ",{}]],"14":[["  inflating: git-fibonacci/.git/config                                                                                                 ",{}]],"15":[["   creating: git-fibonacci/.git/branches/                                                                                              ",{}]],"16":[["   creating: git-fibonacci/.git/logs/                                                                                                  ",{}]],"17":[["  inflating: git-fibonacci/.git/logs/HEAD                                                                                              ",{}]],"18":[["   creating: git-fibonacci/.git/logs/refs/                                                                                             ",{}]],"19":[["   creating: git-fibonacci/.git/logs/refs/heads/                                                                                       ",{}]],"20":[["  inflating: git-fibonacci/.git/logs/refs/heads/iterative_refactor                                                                     ",{}]],"21":[["  inflating: git-fibonacci/.git/logs/refs/heads/master                                                                                 ",{}]],"22":[["  inflating: git-fibonacci/README.md                                                                                                   ",{}]],"23":[["benjica@",{}],["gunter",{"underline":true}],["> cd git-fibonacci                                                                                          ",{}],["/tmp",{"fg":2}],["         ",{}]],"24":[["benjica@",{}],["gunter",{"underline":true}],["> ls                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"25":[["fib.rb  README.md                                                                                                                      ",{}]],"26":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"27":[["benjica@",{}],["gunter",{"underline":true}],["> git branch                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"28":[["  iterative_refactor                                                                                                                   ",{}]],"29":[["* ",{}],["master",{"fg":2}],["                                                                                                                               ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> git co iterative_refactor                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["Switched to branch 'iterative_refactor'                                                                                                ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[3.847211,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.067797,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.08612400000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.040196,{"cursor":{"x":20}}],[0.232643,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git c                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.05701,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git co                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.08021300000000001,{"cursor":{"x":23}}],[0.492835,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git co m                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.067311,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git co ma                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.14869,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git co mas                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.182605,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git co mast                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.104217,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git co maste                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":28}}],[0.079388,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git co master                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":29}}],[0.124249,{"lines":{"0":[["   creating: git-fibonacci/.git/objects/79/                                                                                            ",{}]],"1":[[" extracting: git-fibonacci/.git/objects/79/6bee0e4317c2f7af648e9987bf77c9975e8dfd                                                      ",{}]],"2":[["   creating: git-fibonacci/.git/objects/9e/                                                                                            ",{}]],"3":[[" extracting: git-fibonacci/.git/objects/9e/de53a47526031df08155df498ad1a7b7ebec86                                                      ",{}]],"4":[[" extracting: git-fibonacci/.git/objects/9e/24883bbcf0dc3d304c5a3a6bd606bfc931281b                                                      ",{}]],"5":[["   creating: git-fibonacci/.git/refs/                                                                                                  ",{}]],"6":[["   creating: git-fibonacci/.git/refs/tags/                                                                                             ",{}]],"7":[["   creating: git-fibonacci/.git/refs/heads/                                                                                            ",{}]],"8":[[" extracting: git-fibonacci/.git/refs/heads/iterative_refactor                                                                          ",{}]],"9":[[" extracting: git-fibonacci/.git/refs/heads/master                                                                                      ",{}]],"10":[[" extracting: git-fibonacci/.git/ORIG_HEAD                                                                                              ",{}]],"11":[["  inflating: git-fibonacci/.git/index                                                                                                  ",{}]],"12":[["  inflating: git-fibonacci/.git/description                                                                                            ",{}]],"13":[["  inflating: git-fibonacci/.git/config                                                                                                 ",{}]],"14":[["   creating: git-fibonacci/.git/branches/                                                                                              ",{}]],"15":[["   creating: git-fibonacci/.git/logs/                                                                                                  ",{}]],"16":[["  inflating: git-fibonacci/.git/logs/HEAD                                                                                              ",{}]],"17":[["   creating: git-fibonacci/.git/logs/refs/                                                                                             ",{}]],"18":[["   creating: git-fibonacci/.git/logs/refs/heads/                                                                                       ",{}]],"19":[["  inflating: git-fibonacci/.git/logs/refs/heads/iterative_refactor                                                                     ",{}]],"20":[["  inflating: git-fibonacci/.git/logs/refs/heads/master                                                                                 ",{}]],"21":[["  inflating: git-fibonacci/README.md                                                                                                   ",{}]],"22":[["benjica@",{}],["gunter",{"underline":true}],["> cd git-fibonacci                                                                                          ",{}],["/tmp",{"fg":2}],["         ",{}]],"23":[["benjica@",{}],["gunter",{"underline":true}],["> ls                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"24":[["fib.rb  README.md                                                                                                                      ",{}]],"25":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"26":[["benjica@",{}],["gunter",{"underline":true}],["> git branch                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"27":[["  iterative_refactor                                                                                                                   ",{}]],"28":[["* ",{}],["master",{"fg":2}],["                                                                                                                               ",{}]],"29":[["benjica@",{}],["gunter",{"underline":true}],["> git co iterative_refactor                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"30":[["Switched to branch 'iterative_refactor'                                                                                                ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> git co master                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.00472,{"lines":{"0":[[" extracting: git-fibonacci/.git/objects/79/6bee0e4317c2f7af648e9987bf77c9975e8dfd                                                      ",{}]],"1":[["   creating: git-fibonacci/.git/objects/9e/                                                                                            ",{}]],"2":[[" extracting: git-fibonacci/.git/objects/9e/de53a47526031df08155df498ad1a7b7ebec86                                                      ",{}]],"3":[[" extracting: git-fibonacci/.git/objects/9e/24883bbcf0dc3d304c5a3a6bd606bfc931281b                                                      ",{}]],"4":[["   creating: git-fibonacci/.git/refs/                                                                                                  ",{}]],"5":[["   creating: git-fibonacci/.git/refs/tags/                                                                                             ",{}]],"6":[["   creating: git-fibonacci/.git/refs/heads/                                                                                            ",{}]],"7":[[" extracting: git-fibonacci/.git/refs/heads/iterative_refactor                                                                          ",{}]],"8":[[" extracting: git-fibonacci/.git/refs/heads/master                                                                                      ",{}]],"9":[[" extracting: git-fibonacci/.git/ORIG_HEAD                                                                                              ",{}]],"10":[["  inflating: git-fibonacci/.git/index                                                                                                  ",{}]],"11":[["  inflating: git-fibonacci/.git/description                                                                                            ",{}]],"12":[["  inflating: git-fibonacci/.git/config                                                                                                 ",{}]],"13":[["   creating: git-fibonacci/.git/branches/                                                                                              ",{}]],"14":[["   creating: git-fibonacci/.git/logs/                                                                                                  ",{}]],"15":[["  inflating: git-fibonacci/.git/logs/HEAD                                                                                              ",{}]],"16":[["   creating: git-fibonacci/.git/logs/refs/                                                                                             ",{}]],"17":[["   creating: git-fibonacci/.git/logs/refs/heads/                                                                                       ",{}]],"18":[["  inflating: git-fibonacci/.git/logs/refs/heads/iterative_refactor                                                                     ",{}]],"19":[["  inflating: git-fibonacci/.git/logs/refs/heads/master                                                                                 ",{}]],"20":[["  inflating: git-fibonacci/README.md                                                                                                   ",{}]],"21":[["benjica@",{}],["gunter",{"underline":true}],["> cd git-fibonacci                                                                                          ",{}],["/tmp",{"fg":2}],["         ",{}]],"22":[["benjica@",{}],["gunter",{"underline":true}],["> ls                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"23":[["fib.rb  README.md                                                                                                                      ",{}]],"24":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"25":[["benjica@",{}],["gunter",{"underline":true}],["> git branch                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"26":[["  iterative_refactor                                                                                                                   ",{}]],"27":[["* ",{}],["master",{"fg":2}],["                                                                                                                               ",{}]],"28":[["benjica@",{}],["gunter",{"underline":true}],["> git co iterative_refactor                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"29":[["Switched to branch 'iterative_refactor'                                                                                                ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> git co master                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["Switched to branch 'master'                                                                                                            ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[0.415,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.07663200000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.083213,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.093946,{"cursor":{"x":20}}],[0.391913,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git d                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.215157,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git di                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.403321,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git dif                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.135061,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.06382,{"cursor":{"x":25}}],[2.919081,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff m                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.108617,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff ma                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.054008,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff mas                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":28}}],[0.029178,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff masa                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":29}}],[0.276076,{}],[0.44148,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff mas                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":28}}],[0.171708,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff ma                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.165592,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff master",{}],["..",{"bold":true}],["                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":33}}],[6.176976,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff master..i                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":34}}],[0.130448,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff master..iterative_refactor",{}],[" ",{"bold":true}],["                                                        ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":52}}],[1.581114,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff master..iterative_refactor                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":51}}],[0.006221000000000001,{"lines":{"0":[["diff --git a/fib.rb b/fib.rb",{"bold":true}],["                                                                                                           ",{}]],"1":[["index 10cdcc1..8420878 100644",{"bold":true}],["                                                                                                          ",{}]],"2":[["--- a/fib.rb",{"bold":true}],["                                                                                                                           ",{}]],"3":[["+++ b/fib.rb",{"bold":true}],["                                                                                                                           ",{}]],"4":[["@@ -3,27 +3,39 @@",{"fg":6}],[" def sum(list)                                                                                                        ",{}]],"5":[["        return list.reduce(:+)                                                                                                         ",{}]],"6":[[" end                                                                                                                                   ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["-def r_fibonacci(n)",{"fg":1}],["                                                                                                                    ",{}]],"9":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"10":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"11":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"12":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"13":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"14":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"15":[["        if n <= 1                                                                                                                      ",{}]],"16":[["                return 1                                                                                                               ",{}]],"17":[["        end                                                                                                                            ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"20":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"21":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"22":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"23":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"24":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"27":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"28":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"29":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"30":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"31":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"32":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"33":[[":                                                                                                                                      ",{}]]},"cursor":{"x":1}}],[4.009976,{"lines":{"0":[["index 10cdcc1..8420878 100644",{"bold":true}],["                                                                                                          ",{}]],"1":[["--- a/fib.rb",{"bold":true}],["                                                                                                                           ",{}]],"2":[["+++ b/fib.rb",{"bold":true}],["                                                                                                                           ",{}]],"3":[["@@ -3,27 +3,39 @@",{"fg":6}],[" def sum(list)                                                                                                        ",{}]],"4":[["        return list.reduce(:+)                                                                                                         ",{}]],"5":[[" end                                                                                                                                   ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["-def r_fibonacci(n)",{"fg":1}],["                                                                                                                    ",{}]],"8":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"9":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"10":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"11":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"12":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"13":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"14":[["        if n <= 1                                                                                                                      ",{}]],"15":[["                return 1                                                                                                               ",{}]],"16":[["        end                                                                                                                            ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"19":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"20":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"21":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"22":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"23":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"26":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"27":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"28":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"29":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"30":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"31":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"32":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]]}}],[0.333709,{"lines":{"0":[["--- a/fib.rb",{"bold":true}],["                                                                                                                           ",{}]],"1":[["+++ b/fib.rb",{"bold":true}],["                                                                                                                           ",{}]],"2":[["@@ -3,27 +3,39 @@",{"fg":6}],[" def sum(list)                                                                                                        ",{}]],"3":[["        return list.reduce(:+)                                                                                                         ",{}]],"4":[[" end                                                                                                                                   ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["-def r_fibonacci(n)",{"fg":1}],["                                                                                                                    ",{}]],"7":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"8":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"9":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"10":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"11":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"12":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"13":[["        if n <= 1                                                                                                                      ",{}]],"14":[["                return 1                                                                                                               ",{}]],"15":[["        end                                                                                                                            ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"18":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"19":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"20":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"21":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"22":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"25":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"26":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"27":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"28":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"29":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"30":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"31":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"32":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]]}}],[0.175279,{"lines":{"0":[["+++ b/fib.rb",{"bold":true}],["                                                                                                                           ",{}]],"1":[["@@ -3,27 +3,39 @@",{"fg":6}],[" def sum(list)                                                                                                        ",{}]],"2":[["        return list.reduce(:+)                                                                                                         ",{}]],"3":[[" end                                                                                                                                   ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["-def r_fibonacci(n)",{"fg":1}],["                                                                                                                    ",{}]],"6":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"7":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"8":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"9":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"10":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"11":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"12":[["        if n <= 1                                                                                                                      ",{}]],"13":[["                return 1                                                                                                               ",{}]],"14":[["        end                                                                                                                            ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"17":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"18":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"19":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"20":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"21":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"24":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"25":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"26":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"27":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"28":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"29":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"30":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"31":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"32":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]]}}],[0.223917,{"lines":{"0":[["@@ -3,27 +3,39 @@",{"fg":6}],[" def sum(list)                                                                                                        ",{}]],"1":[["        return list.reduce(:+)                                                                                                         ",{}]],"2":[[" end                                                                                                                                   ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["-def r_fibonacci(n)",{"fg":1}],["                                                                                                                    ",{}]],"5":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"6":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"7":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"8":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"9":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"10":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"11":[["        if n <= 1                                                                                                                      ",{}]],"12":[["                return 1                                                                                                               ",{}]],"13":[["        end                                                                                                                            ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"16":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"17":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"18":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"19":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"20":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"23":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"24":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"25":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"26":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"27":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"28":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"29":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"30":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"31":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"32":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]]}}],[0.343345,{"lines":{"0":[["        return list.reduce(:+)                                                                                                         ",{}]],"1":[[" end                                                                                                                                   ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["-def r_fibonacci(n)",{"fg":1}],["                                                                                                                    ",{}]],"4":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"5":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"6":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"7":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"8":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"9":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"10":[["        if n <= 1                                                                                                                      ",{}]],"11":[["                return 1                                                                                                               ",{}]],"12":[["        end                                                                                                                            ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"15":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"16":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"17":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"18":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"19":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"22":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"23":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"24":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"25":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"26":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"27":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"28":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"29":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"30":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"31":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"32":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]]}}],[0.236138,{"lines":{"0":[[" end                                                                                                                                   ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["-def r_fibonacci(n)",{"fg":1}],["                                                                                                                    ",{}]],"3":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"4":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"5":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"6":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"7":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"8":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"9":[["        if n <= 1                                                                                                                      ",{}]],"10":[["                return 1                                                                                                               ",{}]],"11":[["        end                                                                                                                            ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"14":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"15":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"16":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"17":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"18":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"21":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"22":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"23":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"24":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"25":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"26":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"27":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"28":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"29":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"30":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"31":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"32":[["+",{"fg":2}],["                                                                                                                                      ",{}]]}}],[0.382261,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["-def r_fibonacci(n)",{"fg":1}],["                                                                                                                    ",{}]],"2":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"3":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"4":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"5":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"6":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"7":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"8":[["        if n <= 1                                                                                                                      ",{}]],"9":[["                return 1                                                                                                               ",{}]],"10":[["        end                                                                                                                            ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"13":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"14":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"15":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"16":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"17":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"20":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"21":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"22":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"23":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"24":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"25":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"26":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"27":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"28":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"29":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"30":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"31":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"32":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]]}}],[18.922834,{"lines":{"0":[["-def r_fibonacci(n)",{"fg":1}],["                                                                                                                    ",{}]],"1":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"2":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"3":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"4":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"5":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"6":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"7":[["        if n <= 1                                                                                                                      ",{}]],"8":[["                return 1                                                                                                               ",{}]],"9":[["        end                                                                                                                            ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"12":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"13":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"14":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"15":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"16":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"19":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"20":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"21":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"22":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"23":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"24":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"25":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"26":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"27":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"28":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"29":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"30":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"31":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"32":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]]}}],[0.300263,{"lines":{"0":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"1":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"2":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"3":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"4":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"5":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"6":[["        if n <= 1                                                                                                                      ",{}]],"7":[["                return 1                                                                                                               ",{}]],"8":[["        end                                                                                                                            ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"11":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"12":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"13":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"14":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"15":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"18":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"19":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"20":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"21":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"22":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"23":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"24":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"25":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"26":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"27":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"28":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"29":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"30":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"31":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"32":[["        end                                                                                                                            ",{}]]}}],[0.125108,{"lines":{"0":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"1":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"2":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"3":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"4":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"5":[["        if n <= 1                                                                                                                      ",{}]],"6":[["                return 1                                                                                                               ",{}]],"7":[["        end                                                                                                                            ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"10":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"11":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"12":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"13":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"14":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"17":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"18":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"19":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"20":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"21":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"22":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"23":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"24":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"25":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"26":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"27":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"28":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"29":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"30":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"31":[["        end                                                                                                                            ",{}]],"32":[["+",{"fg":2}],["                                                                                                                                      ",{}]]}}],[0.127618,{"lines":{"0":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"1":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"2":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"3":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"4":[["        if n <= 1                                                                                                                      ",{}]],"5":[["                return 1                                                                                                               ",{}]],"6":[["        end                                                                                                                            ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"9":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"10":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"11":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"12":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"13":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"16":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"17":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"18":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"19":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"20":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"21":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"22":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"23":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"24":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"25":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"26":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"27":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"28":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"29":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"30":[["        end                                                                                                                            ",{}]],"31":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"32":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]]}}],[0.211043,{"lines":{"0":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"1":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"2":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"3":[["        if n <= 1                                                                                                                      ",{}]],"4":[["                return 1                                                                                                               ",{}]],"5":[["        end                                                                                                                            ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"8":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"9":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"10":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"11":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"12":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"15":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"16":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"17":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"18":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"19":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"20":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"21":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"22":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"23":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"24":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"25":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"26":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"27":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"28":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"29":[["        end                                                                                                                            ",{}]],"30":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"31":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"32":[[" end                                                                                                                                   ",{}]]}}],[0.148738,{"lines":{"0":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"1":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"2":[["        if n <= 1                                                                                                                      ",{}]],"3":[["                return 1                                                                                                               ",{}]],"4":[["        end                                                                                                                            ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"7":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"8":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"9":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"10":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"11":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"14":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"15":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"16":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"17":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"18":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"19":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"20":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"21":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"22":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"23":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"24":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"25":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"26":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"27":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"28":[["        end                                                                                                                            ",{}]],"29":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"30":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"31":[[" end                                                                                                                                   ",{}]],"32":[["                                                                                                                                       ",{}]]}}],[0.176824,{"lines":{"0":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"1":[["        if n <= 1                                                                                                                      ",{}]],"2":[["                return 1                                                                                                               ",{}]],"3":[["        end                                                                                                                            ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"6":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"7":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"8":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"9":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"10":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"13":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"14":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"15":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"16":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"17":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"18":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"19":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"20":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"21":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"22":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"23":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"24":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"25":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"26":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"27":[["        end                                                                                                                            ",{}]],"28":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"29":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"30":[[" end                                                                                                                                   ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[[" def main()                                                                                                                            ",{}]]}}],[0.137296,{"lines":{"0":[["        if n <= 1                                                                                                                      ",{}]],"1":[["                return 1                                                                                                               ",{}]],"2":[["        end                                                                                                                            ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"5":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"6":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"7":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"8":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"9":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"12":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"13":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"14":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"15":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"16":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"17":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"18":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"19":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"20":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"21":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"22":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"23":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"24":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"25":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"26":[["        end                                                                                                                            ",{}]],"27":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"28":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"29":[[" end                                                                                                                                   ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[[" def main()                                                                                                                            ",{}]],"32":[["        # Our job with fibonacci is to print the sum of the fibonacci sequence up to                                                   ",{}]]}}],[4.432779,{"lines":{"0":[["                return 1                                                                                                               ",{}]],"1":[["        end                                                                                                                            ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"4":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"5":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"6":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"7":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"8":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"11":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"12":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"13":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"14":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"15":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"16":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"17":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"18":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"19":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"20":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"21":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"22":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"23":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"24":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"25":[["        end                                                                                                                            ",{}]],"26":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"27":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"28":[[" end                                                                                                                                   ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[[" def main()                                                                                                                            ",{}]],"31":[["        # Our job with fibonacci is to print the sum of the fibonacci sequence up to                                                   ",{}]],"32":[["        # the tenth item.                                                                                                              ",{}]]}}],[0.460016,{"lines":{"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.000615,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[1.029983,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.076697,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.08116900000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.121311,{"cursor":{"x":20}}],[0.351896,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git m                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.109824,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git me                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.092501,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git mer                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.168851,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.416694,{"cursor":{"x":26}}],[1.728216,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge i                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.157189,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge iterative_refactor",{}],[" ",{"bold":true}],["                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":45}}],[3.395958,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge iterative_refactor                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":44}}],[0.007586000000000001,{"lines":{"0":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"1":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"2":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"3":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"4":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"7":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"8":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"9":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"10":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"11":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"12":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"13":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"14":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"15":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"16":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"17":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"18":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"19":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"20":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"21":[["        end                                                                                                                            ",{}]],"23":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"24":[[" end                                                                                                                                   ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[[" def main()                                                                                                                            ",{}]],"27":[["        # Our job with fibonacci is to print the sum of the fibonacci sequence up to                                                   ",{}]],"28":[["        # the tenth item.                                                                                                              ",{}]],"29":[["benjica@",{}],["gunter",{"underline":true}],["> git merge iterative_refactor                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"30":[["Auto-merging fib.rb                                                                                                                    ",{}]],"31":[["CONFLICT (content): Merge conflict in fib.rb                                                                                           ",{}]],"32":[["Automatic merge failed; fix conflicts and then commit the result.                                                                      ",{}]],"33":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],[">                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":20}}],[3.688912,{"lines":{"33":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> v                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.113518,{"lines":{"33":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vi                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.164909,{"lines":{"33":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.08860700000000001,{"cursor":{"x":24}}],[0.329052,{}],[4.4e-05,{"lines":{"0":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"1":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"2":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"3":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"6":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"7":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"8":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"9":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"10":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"11":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"12":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"13":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"14":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"15":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"16":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"17":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"18":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"19":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"20":[["        end                                                                                                                            ",{}]],"21":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"22":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"23":[[" end                                                                                                                                   ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[[" def main()                                                                                                                            ",{}]],"26":[["        # Our job with fibonacci is to print the sum of the fibonacci sequence up to                                                   ",{}]],"27":[["        # the tenth item.                                                                                                              ",{}]],"28":[["benjica@",{}],["gunter",{"underline":true}],["> git merge iterative_refactor                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"29":[["Auto-merging fib.rb                                                                                                                    ",{}]],"30":[["CONFLICT (content): Merge conflict in fib.rb                                                                                           ",{}]],"31":[["Automatic merge failed; fix conflicts and then commit the result.                                                                      ",{}]],"32":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["fib.rb     README.md                                                                                                                   ",{}]]},"cursor":{"y":32}}],[0.38108,{"lines":{"32":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim f                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.115923,{"lines":{"32":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb",{}],[" ",{"bold":true}],["                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":31}}],[0.259807,{"lines":{"32":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":30}}],[3e-06,{"lines":{"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0,"y":33}}],[0.13848,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["                                                                                                                                       ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["                                                                                                                                       ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["                                                                                                                                       ",{}]]}}],[0.000472,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                                           ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":19,"visible":false}}],[0.042568,{"lines":{"0":[["  1 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["sum",{"fg":110,"bg":16}],["(list)                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  2 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# This is a functional call that iteratively tabulates a given array",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  3 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list.reduce(",{"fg":254,"bg":16}],[":+",{"fg":148,"bg":16}],[")                                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  6 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"6":[["  7 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci",{"fg":110,"bg":16}],["(n)                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"7":[["  8 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"8":[["  9 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                ",{"fg":254,"bg":16}],["            ",{}]]},"cursor":{"x":123,"y":9}}],[0.008673,{"lines":{"9":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"30":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"31":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"32":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"33":[["\"fib.rb\" 62L, 1054C                                                                                          1,1           Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":0,"visible":true}}],[2.447561,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          2,1-2         Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":1}}],[0.190224,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          3,1-2         Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":2}}],[0.127474,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          4,1           Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":3}}],[0.215424,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          5,0-1         Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":4}}],[0.660744,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          6,1           Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":5}}],[0.039787,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          7,1           Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":6}}],[0.040049,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          8,1-2         Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":7}}],[0.039829,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          9,1-2         Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":8}}],[0.040226,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          10,1          Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":9}}],[0.04027,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          11,1          Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":10}}],[0.040873,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          12,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":11}}],[0.039728,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          13,0-1        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":12}}],[0.03961,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          14,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":13}}],[0.039955,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          15,1          Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":14}}],[0.039885,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          16,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":15}}],[0.039757,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          17,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":16}}],[0.041001,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          18,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":17}}],[0.040385,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          19,0-1        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":18}}],[0.040496,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          20,1          Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":19}}],[0.040471,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          21,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":20}}],[0.040814,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          22,1          Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":21}}],[0.0414,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          23,0-1        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":22}}],[0.040941,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          24,1          Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":23}}],[0.040735,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          25,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":24}}],[0.039905,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          26,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":25}}],[0.040068,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          27,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":26}}],[0.039847,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          28,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":27}}],[0.040232,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          29,1          Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":28}}],[0.040202,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          30,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":29}}],[0.040891,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          31,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":30}}],[0.039991,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          32,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":31}}],[0.040873,{"lines":{"33":[["\"fib.rb\" 62L, 1054C                                                                                          33,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":32}}],[0.041568,{"lines":{"0":[["  2 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# This is a functional call that iteratively tabulates a given array",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  3 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list.reduce(",{"fg":254,"bg":16}],[":+",{"fg":148,"bg":16}],[")                                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  6 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  7 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci",{"fg":110,"bg":16}],["(n)                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"6":[["  8 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"7":[["  9 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"30":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"31":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"32":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             34,0-1         3%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4}}],[0.041515,{"lines":{"0":[["  3 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list.reduce(",{"fg":254,"bg":16}],[":+",{"fg":148,"bg":16}],[")                                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  6 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  7 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci",{"fg":110,"bg":16}],["(n)                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  8 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"6":[["  9 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"30":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"31":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"32":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"33":[["                                                                                                             35,1-2         6%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5}}],[0.039737,{"lines":{"0":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  6 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  7 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci",{"fg":110,"bg":16}],["(n)                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  8 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  9 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"30":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"31":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"32":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"33":[["                                                                                                             36,1-2        10%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.039843,{"lines":{"0":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  6 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  7 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci",{"fg":110,"bg":16}],["(n)                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  8 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  9 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"30":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"31":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"32":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"33":[["                                                                                                             37,1-2        13%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.040501,{"lines":{"0":[["  6 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  7 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci",{"fg":110,"bg":16}],["(n)                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  8 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  9 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"29":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"30":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"31":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"32":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"33":[["                                                                                                             38,1-2        17%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.040151,{"lines":{"0":[["  7 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci",{"fg":110,"bg":16}],["(n)                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  8 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  9 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"28":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"29":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"30":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"31":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"32":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             39,1-2        20%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.040078,{"lines":{"0":[["  8 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  9 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"27":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"28":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"29":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"30":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"31":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"32":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"33":[["                                                                                                             40,1-2        24%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.040176,{"lines":{"0":[["  9 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"26":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"27":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"28":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"29":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"30":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"31":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"32":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"33":[["                                                                                                             41,1-2        27%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.04085,{"lines":{"0":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"25":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"26":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"27":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"28":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"29":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"30":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"31":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"32":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"33":[["                                                                                                             42,1-2        31%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.039574,{"lines":{"0":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"24":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"25":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"26":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"27":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"28":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"29":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"30":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"31":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"32":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             43,0-1        34%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4}}],[0.041426,{"lines":{"0":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"23":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"24":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"25":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"26":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"27":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"28":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"29":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"30":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"31":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"32":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"33":[["                                                                                                             44,1-2        37%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5}}],[0.039279,{"lines":{"0":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"22":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"23":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"24":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"25":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"26":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"27":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"28":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"29":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"30":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"31":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"32":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"33":[["                                                                                                             45,1-2        41%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.040699,{"lines":{"0":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"21":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"22":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"23":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"24":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"25":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"26":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"27":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"28":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"29":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"30":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"31":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"32":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"33":[["                                                                                                             46,1-2        44%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.038861,{"lines":{"0":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"20":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"21":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"22":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"23":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"24":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"25":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"26":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"27":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"28":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"29":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"30":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"31":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"32":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             47,0-1        48%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4}}],[0.040873,{"lines":{"0":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"19":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"20":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"21":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"22":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"23":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"24":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"25":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"26":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"27":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"28":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"29":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"30":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"31":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"32":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"33":[["                                                                                                             48,1-2        51%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5}}],[0.040598,{"lines":{"0":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"18":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"19":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"20":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"21":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"22":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"23":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"24":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"25":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"26":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"27":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"28":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"29":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"30":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"31":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"32":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"33":[["                                                                                                             49,1          55%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4}}],[0.039535,{"lines":{"0":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"17":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"18":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"19":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"20":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"21":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"22":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"23":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"24":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"25":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"26":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"27":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"28":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"29":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"30":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"31":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"32":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"33":[["                                                                                                             50,1          58%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.040737,{"lines":{"0":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"16":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"17":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"18":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"19":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"20":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"21":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"22":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"23":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"24":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"25":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"26":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"27":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"28":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"29":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"30":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"31":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"32":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             51,0-1        62%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.04083,{"lines":{"0":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"15":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"16":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"17":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"18":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"19":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"20":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"21":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"22":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"23":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"24":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"25":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"26":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"27":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"28":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"29":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"30":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"31":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"32":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"33":[["                                                                                                             52,1          65%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.042367,{"lines":{"0":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"14":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"15":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"16":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"17":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"18":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"19":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"20":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"21":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"22":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"23":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"24":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"25":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"26":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"27":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"28":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"29":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"30":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"31":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"32":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"33":[["                                                                                                             53,1-2        68%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5}}],[0.037866,{"lines":{"0":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"13":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"14":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"15":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"16":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"17":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"18":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"19":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"20":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"21":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"22":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"23":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"24":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"25":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"26":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"27":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"28":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"29":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"30":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"31":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"32":[[" 54 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"33":[["                                                                                                             54,1-2        72%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.041577,{"lines":{"0":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"12":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"13":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"14":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"15":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"16":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"17":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"18":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"19":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"20":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"21":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"22":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"23":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"24":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"25":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"26":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"27":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"28":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"29":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"30":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"31":[[" 54 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"32":[[" 55 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"33":[["                                                                                                             55,1          75%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4}}],[0.040573,{"lines":{"0":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"11":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"12":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"13":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"14":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"15":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"16":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"17":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"18":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"19":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"20":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"21":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"22":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"23":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"24":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"25":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"26":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"27":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"28":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"29":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"30":[[" 54 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"31":[[" 55 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"32":[[" 56 ",{"fg":237,"bg":16}],["  puts sum(fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))                                                                                                     ",{"fg":254,"bg":16}]],"33":[["                                                                                                             56,1-2        79%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5}}],[0.038497,{"lines":{"0":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"10":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"11":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"12":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"13":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"14":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"15":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"16":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"17":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"18":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"19":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"20":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"21":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"22":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"23":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"24":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"25":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"26":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"27":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"28":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"29":[[" 54 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"30":[[" 55 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"31":[[" 56 ",{"fg":237,"bg":16}],["  puts sum(fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))                                                                                                     ",{"fg":254,"bg":16}]],"32":[[" 57 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"33":[["                                                                                                             57,1          82%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4}}],[0.040902,{"lines":{"0":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"9":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"10":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"11":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"12":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"13":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"14":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"15":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"16":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"17":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"18":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"19":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"20":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"21":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"22":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"23":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"24":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"25":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"26":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"27":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"28":[[" 54 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"29":[[" 55 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"30":[[" 56 ",{"fg":237,"bg":16}],["  puts sum(fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))                                                                                                     ",{"fg":254,"bg":16}]],"31":[[" 57 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"32":[[" 58 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"33":[["                                                                                                             58,1-2        86%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5}}],[0.040027,{"lines":{"0":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"8":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"9":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"10":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"11":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"12":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"13":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"14":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"15":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"16":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"17":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"18":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"19":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"20":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"21":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"22":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"23":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"24":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"25":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"26":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"27":[[" 54 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"28":[[" 55 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"29":[[" 56 ",{"fg":237,"bg":16}],["  puts sum(fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))                                                                                                     ",{"fg":254,"bg":16}]],"30":[[" 57 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"31":[[" 58 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"32":[[" 59 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"33":[["                                                                                                             59,1          89%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4}}],[0.03979,{"lines":{"0":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"7":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"8":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"9":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"10":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"11":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"12":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"13":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"14":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"15":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"16":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"17":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"18":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"19":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"20":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"21":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"22":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"23":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"24":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"25":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"26":[[" 54 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"27":[[" 55 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"28":[[" 56 ",{"fg":237,"bg":16}],["  puts sum(fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))                                                                                                     ",{"fg":254,"bg":16}]],"29":[[" 57 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"30":[[" 58 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"31":[[" 59 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"32":[[" 60 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"33":[["                                                                                                             60,1          93%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.04007,{"lines":{"0":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"6":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"7":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"8":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"9":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"10":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"11":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"12":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"13":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"14":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"15":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"16":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"17":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"18":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"19":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"20":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"21":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"22":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"23":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"24":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"25":[[" 54 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"26":[[" 55 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"27":[[" 56 ",{"fg":237,"bg":16}],["  puts sum(fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))                                                                                                     ",{"fg":254,"bg":16}]],"28":[[" 57 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"29":[[" 58 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"30":[[" 59 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"31":[[" 60 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"32":[[" 61 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             61,0-1        96%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.039798,{"lines":{"0":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"5":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"6":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"7":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"8":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"9":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"10":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"11":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"12":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"13":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"14":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"15":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"16":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"17":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"18":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"19":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"20":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"21":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"22":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"23":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"24":[[" 54 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"25":[[" 55 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"26":[[" 56 ",{"fg":237,"bg":16}],["  puts sum(fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))                                                                                                     ",{"fg":254,"bg":16}]],"27":[[" 57 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"28":[[" 58 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"29":[[" 59 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"30":[[" 60 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"31":[[" 61 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"32":[[" 62 ",{"fg":237,"bg":16}],["main()                                                                                                                             ",{"fg":254,"bg":16}]],"33":[["                                                                                                             62,1          Bot",{"fg":254,"bg":16}],["         ",{}]]}}],[0.038988,{}],[0.04051,{}],[0.039859,{}],[0.154384,{}],[0.244635,{"lines":{"33":[["                                                                                                             61,0-1        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":31}}],[0.173061,{"lines":{"33":[["                                                                                                             60,1          Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":30}}],[0.660252,{"lines":{"33":[["                                                                                                             59,1          Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":29}}],[0.04122,{"lines":{"33":[["                                                                                                             58,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":28}}],[0.040551,{"lines":{"33":[["                                                                                                             57,1          Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":27}}],[0.040314,{"lines":{"33":[["                                                                                                             56,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":26}}],[0.040814,{"lines":{"33":[["                                                                                                             55,1          Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":25}}],[0.039458,{"lines":{"33":[["                                                                                                             54,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":24}}],[0.040416,{"lines":{"33":[["                                                                                                             53,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":23}}],[0.040241,{"lines":{"33":[["                                                                                                             52,1          Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":22}}],[0.040903,{"lines":{"33":[["                                                                                                             51,0-1        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":21}}],[0.039694,{"lines":{"33":[["                                                                                                             50,1          Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":20}}],[0.040601,{"lines":{"33":[["                                                                                                             49,1          Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":19}}],[0.040148,{"lines":{"33":[["                                                                                                             48,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":18}}],[0.040504,{"lines":{"33":[["                                                                                                             47,0-1        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":17}}],[0.039799,{"lines":{"33":[["                                                                                                             46,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":16}}],[0.040181,{"lines":{"33":[["                                                                                                             45,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":15}}],[0.040169,{"lines":{"33":[["                                                                                                             44,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":14}}],[0.041822,{"lines":{"33":[["                                                                                                             43,0-1        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":13}}],[0.039244,{"lines":{"33":[["                                                                                                             42,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":12}}],[0.04043,{"lines":{"33":[["                                                                                                             41,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":11}}],[0.040153,{"lines":{"33":[["                                                                                                             40,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":10}}],[0.040039,{"lines":{"33":[["                                                                                                             39,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":9}}],[0.039903,{"lines":{"33":[["                                                                                                             38,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":8}}],[0.039756,{"lines":{"33":[["                                                                                                             37,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":7}}],[0.038997,{"lines":{"33":[["                                                                                                             36,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":6}}],[0.04076,{"lines":{"33":[["                                                                                                             35,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":5}}],[0.039162,{"lines":{"33":[["                                                                                                             34,0-1        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":4}}],[0.041607,{"lines":{"33":[["                                                                                                             33,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":3}}],[0.040353,{"lines":{"33":[["                                                                                                             32,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":2}}],[0.041106,{"lines":{"33":[["                                                                                                             31,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":1}}],[0.040453,{"lines":{"33":[["                                                                                                             30,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":0}}],[0.042197,{"lines":{"0":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"1":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"6":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"7":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"8":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"9":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"10":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"11":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"12":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"13":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"14":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"15":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"16":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"17":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"18":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"19":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"20":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"21":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"22":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"23":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"24":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"25":[[" 54 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"26":[[" 55 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"27":[[" 56 ",{"fg":237,"bg":16}],["  puts sum(fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))                                                                                                     ",{"fg":254,"bg":16}]],"28":[[" 57 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"29":[[" 58 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"30":[[" 59 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"31":[[" 60 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"32":[[" 61 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             29,1          96%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4}}],[0.040302,{"lines":{"0":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"1":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"2":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"7":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"8":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"9":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"10":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"11":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"12":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"13":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"14":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"15":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"16":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"17":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"18":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"19":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"20":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"21":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"22":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"23":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"24":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"25":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"26":[[" 54 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"27":[[" 55 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"28":[[" 56 ",{"fg":237,"bg":16}],["  puts sum(fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))                                                                                                     ",{"fg":254,"bg":16}]],"29":[[" 57 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"30":[[" 58 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"31":[[" 59 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"32":[[" 60 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"33":[["                                                                                                             28,1-2        93%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5}}],[0.040017,{"lines":{"0":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"1":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"2":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"3":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"8":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"9":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"10":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"11":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"12":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"13":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"14":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"15":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"16":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"17":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"18":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"19":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"20":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"21":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"22":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"23":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"24":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"25":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"26":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"27":[[" 54 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"28":[[" 55 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"29":[[" 56 ",{"fg":237,"bg":16}],["  puts sum(fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))                                                                                                     ",{"fg":254,"bg":16}]],"30":[[" 57 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"31":[[" 58 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"32":[[" 59 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"33":[["                                                                                                             27,1-2        89%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.041646,{"lines":{"0":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"1":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"2":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"3":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"4":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"9":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"10":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"11":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"12":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"13":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"14":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"15":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"16":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"17":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"18":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"19":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"20":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"21":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"22":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"23":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"24":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"25":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"26":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"27":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"28":[[" 54 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"29":[[" 55 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"30":[[" 56 ",{"fg":237,"bg":16}],["  puts sum(fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))                                                                                                     ",{"fg":254,"bg":16}]],"31":[[" 57 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"32":[[" 58 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"33":[["                                                                                                             26,1-2        86%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.040288,{"lines":{"0":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"1":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"2":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"3":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"4":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"5":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"10":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"11":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"12":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"13":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"14":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"15":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"16":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"17":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"18":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"19":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"20":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"21":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"22":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"23":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"24":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"25":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"26":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"27":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"28":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"29":[[" 54 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"30":[[" 55 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"31":[[" 56 ",{"fg":237,"bg":16}],["  puts sum(fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))                                                                                                     ",{"fg":254,"bg":16}]],"32":[[" 57 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"33":[["                                                                                                             25,1-2        82%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.0389,{"lines":{"0":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"1":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"2":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"3":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"4":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"5":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"6":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"11":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"12":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"13":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"14":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"15":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"16":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"17":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"18":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"19":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"20":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"21":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"22":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"23":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"24":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"25":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"26":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"27":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"28":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"29":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"30":[[" 54 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"31":[[" 55 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"32":[[" 56 ",{"fg":237,"bg":16}],["  puts sum(fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))                                                                                                     ",{"fg":254,"bg":16}]],"33":[["                                                                                                             24,1          79%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4}}],[0.039408,{"lines":{"0":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"1":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"2":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"3":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"4":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"5":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"6":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"7":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"12":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"13":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"14":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"15":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"16":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"17":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"18":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"19":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"20":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"21":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"22":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"23":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"24":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"25":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"26":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"27":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"28":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"29":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"30":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"31":[[" 54 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"32":[[" 55 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"33":[["                                                                                                             23,0-1        75%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.040159,{"lines":{"0":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"1":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"2":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"3":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"4":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"5":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"6":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"7":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"8":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"13":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"14":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"15":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"16":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"17":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"18":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"19":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"20":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"21":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"22":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"23":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"24":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"25":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"26":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"27":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"28":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"29":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"30":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"31":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"32":[[" 54 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"33":[["                                                                                                             22,1          72%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.040562,{"lines":{"0":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"1":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"2":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"3":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"4":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"5":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"6":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"7":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"8":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"9":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"14":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"15":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"16":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"17":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"18":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"19":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"20":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"21":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"22":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"23":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"24":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"25":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"26":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"27":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"28":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"29":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"30":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"31":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"32":[[" 53 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"33":[["                                                                                                             21,1-2        68%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5}}],[0.040992,{"lines":{"0":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"1":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"2":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"3":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"4":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"5":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"6":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"7":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"8":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"9":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"10":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"15":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"16":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"17":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"18":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"19":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"20":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"21":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"22":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"23":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"24":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"25":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"26":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"27":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"28":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"29":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"30":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"31":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"32":[[" 52 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"33":[["                                                                                                             20,1          65%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4}}],[0.040308,{"lines":{"0":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"1":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"2":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"3":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"4":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"5":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"6":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"7":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"8":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"9":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"10":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"11":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"16":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"17":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"18":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"19":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"20":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"21":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"22":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"23":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"24":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"25":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"26":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"27":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"28":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"29":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"30":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"31":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"32":[[" 51 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             19,0-1        62%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.040358,{"lines":{"0":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"1":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"2":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"3":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"4":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"5":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"6":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"7":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"8":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"9":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"10":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"11":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"12":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"17":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"18":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"19":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"20":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"21":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"22":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"23":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"24":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"25":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"26":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"27":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"28":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"29":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"30":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"31":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"32":[[" 50 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"33":[["                                                                                                             18,1-2        58%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5}}],[0.039526,{"lines":{"0":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"1":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"2":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"3":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"4":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"5":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"6":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"7":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"8":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"9":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"10":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"11":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"12":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"13":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"18":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"19":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"20":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"21":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"22":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"23":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"24":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"25":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"26":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"27":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"28":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"29":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"30":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"31":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"32":[[" 49 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"33":[["                                                                                                             17,1-2        55%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.040475,{"lines":{"0":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}]],"1":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"2":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"3":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"4":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"5":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"6":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"7":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"8":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"9":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"10":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"11":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"12":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"13":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"14":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"19":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"20":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"21":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"22":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"23":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"24":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"25":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"26":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"27":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"28":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"29":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"30":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"31":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"32":[[" 48 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                                      ",{"fg":254,"bg":16}]],"33":[["                                                                                                             16,1-2        51%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.039609,{"lines":{"0":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"1":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}]],"2":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"3":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"4":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"5":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"6":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"7":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"8":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"9":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"10":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"11":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"12":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"13":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"14":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"15":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"20":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"21":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"22":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"23":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"24":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"25":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"26":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"27":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"28":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"29":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"30":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"31":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"32":[[" 47 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             15,1          48%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4}}],[0.040323,{"lines":{"0":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}]],"1":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"2":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}]],"3":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"4":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"5":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"6":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"7":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"8":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"9":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"10":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"11":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"12":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"13":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"14":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"15":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"16":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"21":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"22":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"23":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"24":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"25":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"26":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"27":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"28":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"29":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"30":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"31":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"32":[[" 46 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"33":[["                                                                                                             14,1-2        44%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5}}],[0.038916,{"lines":{"0":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"1":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}]],"2":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"3":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}]],"4":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"5":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"6":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"7":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"8":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"9":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"10":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"11":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"12":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"13":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"14":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"15":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"16":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"17":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"22":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"23":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"24":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"25":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"26":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"27":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"28":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"29":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"30":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"31":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"32":[[" 45 ",{"fg":237,"bg":16}],["    list << sum                                                                                                                    ",{"fg":254,"bg":16}]],"33":[["                                                                                                             13,0-1        41%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4}}],[0.040911,{"lines":{"0":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                          ",{"fg":254,"bg":16}]],"1":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"2":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}]],"3":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"4":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}]],"5":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"6":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"7":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"8":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"9":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"10":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"11":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"12":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"13":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"14":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"15":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"16":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"17":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"18":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"23":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"24":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"25":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"26":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"27":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"28":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"29":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"30":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"31":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"32":[[" 44 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                                     ",{"fg":254,"bg":16}]],"33":[["                                                                                                             12,1-2        37%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5}}],[0.040415,{"lines":{"0":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"1":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                          ",{"fg":254,"bg":16}]],"2":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"3":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}]],"4":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"5":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}]],"6":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"7":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"8":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"9":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"10":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"11":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"12":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"13":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"14":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"15":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"16":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"17":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"18":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"19":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"24":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"25":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"26":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"27":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"28":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"29":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"30":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"31":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"32":[[" 43 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             11,1          34%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4}}],[0.040153,{"lines":{"0":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"1":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"2":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                          ",{"fg":254,"bg":16}]],"3":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"4":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}]],"5":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"6":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}]],"7":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"8":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"9":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"10":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"11":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"12":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"13":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"14":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"15":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"16":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"17":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"18":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"19":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"20":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"25":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"26":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"27":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"28":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"29":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"30":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"31":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"32":[[" 42 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                        ",{"fg":254,"bg":16}]],"33":[["                                                                                                             10,1          31%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.039773,{"lines":{"0":[["  9 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"1":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"2":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"3":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                          ",{"fg":254,"bg":16}]],"4":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"5":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}]],"6":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"7":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}]],"8":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"9":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"10":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"11":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"12":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"13":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"14":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"15":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"16":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"17":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"18":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"19":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"20":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"21":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"26":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"27":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"28":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"29":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"30":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"31":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"32":[[" 41 ",{"fg":237,"bg":16}],["    b = a                                                                                                                          ",{"fg":254,"bg":16}]],"33":[["                                                                                                             9,1-2         27%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5}}],[0.041643,{"lines":{"0":[["  8 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                        ",{"fg":254,"bg":16}]],"1":[["  9 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"2":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"3":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"4":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                          ",{"fg":254,"bg":16}]],"5":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"6":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}]],"7":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"8":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}]],"9":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"10":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"11":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"12":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"13":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"14":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"15":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"16":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"17":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"18":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"19":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"20":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"21":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"22":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"27":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"28":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"29":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"30":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"31":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"32":[[" 40 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}]],"33":[["                                                                                                             8,1-2         24%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.040135,{"lines":{"0":[["  7 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci",{"fg":110,"bg":16}],["(n)                                                                                                                 ",{"fg":254,"bg":16}]],"1":[["  8 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                        ",{"fg":254,"bg":16}]],"2":[["  9 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"3":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"4":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"5":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                          ",{"fg":254,"bg":16}]],"6":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"7":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}]],"8":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"9":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}]],"10":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"11":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"12":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"13":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"14":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"15":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"16":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"17":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"18":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"19":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"20":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"21":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"22":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"23":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"28":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"29":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"30":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"31":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"32":[[" 39 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             7,1           20%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4}}],[0.040608,{"lines":{"0":[["  6 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"1":[["  7 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci",{"fg":110,"bg":16}],["(n)                                                                                                                 ",{"fg":254,"bg":16}]],"2":[["  8 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                        ",{"fg":254,"bg":16}]],"3":[["  9 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"4":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"5":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"6":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                          ",{"fg":254,"bg":16}]],"7":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"8":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}]],"9":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"10":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}]],"11":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"12":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"13":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"14":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"15":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"16":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"17":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"18":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"19":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"20":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"21":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"22":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"23":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"24":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"29":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"30":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"31":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"32":[[" 38 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                                    ",{"fg":254,"bg":16}]],"33":[["                                                                                                             6,1           17%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.040411,{"lines":{"0":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"1":[["  6 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"2":[["  7 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci",{"fg":110,"bg":16}],["(n)                                                                                                                 ",{"fg":254,"bg":16}]],"3":[["  8 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                        ",{"fg":254,"bg":16}]],"4":[["  9 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"5":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"6":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"7":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                          ",{"fg":254,"bg":16}]],"8":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"9":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}]],"10":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"11":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}]],"12":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"13":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"14":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"15":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"16":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"17":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"18":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"19":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"20":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"21":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"22":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"23":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"24":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"25":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"30":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"31":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"32":[[" 37 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                              ",{"fg":254,"bg":16}]],"33":[["                                                                                                             5,0-1         13%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.039009,{"lines":{"0":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"1":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"2":[["  6 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"3":[["  7 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci",{"fg":110,"bg":16}],["(n)                                                                                                                 ",{"fg":254,"bg":16}]],"4":[["  8 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                        ",{"fg":254,"bg":16}]],"5":[["  9 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"6":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"7":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"8":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                          ",{"fg":254,"bg":16}]],"9":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"10":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}]],"11":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"12":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}]],"13":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"14":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"15":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"16":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"17":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"18":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"19":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"20":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"21":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"22":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"23":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"24":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"25":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"26":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"30":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"31":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"32":[[" 36 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                             ",{"fg":254,"bg":16}]],"33":[["                                                                                                             4,1           10%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.041993,{"lines":{"0":[["  3 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list.reduce(",{"fg":254,"bg":16}],[":+",{"fg":148,"bg":16}],[")                                                                                                           ",{"fg":254,"bg":16}]],"1":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"2":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"3":[["  6 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"4":[["  7 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci",{"fg":110,"bg":16}],["(n)                                                                                                                 ",{"fg":254,"bg":16}]],"5":[["  8 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                        ",{"fg":254,"bg":16}]],"6":[["  9 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"7":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"8":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"9":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                          ",{"fg":254,"bg":16}]],"10":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"11":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}]],"12":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"13":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}]],"14":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"15":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"16":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"17":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"18":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"19":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"20":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"21":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"22":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"23":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"24":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"25":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"26":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"27":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"30":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"31":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"32":[[" 35 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"33":[["                                                                                                             3,1-2          6%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5}}],[0.043015,{"lines":{"0":[["  2 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# This is a functional call that iteratively tabulates a given array",{"fg":245,"bg":16}],["                                                             ",{"fg":254,"bg":16}]],"1":[["  3 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list.reduce(",{"fg":254,"bg":16}],[":+",{"fg":148,"bg":16}],[")                                                                                                           ",{"fg":254,"bg":16}]],"2":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"3":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"4":[["  6 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"5":[["  7 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci",{"fg":110,"bg":16}],["(n)                                                                                                                 ",{"fg":254,"bg":16}]],"6":[["  8 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                        ",{"fg":254,"bg":16}]],"7":[["  9 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"8":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"9":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"10":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                          ",{"fg":254,"bg":16}]],"11":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"12":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}]],"13":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"14":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}]],"15":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"16":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"17":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"18":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"19":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"20":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"21":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"22":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"23":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"24":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"25":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"26":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"27":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"28":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"30":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"31":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"32":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             2,1-2          3%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.038663,{"lines":{"0":[["  1 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["sum",{"fg":110,"bg":16}],["(list)                                                                                                                      ",{"fg":254,"bg":16}]],"1":[["  2 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# This is a functional call that iteratively tabulates a given array",{"fg":245,"bg":16}],["                                                             ",{"fg":254,"bg":16}]],"2":[["  3 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list.reduce(",{"fg":254,"bg":16}],[":+",{"fg":148,"bg":16}],[")                                                                                                           ",{"fg":254,"bg":16}]],"3":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"4":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"5":[["  6 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"6":[["  7 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci",{"fg":110,"bg":16}],["(n)                                                                                                                 ",{"fg":254,"bg":16}]],"7":[["  8 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                        ",{"fg":254,"bg":16}]],"8":[["  9 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"9":[[" 10 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"10":[[" 11 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"11":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                          ",{"fg":254,"bg":16}]],"12":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"13":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}]],"14":[[" 15 ",{"fg":237,"bg":16}],[">>>>>>> iterative_refactor                                                                                                         ",{"fg":254,"bg":16}]],"15":[[" 16 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}]],"16":[[" 17 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"17":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"18":[[" 19 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"19":[[" 20 ",{"fg":237,"bg":16}],["<<<<<<< ",{"fg":254,"bg":16}],["HEAD",{"fg":184,"bg":16}],["                                                                                                                       ",{"fg":254,"bg":16}]],"20":[[" 21 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                           ",{"fg":254,"bg":16}]],"21":[[" 22 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"22":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"23":[[" 24 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                            ",{"fg":254,"bg":16}]],"24":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}]],"25":[[" 26 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                                       ",{"fg":254,"bg":16}]],"26":[[" 27 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                                   ",{"fg":254,"bg":16}]],"27":[[" 28 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                              ",{"fg":254,"bg":16}]],"28":[[" 29 ",{"fg":237,"bg":16}],["=======                                                                                                                            ",{"fg":254,"bg":16}]],"29":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"30":[[" 31 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"31":[[" 32 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"32":[[" 33 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"33":[["                                                                                                             1,1           Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4}}],[0.03907,{}],[0.040143,{}],[0.040013,{}],[0.03991,{}],[48.143782,{"lines":{"33":[[":                                                                                                                             ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":1,"y":33}}],[0.240043,{"lines":{"33":[[":q                                                                                                                            ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":2}}],[2.157173,{"lines":{"33":[["                                                                                                             2,2-3         Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":6,"y":1}}],[2.370493,{"lines":{"33":[[":                                                                                                                             ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":1,"y":33}}],[2.790735,{"lines":{"33":[[":Q                                                                                                                            ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":2}}],[0.586121,{"lines":{"33":[[":                                                                                                                             ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":1}}],[0.103368,{"lines":{"33":[[":q                                                                                                                            ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":2}}],[0.147032,{"cursor":{"x":0}}],[0.004865,{"lines":{"0":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"1":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"2":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"3":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"6":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"7":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"8":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"9":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"10":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"11":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"12":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"13":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"14":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"15":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"16":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"17":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"18":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"19":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"20":[["        end                                                                                                                            ",{}]],"21":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"22":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"23":[[" end                                                                                                                                   ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[[" def main()                                                                                                                            ",{}]],"26":[["        # Our job with fibonacci is to print the sum of the fibonacci sequence up to                                                   ",{}]],"27":[["        # the tenth item.                                                                                                              ",{}]],"28":[["benjica@",{}],["gunter",{"underline":true}],["> git merge iterative_refactor                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"29":[["Auto-merging fib.rb                                                                                                                    ",{}]],"30":[["CONFLICT (content): Merge conflict in fib.rb                                                                                           ",{}]],"31":[["Automatic merge failed; fix conflicts and then commit the result.                                                                      ",{}]],"32":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[1.229344,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> m                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.137376,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> ma                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.123576,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.225886,{"cursor":{"x":20}}],[2.110762,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man g                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.114562,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man gi                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.053958,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.206174,{"cursor":{"x":24}}],[0.891522,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git m                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.451311,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git m=                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.08053399999999999,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git m==                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.128442,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git m=                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.165442,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git m                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.126832,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.124221,{"cursor":{"x":23}}],[0.226142,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.265536,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-m                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.291038,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-me                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.256101,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-meg                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.69634,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-me                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.122566,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-mer                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.18804,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merg                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":28}}],[0.110097,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":29}}],[0.153472,{"lines":{"0":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"1":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"2":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"5":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"6":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"7":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"8":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"9":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"10":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"11":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"12":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"13":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"14":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"15":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"16":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"17":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"18":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"19":[["        end                                                                                                                            ",{}]],"20":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"21":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"22":[[" end                                                                                                                                   ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[[" def main()                                                                                                                            ",{}]],"25":[["        # Our job with fibonacci is to print the sum of the fibonacci sequence up to                                                   ",{}]],"26":[["        # the tenth item.                                                                                                              ",{}]],"27":[["benjica@",{}],["gunter",{"underline":true}],["> git merge iterative_refactor                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"28":[["Auto-merging fib.rb                                                                                                                    ",{}]],"29":[["CONFLICT (content): Merge conflict in fib.rb                                                                                           ",{}]],"30":[["Automatic merge failed; fix conflicts and then commit the result.                                                                      ",{}]],"31":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.052253,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["                                                                                                                                       ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["                                                                                                                                       ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["                                                                                                                                       ",{}]]}}],[0.021491,{"lines":{"16":[["GIT-MERGE(1)                                             Git Manual                                            GIT-MERGE(1)            ",{}]],"18":[["NAME",{"bold":true}],["                                                                                                                                   ",{}]],"19":[["       git-merge - Join two or more development histories together                                                                     ",{}]],"21":[["SYNOPSIS",{"bold":true}],["                                                                                                                               ",{}]],"22":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]                                                                  ",{}]],"23":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"24":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"25":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"26":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"28":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"29":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"30":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"31":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"33":[["       Assume the following history exists and the current branch is \"",{}],["mas",{"bold":true}],["                                                              ",{}]]},"cursor":{"x":73}}],[0.00101,{"lines":{"0":[["GIT-MERGE(1)                                             Git Manual                                            GIT-MERGE(1)            ",{}]],"2":[["NAME",{"bold":true}],["                                                                                                                                   ",{}]],"3":[["       git-merge - Join two or more development histories together                                                                     ",{}]],"5":[["SYNOPSIS",{"bold":true}],["                                                                                                                               ",{}]],"6":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]                                                                  ",{}]],"7":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"8":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"9":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"10":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"12":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"13":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"14":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"15":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["                     A---B---C topic                                                                                                   ",{}]],"20":[["                    /                                                                                                                  ",{}]],"21":[["               D---E---F---G master                                                                                                    ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"24":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"25":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["                     A---B---C topic                                                                                                   ",{}]],"28":[["                    /         \\                                                                                                        ",{}]],"29":[["               D---E---F---G---H master                                                                                                ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"32":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"33":[[" Manual page git-merge(1) line 1 (press h for help or q to quit)                                                                       ",{}]]},"cursor":{"x":64}}],[2.611727,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["NAME",{"bold":true}],["                                                                                                                                   ",{}]],"2":[["       git-merge - Join two or more development histories together                                                                     ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["SYNOPSIS",{"bold":true}],["                                                                                                                               ",{}]],"5":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]                                                                  ",{}]],"6":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"7":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"8":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"9":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"12":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"13":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"14":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["                     A---B---C topic                                                                                                   ",{}]],"19":[["                    /                                                                                                                  ",{}]],"20":[["               D---E---F---G master                                                                                                    ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"23":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"24":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["                     A---B---C topic                                                                                                   ",{}]],"27":[["                    /         \\                                                                                                        ",{}]],"28":[["               D---E---F---G---H master                                                                                                ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"31":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 2 (press h for help or q to quit)                                                                       ",{}]]}}],[0.167536,{"lines":{"0":[["NAME",{"bold":true}],["                                                                                                                                   ",{}]],"1":[["       git-merge - Join two or more development histories together                                                                     ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["SYNOPSIS",{"bold":true}],["                                                                                                                               ",{}]],"4":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]                                                                  ",{}]],"5":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"6":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"7":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"8":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"11":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"12":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"13":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["                     A---B---C topic                                                                                                   ",{}]],"18":[["                    /                                                                                                                  ",{}]],"19":[["               D---E---F---G master                                                                                                    ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"22":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"23":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["                     A---B---C topic                                                                                                   ",{}]],"26":[["                    /         \\                                                                                                        ",{}]],"27":[["               D---E---F---G---H master                                                                                                ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"30":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"33":[[" Manual page git-merge(1) line 5 (press h for help or q to quit)                                                                       ",{}]]}}],[0.180851,{"lines":{"0":[["       git-merge - Join two or more development histories together                                                                     ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["SYNOPSIS",{"bold":true}],["                                                                                                                               ",{}]],"3":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]                                                                  ",{}]],"4":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"5":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"6":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"7":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"10":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"11":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"12":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["                     A---B---C topic                                                                                                   ",{}]],"17":[["                    /                                                                                                                  ",{}]],"18":[["               D---E---F---G master                                                                                                    ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"21":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"22":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["                     A---B---C topic                                                                                                   ",{}]],"25":[["                    /         \\                                                                                                        ",{}]],"26":[["               D---E---F---G---H master                                                                                                ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"29":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"32":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"33":[[" Manual page git-merge(1) line 6 (press h for help or q to quit)                                                                       ",{}]]}}],[0.145492,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["SYNOPSIS",{"bold":true}],["                                                                                                                               ",{}]],"2":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]                                                                  ",{}]],"3":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"4":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"5":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"6":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"9":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"10":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"11":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["                     A---B---C topic                                                                                                   ",{}]],"16":[["                    /                                                                                                                  ",{}]],"17":[["               D---E---F---G master                                                                                                    ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"20":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"21":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["                     A---B---C topic                                                                                                   ",{}]],"24":[["                    /         \\                                                                                                        ",{}]],"25":[["               D---E---F---G---H master                                                                                                ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"28":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"31":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"32":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"33":[[" Manual page git-merge(1) line 7 (press h for help or q to quit)                                                                       ",{}]]}}],[0.150533,{"lines":{"0":[["SYNOPSIS",{"bold":true}],["                                                                                                                               ",{}]],"1":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]                                                                  ",{}]],"2":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"3":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"4":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"5":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"8":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"9":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"10":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["                     A---B---C topic                                                                                                   ",{}]],"15":[["                    /                                                                                                                  ",{}]],"16":[["               D---E---F---G master                                                                                                    ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"19":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"20":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["                     A---B---C topic                                                                                                   ",{}]],"23":[["                    /         \\                                                                                                        ",{}]],"24":[["               D---E---F---G---H master                                                                                                ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"27":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"30":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"31":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"32":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"33":[[" Manual page git-merge(1) line 8 (press h for help or q to quit)                                                                       ",{}]]}}],[0.163373,{"lines":{"0":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]                                                                  ",{}]],"1":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"2":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"3":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"4":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"7":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"8":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"9":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["                     A---B---C topic                                                                                                   ",{}]],"14":[["                    /                                                                                                                  ",{}]],"15":[["               D---E---F---G master                                                                                                    ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"18":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"19":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["                     A---B---C topic                                                                                                   ",{}]],"22":[["                    /         \\                                                                                                        ",{}]],"23":[["               D---E---F---G---H master                                                                                                ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"26":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"29":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"30":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"31":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 9 (press h for help or q to quit)                                                                       ",{}]]}}],[0.389656,{"lines":{"33":[["/                                                                                                                                      ",{}]]},"cursor":{"x":1}}],[0.653344,{"lines":{"33":[["/n                                                                                                                                     ",{}]]},"cursor":{"x":2}}],[0.153396,{"lines":{"33":[["/no                                                                                                                                    ",{}]]},"cursor":{"x":3}}],[0.320635,{"lines":{"33":[["/no-                                                                                                                                   ",{}]]},"cursor":{"x":4}}],[0.322146,{"lines":{"33":[["/no-c                                                                                                                                  ",{}]]},"cursor":{"x":5}}],[0.079697,{"lines":{"33":[["/no-co                                                                                                                                 ",{}]]},"cursor":{"x":6}}],[0.092278,{"lines":{"33":[["/no-com                                                                                                                                ",{}]]},"cursor":{"x":7}}],[0.114729,{"lines":{"33":[["/no-comm                                                                                                                               ",{}]]},"cursor":{"x":8}}],[0.094696,{"lines":{"33":[["/no-commi                                                                                                                              ",{}]]},"cursor":{"x":9}}],[0.221606,{"lines":{"33":[["/no-commit                                                                                                                             ",{}]]},"cursor":{"x":10}}],[0.712188,{"lines":{"33":[["/no-commi                                                                                                                              ",{}]]},"cursor":{"x":9}}],[0.151959,{"lines":{"33":[["/no-comm                                                                                                                               ",{}]]},"cursor":{"x":8}}],[0.09708799999999999,{"lines":{"33":[["/no-com                                                                                                                                ",{}]]},"cursor":{"x":7}}],[0.153718,{"lines":{"33":[["/no-co                                                                                                                                 ",{}]]},"cursor":{"x":6}}],[0.104204,{"lines":{"33":[["/no-c                                                                                                                                  ",{}]]},"cursor":{"x":5}}],[0.217399,{"lines":{"33":[["/no-                                                                                                                                   ",{}]]},"cursor":{"x":4}}],[0.124475,{"lines":{"33":[["/no                                                                                                                                    ",{}]]},"cursor":{"x":3}}],[0.132572,{"lines":{"33":[["/n                                                                                                                                     ",{}]]},"cursor":{"x":2}}],[0.139733,{"lines":{"33":[["/                                                                                                                                      ",{}]]},"cursor":{"x":1}}],[0.225736,{"lines":{"33":[["/-                                                                                                                                     ",{}]]},"cursor":{"x":2}}],[0.154357,{"lines":{"33":[["/--                                                                                                                                    ",{}]]},"cursor":{"x":3}}],[0.134141,{"lines":{"33":[["/--a                                                                                                                                   ",{}]]},"cursor":{"x":4}}],[0.272972,{"lines":{"33":[["/--ab                                                                                                                                  ",{}]]},"cursor":{"x":5}}],[0.052403,{"lines":{"33":[["/--abo                                                                                                                                 ",{}]]},"cursor":{"x":6}}],[0.13324,{"lines":{"33":[["/--abor                                                                                                                                ",{}]]},"cursor":{"x":7}}],[0.174962,{"lines":{"33":[["/--abort                                                                                                                               ",{}]]},"cursor":{"x":8}}],[0.121235,{"lines":{"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":5,"y":23}}],[2.4e-05,{"lines":{"0":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"3":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"4":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"5":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["                     A---B---C topic                                                                                                   ",{}]],"10":[["                    /                                                                                                                  ",{}]],"11":[["               D---E---F---G master                                                                                                    ",{}]],"13":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"14":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"15":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"17":[["                     A---B---C topic                                                                                                   ",{}]],"18":[["                    /         \\                                                                                                        ",{}]],"19":[["               D---E---F---G---H master                                                                                                ",{}]],"21":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"22":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"25":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"26":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"27":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"30":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"33":[[" Manual page git-merge(1) line 13 (press h for help or q to quit)                                                                      ",{}]]},"cursor":{"x":65,"y":33}}],[1.600643,{"lines":{"0":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"1":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"2":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"3":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"6":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"9":[["       --commit, --no-commit                                                                                                           ",{}]],"10":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"13":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"16":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"17":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"18":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"19":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"21":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"22":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"23":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       --ff                                                                                                                            ",{}]],"26":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"27":[["           is the default behavior.                                                                                                    ",{}]],"29":[["       --no-ff                                                                                                                         ",{}]],"30":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"31":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 40 (press h for help or q to quit)                                                                      ",{}]]}}],[2.699631,{"lines":{"0":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"3":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"5":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"6":[["       --commit, --no-commit                                                                                                           ",{}]],"7":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"10":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"12":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"13":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"14":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"15":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"16":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"19":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"20":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       --ff                                                                                                                            ",{}]],"23":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"24":[["           is the default behavior.                                                                                                    ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       --no-ff                                                                                                                         ",{}]],"27":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"28":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       --ff-only                                                                                                                       ",{}]],"31":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"32":[["           be resolved as a fast-forward.                                                                                              ",{}]],"33":[[" Manual page git-merge(1) line 43 (press h for help or q to quit)                                                                      ",{}]]}}],[1.909279,{"lines":{"0":[["       --abort                                                                                                                         ",{}]],"1":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"4":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"5":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"9":[["       <commit>...                                                                                                                     ",{}]],"10":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"11":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"14":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"17":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"18":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"19":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"22":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"23":[["       the state that would result from the merge already.)                                                                            ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"28":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"29":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"30":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"31":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"32":[["       commit.                                                                                                                         ",{}]],"33":[[" Manual page git-merge(1) line 134 (press h for help or q to quit)                                                                     ",{}]]},"cursor":{"x":66}}],[24.488372,{"lines":{"0":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"1":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"2":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"5":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"6":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"7":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"8":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"9":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"10":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"11":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"12":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"13":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"14":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"15":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"16":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"17":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"18":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"19":[["        end                                                                                                                            ",{}]],"20":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"21":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"22":[[" end                                                                                                                                   ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[[" def main()                                                                                                                            ",{}]],"25":[["        # Our job with fibonacci is to print the sum of the fibonacci sequence up to                                                   ",{}]],"26":[["        # the tenth item.                                                                                                              ",{}]],"27":[["benjica@",{}],["gunter",{"underline":true}],["> git merge iterative_refactor                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"28":[["Auto-merging fib.rb                                                                                                                    ",{}]],"29":[["CONFLICT (content): Merge conflict in fib.rb                                                                                           ",{}]],"30":[["Automatic merge failed; fix conflicts and then commit the result.                                                                      ",{}]],"31":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.00133,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[37.902475,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.057543,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.09525599999999999,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.087726,{"cursor":{"x":20}}],[1.215183,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git m                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.091293,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git me                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.08359800000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git mer                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.130759,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.51363,{"cursor":{"x":26}}],[0.166112,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.136524,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge --                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":28}}],[0.372858,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge --a                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":29}}],[0.175541,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge --ab                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":30}}],[0.133947,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge --abo                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":31}}],[0.174692,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge --abort",{}],[" ",{"bold":true}],["                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":34}}],[0.486401,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge --abort                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":33}}],[0.003985,{"lines":{"0":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"1":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"4":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"5":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"6":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"7":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"8":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"9":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"10":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"11":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"12":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"13":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"14":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"15":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"16":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"17":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"18":[["        end                                                                                                                            ",{}]],"19":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"20":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"21":[[" end                                                                                                                                   ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[[" def main()                                                                                                                            ",{}]],"24":[["        # Our job with fibonacci is to print the sum of the fibonacci sequence up to                                                   ",{}]],"25":[["        # the tenth item.                                                                                                              ",{}]],"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge iterative_refactor                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"27":[["Auto-merging fib.rb                                                                                                                    ",{}]],"28":[["CONFLICT (content): Merge conflict in fib.rb                                                                                           ",{}]],"29":[["Automatic merge failed; fix conflicts and then commit the result.                                                                      ",{}]],"30":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> git merge --abort                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[4.734668,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> v                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.128963,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.115956,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.08638899999999999,{"cursor":{"x":20}}],[0.05894,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim f                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.089249,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim fi                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.078782,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb",{}],[" ",{"bold":true}],["                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.825935,{"lines":{"0":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"3":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"4":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"5":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"6":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"7":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"8":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"9":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"10":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"11":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"12":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"13":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"14":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"15":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"16":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"17":[["        end                                                                                                                            ",{}]],"18":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"19":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"20":[[" end                                                                                                                                   ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[[" def main()                                                                                                                            ",{}]],"23":[["        # Our job with fibonacci is to print the sum of the fibonacci sequence up to                                                   ",{}]],"24":[["        # the tenth item.                                                                                                              ",{}]],"25":[["benjica@",{}],["gunter",{"underline":true}],["> git merge iterative_refactor                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"26":[["Auto-merging fib.rb                                                                                                                    ",{}]],"27":[["CONFLICT (content): Merge conflict in fib.rb                                                                                           ",{}]],"28":[["Automatic merge failed; fix conflicts and then commit the result.                                                                      ",{}]],"29":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> git merge --abort                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.142301,{"lines":{"0":[["                                                                                                                                       ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["                                                                                                                                       ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["                                                                                                                                       ",{}]]}}],[0.000379,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                                            ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":18,"visible":false}}],[0.043019,{"lines":{"0":[["  1 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["sum",{"fg":110,"bg":16}],["(list)                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  2 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# This is a functional call that iteratively tabulates a given array",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  3 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list.reduce(",{"fg":254,"bg":16}],[":+",{"fg":148,"bg":16}],[")                                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  6 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci",{"fg":110,"bg":16}],["(n)                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"6":[["  7 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"7":[["  8 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"8":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 10 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{}]]},"cursor":{"x":16,"y":9}}],[0.006923,{"lines":{"9":[[" 10 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 11 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 12 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 13 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 14 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 15 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 16 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 17 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 19 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 20 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 21 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 22 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 23 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 24 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                             ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 26 ",{"fg":237,"bg":16}],["  puts sum(fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 27 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 28 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 29 ",{"fg":237,"bg":16}],["main()                                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"29":[["~                                                                                                                              ",{"fg":237,"bg":16}],["        ",{}]],"30":[["~                                                                                                                              ",{"fg":237,"bg":16}],["        ",{}]],"31":[["~                                                                                                                              ",{"fg":237,"bg":16}],["        ",{}]],"32":[["~                                                                                                                              ",{"fg":237,"bg":16}],["        ",{}]],"33":[["\"fib.rb\" 29L, 537C                                                                                           1,1           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":0,"visible":true}}],[1.383047,{}],[0.17259,{}],[0.130345,{}],[0.21953,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           2,1-2         All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":1}}],[0.168252,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           3,1-2         All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":2}}],[0.133635,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           4,1           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":3}}],[0.11184,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           5,0-1         All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":4}}],[0.118503,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           6,1           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":5}}],[0.128171,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           7,1-2         All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":6}}],[0.128365,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           8,1-2         All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":7}}],[0.136935,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           9,1-2         All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":8}}],[0.443758,{"lines":{"33":[[":                                                                                                                             ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":1,"y":33}}],[0.468025,{"lines":{"33":[[":w                                                                                                                            ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":2}}],[0.185644,{"lines":{"33":[["\"fib.rb\" 29L, 537C written                                                                                                    ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":26,"visible":false}}],[0.040392,{"cursor":{"x":126}}],[6e-06,{"lines":{"33":[["\"fib.rb\" 29L, 537C written                                                                                   9,1-2         All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":8,"visible":true}}],[1.152425,{"lines":{"33":[[":                                                                                                                             ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":1,"y":33,"visible":false}}],[5e-06,{"cursor":{"visible":true}}],[0.169873,{"lines":{"33":[[":q                                                                                                                            ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":2}}],[8.899999999999999e-05,{}],[0.228727,{"cursor":{"x":0}}],[0.006013000000000001,{"lines":{"0":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"3":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"4":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"5":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"6":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"7":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"8":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"9":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"10":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"11":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"12":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"13":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"14":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"15":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"16":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"17":[["        end                                                                                                                            ",{}]],"18":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"19":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"20":[[" end                                                                                                                                   ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[[" def main()                                                                                                                            ",{}]],"23":[["        # Our job with fibonacci is to print the sum of the fibonacci sequence up to                                                   ",{}]],"24":[["        # the tenth item.                                                                                                              ",{}]],"25":[["benjica@",{}],["gunter",{"underline":true}],["> git merge iterative_refactor                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"26":[["Auto-merging fib.rb                                                                                                                    ",{}]],"27":[["CONFLICT (content): Merge conflict in fib.rb                                                                                           ",{}]],"28":[["Automatic merge failed; fix conflicts and then commit the result.                                                                      ",{}]],"29":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> git merge --abort                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[1.430094,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.07872800000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.055089,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.072754,{"cursor":{"x":20}}],[0.150506,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git s                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.125546,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git st                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.125723,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git sta                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.052215,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git stat                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.119287,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git statu                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.103852,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.091853,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"2":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"3":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"4":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"5":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"6":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"7":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"8":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"9":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"10":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"11":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"12":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"13":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"14":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"15":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"16":[["        end                                                                                                                            ",{}]],"17":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"18":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"19":[[" end                                                                                                                                   ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[[" def main()                                                                                                                            ",{}]],"22":[["        # Our job with fibonacci is to print the sum of the fibonacci sequence up to                                                   ",{}]],"23":[["        # the tenth item.                                                                                                              ",{}]],"24":[["benjica@",{}],["gunter",{"underline":true}],["> git merge iterative_refactor                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"25":[["Auto-merging fib.rb                                                                                                                    ",{}]],"26":[["CONFLICT (content): Merge conflict in fib.rb                                                                                           ",{}]],"27":[["Automatic merge failed; fix conflicts and then commit the result.                                                                      ",{}]],"28":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"29":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> git merge --abort                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.006441000000000001,{"lines":{"0":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"1":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"2":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"3":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"4":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"5":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"6":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"7":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"8":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"9":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"10":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"11":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"12":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"13":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"14":[["        end                                                                                                                            ",{}]],"15":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"16":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"17":[[" end                                                                                                                                   ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[[" def main()                                                                                                                            ",{}]],"20":[["        # Our job with fibonacci is to print the sum of the fibonacci sequence up to                                                   ",{}]],"21":[["        # the tenth item.                                                                                                              ",{}]],"22":[["benjica@",{}],["gunter",{"underline":true}],["> git merge iterative_refactor                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"23":[["Auto-merging fib.rb                                                                                                                    ",{}]],"24":[["CONFLICT (content): Merge conflict in fib.rb                                                                                           ",{}]],"25":[["Automatic merge failed; fix conflicts and then commit the result.                                                                      ",{}]],"26":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"27":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"28":[["benjica@",{}],["gunter",{"underline":true}],["> git merge --abort                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"29":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["On branch master                                                                                                                       ",{}]],"32":[["nothing to commit, working directory clean                                                                                             ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[266.001687,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> m                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.09936200000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> ma                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.144002,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.126083,{"cursor":{"x":20}}],[2.32324,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man g                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.13486,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man gi                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.586855,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.193474,{"cursor":{"x":24}}],[0.314555,{"cursor":{"x":23}}],[0.215702,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.227139,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-m                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.101236,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-me                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.063099,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-mer                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.187096,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merg                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":28}}],[0.078112,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":29}}],[0.126827,{"lines":{"0":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"1":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"2":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"3":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"4":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"5":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"6":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"7":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"8":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"9":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"10":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"11":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"12":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"13":[["        end                                                                                                                            ",{}]],"14":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"15":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"16":[[" end                                                                                                                                   ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[[" def main()                                                                                                                            ",{}]],"19":[["        # Our job with fibonacci is to print the sum of the fibonacci sequence up to                                                   ",{}]],"20":[["        # the tenth item.                                                                                                              ",{}]],"21":[["benjica@",{}],["gunter",{"underline":true}],["> git merge iterative_refactor                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"22":[["Auto-merging fib.rb                                                                                                                    ",{}]],"23":[["CONFLICT (content): Merge conflict in fib.rb                                                                                           ",{}]],"24":[["Automatic merge failed; fix conflicts and then commit the result.                                                                      ",{}]],"25":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"26":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"27":[["benjica@",{}],["gunter",{"underline":true}],["> git merge --abort                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"28":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"29":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"30":[["On branch master                                                                                                                       ",{}]],"31":[["nothing to commit, working directory clean                                                                                             ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.02609,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["                                                                                                                                       ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["                                                                                                                                       ",{}]]}}],[0.018913,{"lines":{"16":[["GIT-MERGE(1)                                             Git Manual                                            GIT-MERGE(1)            ",{}]],"18":[["NAME",{"bold":true}],["                                                                                                                                   ",{}]],"19":[["       git-merge - Join two or more development histories together                                                                     ",{}]],"21":[["SYNOPSIS",{"bold":true}],["                                                                                                                               ",{}]],"22":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]                                                                  ",{}]],"23":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"24":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"25":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"26":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"28":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"29":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"30":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"31":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"33":[["       Assume the following history exists and the current branch is \"",{}],["mas",{"bold":true}],["                                                              ",{}]]},"cursor":{"x":73}}],[0.00137,{"lines":{"0":[["GIT-MERGE(1)                                             Git Manual                                            GIT-MERGE(1)            ",{}]],"2":[["NAME",{"bold":true}],["                                                                                                                                   ",{}]],"3":[["       git-merge - Join two or more development histories together                                                                     ",{}]],"5":[["SYNOPSIS",{"bold":true}],["                                                                                                                               ",{}]],"6":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]                                                                  ",{}]],"7":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"8":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"9":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"10":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"12":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"13":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"14":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"15":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["                     A---B---C topic                                                                                                   ",{}]],"20":[["                    /                                                                                                                  ",{}]],"21":[["               D---E---F---G master                                                                                                    ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"24":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"25":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["                     A---B---C topic                                                                                                   ",{}]],"28":[["                    /         \\                                                                                                        ",{}]],"29":[["               D---E---F---G---H master                                                                                                ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"32":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"33":[[" Manual page git-merge(1) line 1 (press h for help or q to quit)                                                                       ",{}]]},"cursor":{"x":64}}],[0.8142200000000001,{"lines":{"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[5e-06,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["NAME",{"bold":true}],["                                                                                                                                   ",{}]],"2":[["       git-merge - Join two or more development histories together                                                                     ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["SYNOPSIS",{"bold":true}],["                                                                                                                               ",{}]],"5":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]                                                                  ",{}]],"6":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"7":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"8":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"9":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"12":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"13":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"14":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["                     A---B---C topic                                                                                                   ",{}]],"19":[["                    /                                                                                                                  ",{}]],"20":[["               D---E---F---G master                                                                                                    ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"23":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"24":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["                     A---B---C topic                                                                                                   ",{}]],"27":[["                    /         \\                                                                                                        ",{}]],"28":[["               D---E---F---G---H master                                                                                                ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"31":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 2 (press h for help or q to quit)                                                                       ",{}]]},"cursor":{"x":64}}],[0.134889,{"lines":{"33":[[" ESC                                                                                                                                   ",{}]]},"cursor":{"x":4}}],[8.3e-05,{"lines":{"0":[["NAME",{"bold":true}],["                                                                                                                                   ",{}]],"1":[["       git-merge - Join two or more development histories together                                                                     ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["SYNOPSIS",{"bold":true}],["                                                                                                                               ",{}]],"4":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]                                                                  ",{}]],"5":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"6":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"7":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"8":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"11":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"12":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"13":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["                     A---B---C topic                                                                                                   ",{}]],"18":[["                    /                                                                                                                  ",{}]],"19":[["               D---E---F---G master                                                                                                    ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"22":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"23":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["                     A---B---C topic                                                                                                   ",{}]],"26":[["                    /         \\                                                                                                        ",{}]],"27":[["               D---E---F---G---H master                                                                                                ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"30":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"33":[[" Manual page git-merge(1) line 5 (press h for help or q to quit)                                                                       ",{}]]},"cursor":{"x":64}}],[0.125636,{"lines":{"33":[[" ESC                                                                                                                                   ",{}]]},"cursor":{"x":4}}],[3.7e-05,{"lines":{"0":[["       git-merge - Join two or more development histories together                                                                     ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["SYNOPSIS",{"bold":true}],["                                                                                                                               ",{}]],"3":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]                                                                  ",{}]],"4":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"5":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"6":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"7":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"10":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"11":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"12":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["                     A---B---C topic                                                                                                   ",{}]],"17":[["                    /                                                                                                                  ",{}]],"18":[["               D---E---F---G master                                                                                                    ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"21":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"22":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["                     A---B---C topic                                                                                                   ",{}]],"25":[["                    /         \\                                                                                                        ",{}]],"26":[["               D---E---F---G---H master                                                                                                ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"29":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"32":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"33":[[" Manual page git-merge(1) line 6 (press h for help or q to quit)                                                                       ",{}]]},"cursor":{"x":64}}],[0.09368600000000001,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["SYNOPSIS",{"bold":true}],["                                                                                                                               ",{}]],"2":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]                                                                  ",{}]],"3":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"4":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"5":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"6":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"9":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"10":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"11":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["                     A---B---C topic                                                                                                   ",{}]],"16":[["                    /                                                                                                                  ",{}]],"17":[["               D---E---F---G master                                                                                                    ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"20":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"21":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["                     A---B---C topic                                                                                                   ",{}]],"24":[["                    /         \\                                                                                                        ",{}]],"25":[["               D---E---F---G---H master                                                                                                ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"28":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"31":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"32":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"33":[[" Manual page git-merge(1) line 7 (press h for help or q to quit)                                                                       ",{}]]}}],[0.092904,{"lines":{"0":[["SYNOPSIS",{"bold":true}],["                                                                                                                               ",{}]],"1":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]                                                                  ",{}]],"2":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"3":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"4":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"5":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"8":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"9":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"10":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["                     A---B---C topic                                                                                                   ",{}]],"15":[["                    /                                                                                                                  ",{}]],"16":[["               D---E---F---G master                                                                                                    ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"19":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"20":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["                     A---B---C topic                                                                                                   ",{}]],"23":[["                    /         \\                                                                                                        ",{}]],"24":[["               D---E---F---G---H master                                                                                                ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"27":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"30":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"31":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"32":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"33":[[" Manual page git-merge(1) line 8 (press h for help or q to quit)                                                                       ",{}]]}}],[0.11014,{"lines":{"0":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]                                                                  ",{}]],"1":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"2":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"3":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"4":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"7":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"8":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"9":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["                     A---B---C topic                                                                                                   ",{}]],"14":[["                    /                                                                                                                  ",{}]],"15":[["               D---E---F---G master                                                                                                    ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"18":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"19":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["                     A---B---C topic                                                                                                   ",{}]],"22":[["                    /         \\                                                                                                        ",{}]],"23":[["               D---E---F---G---H master                                                                                                ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"26":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"29":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"30":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"31":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 9 (press h for help or q to quit)                                                                       ",{}]]}}],[0.660675,{"lines":{"0":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"1":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"2":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"3":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"6":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"7":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"8":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["                     A---B---C topic                                                                                                   ",{}]],"13":[["                    /                                                                                                                  ",{}]],"14":[["               D---E---F---G master                                                                                                    ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"17":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"18":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["                     A---B---C topic                                                                                                   ",{}]],"21":[["                    /         \\                                                                                                        ",{}]],"22":[["               D---E---F---G---H master                                                                                                ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"25":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"28":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"29":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"30":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"33":[[" Manual page git-merge(1) line 10 (press h for help or q to quit)                                                                      ",{}]]},"cursor":{"x":65}}],[0.03985,{"lines":{"0":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"1":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"2":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"5":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"6":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"7":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["                     A---B---C topic                                                                                                   ",{}]],"12":[["                    /                                                                                                                  ",{}]],"13":[["               D---E---F---G master                                                                                                    ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"16":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"17":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["                     A---B---C topic                                                                                                   ",{}]],"20":[["                    /         \\                                                                                                        ",{}]],"21":[["               D---E---F---G---H master                                                                                                ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"24":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"27":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"28":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"29":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"32":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"33":[[" Manual page git-merge(1) line 11 (press h for help or q to quit)                                                                      ",{}]]}}],[0.039741,{"lines":{"0":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"1":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"4":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"5":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"6":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["                     A---B---C topic                                                                                                   ",{}]],"11":[["                    /                                                                                                                  ",{}]],"12":[["               D---E---F---G master                                                                                                    ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"15":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"16":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["                     A---B---C topic                                                                                                   ",{}]],"19":[["                    /         \\                                                                                                        ",{}]],"20":[["               D---E---F---G---H master                                                                                                ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"23":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"26":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"27":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"28":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"31":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 12 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040116,{"lines":{"0":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"3":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"4":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"5":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["                     A---B---C topic                                                                                                   ",{}]],"10":[["                    /                                                                                                                  ",{}]],"11":[["               D---E---F---G master                                                                                                    ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"14":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"15":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["                     A---B---C topic                                                                                                   ",{}]],"18":[["                    /         \\                                                                                                        ",{}]],"19":[["               D---E---F---G---H master                                                                                                ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"22":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"25":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"26":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"27":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"30":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"33":[[" Manual page git-merge(1) line 13 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040083,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"2":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"3":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"4":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["                     A---B---C topic                                                                                                   ",{}]],"9":[["                    /                                                                                                                  ",{}]],"10":[["               D---E---F---G master                                                                                                    ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"13":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"14":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["                     A---B---C topic                                                                                                   ",{}]],"17":[["                    /         \\                                                                                                        ",{}]],"18":[["               D---E---F---G---H master                                                                                                ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"21":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"24":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"25":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"26":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"29":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"32":[["       --commit, --no-commit                                                                                                           ",{}]],"33":[[" Manual page git-merge(1) line 14 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040467,{"lines":{"0":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"1":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"2":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"3":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["                     A---B---C topic                                                                                                   ",{}]],"8":[["                    /                                                                                                                  ",{}]],"9":[["               D---E---F---G master                                                                                                    ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"12":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"13":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["                     A---B---C topic                                                                                                   ",{}]],"16":[["                    /         \\                                                                                                        ",{}]],"17":[["               D---E---F---G---H master                                                                                                ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"20":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"23":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"24":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"25":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"28":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"31":[["       --commit, --no-commit                                                                                                           ",{}]],"32":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"33":[[" Manual page git-merge(1) line 16 (press h for help or q to quit)                                                                      ",{}]]}}],[0.041164,{"lines":{"0":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"1":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"2":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["                     A---B---C topic                                                                                                   ",{}]],"7":[["                    /                                                                                                                  ",{}]],"8":[["               D---E---F---G master                                                                                                    ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"11":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"12":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["                     A---B---C topic                                                                                                   ",{}]],"15":[["                    /         \\                                                                                                        ",{}]],"16":[["               D---E---F---G---H master                                                                                                ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"19":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"22":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"23":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"24":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"27":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"30":[["       --commit, --no-commit                                                                                                           ",{}]],"31":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 17 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040613,{"lines":{"0":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"1":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["                     A---B---C topic                                                                                                   ",{}]],"6":[["                    /                                                                                                                  ",{}]],"7":[["               D---E---F---G master                                                                                                    ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"10":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"11":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["                     A---B---C topic                                                                                                   ",{}]],"14":[["                    /         \\                                                                                                        ",{}]],"15":[["               D---E---F---G---H master                                                                                                ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"18":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"21":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"22":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"23":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"26":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"29":[["       --commit, --no-commit                                                                                                           ",{}]],"30":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"33":[[" Manual page git-merge(1) line 18 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040083,{"lines":{"0":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["                     A---B---C topic                                                                                                   ",{}]],"5":[["                    /                                                                                                                  ",{}]],"6":[["               D---E---F---G master                                                                                                    ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"9":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"10":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["                     A---B---C topic                                                                                                   ",{}]],"13":[["                    /         \\                                                                                                        ",{}]],"14":[["               D---E---F---G---H master                                                                                                ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"17":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"20":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"21":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"22":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"25":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"28":[["       --commit, --no-commit                                                                                                           ",{}]],"29":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"32":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"33":[[" Manual page git-merge(1) line 19 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040331,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["                     A---B---C topic                                                                                                   ",{}]],"4":[["                    /                                                                                                                  ",{}]],"5":[["               D---E---F---G master                                                                                                    ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"8":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"9":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["                     A---B---C topic                                                                                                   ",{}]],"12":[["                    /         \\                                                                                                        ",{}]],"13":[["               D---E---F---G---H master                                                                                                ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"16":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"19":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"20":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"21":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"24":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"27":[["       --commit, --no-commit                                                                                                           ",{}]],"28":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"31":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 20 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040083,{"lines":{"0":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["                     A---B---C topic                                                                                                   ",{}]],"3":[["                    /                                                                                                                  ",{}]],"4":[["               D---E---F---G master                                                                                                    ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"7":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"8":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["                     A---B---C topic                                                                                                   ",{}]],"11":[["                    /         \\                                                                                                        ",{}]],"12":[["               D---E---F---G---H master                                                                                                ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"15":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"18":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"19":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"20":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"23":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"26":[["       --commit, --no-commit                                                                                                           ",{}]],"27":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"30":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"33":[[" Manual page git-merge(1) line 21 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040683,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["                     A---B---C topic                                                                                                   ",{}]],"2":[["                    /                                                                                                                  ",{}]],"3":[["               D---E---F---G master                                                                                                    ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"6":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"7":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["                     A---B---C topic                                                                                                   ",{}]],"10":[["                    /         \\                                                                                                        ",{}]],"11":[["               D---E---F---G---H master                                                                                                ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"14":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"17":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"18":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"19":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"22":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"25":[["       --commit, --no-commit                                                                                                           ",{}]],"26":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"29":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"32":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"33":[[" Manual page git-merge(1) line 22 (press h for help or q to quit)                                                                      ",{}]]}}],[0.041178,{"lines":{"0":[["                     A---B---C topic                                                                                                   ",{}]],"1":[["                    /                                                                                                                  ",{}]],"2":[["               D---E---F---G master                                                                                                    ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"5":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"6":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["                     A---B---C topic                                                                                                   ",{}]],"9":[["                    /         \\                                                                                                        ",{}]],"10":[["               D---E---F---G---H master                                                                                                ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"13":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"16":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"17":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"18":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"21":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"24":[["       --commit, --no-commit                                                                                                           ",{}]],"25":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"28":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"31":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"32":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"33":[[" Manual page git-merge(1) line 23 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040616,{"lines":{"0":[["                    /                                                                                                                  ",{}]],"1":[["               D---E---F---G master                                                                                                    ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"4":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"5":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["                     A---B---C topic                                                                                                   ",{}]],"8":[["                    /         \\                                                                                                        ",{}]],"9":[["               D---E---F---G---H master                                                                                                ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"12":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"15":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"16":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"17":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"20":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"23":[["       --commit, --no-commit                                                                                                           ",{}]],"24":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"27":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"30":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"31":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"32":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"33":[[" Manual page git-merge(1) line 24 (press h for help or q to quit)                                                                      ",{}]]}}],[0.039536,{"lines":{"0":[["               D---E---F---G master                                                                                                    ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"3":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"4":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["                     A---B---C topic                                                                                                   ",{}]],"7":[["                    /         \\                                                                                                        ",{}]],"8":[["               D---E---F---G---H master                                                                                                ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"11":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"14":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"15":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"16":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"19":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"22":[["       --commit, --no-commit                                                                                                           ",{}]],"23":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"26":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"29":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"30":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"31":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"32":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"33":[[" Manual page git-merge(1) line 25 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040213,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"2":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"3":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["                     A---B---C topic                                                                                                   ",{}]],"6":[["                    /         \\                                                                                                        ",{}]],"7":[["               D---E---F---G---H master                                                                                                ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"10":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"13":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"14":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"15":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"18":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"21":[["       --commit, --no-commit                                                                                                           ",{}]],"22":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"25":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"28":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"29":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"30":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"31":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 26 (press h for help or q to quit)                                                                      ",{}]]}}],[0.039926,{"lines":{"0":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"1":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"2":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["                     A---B---C topic                                                                                                   ",{}]],"5":[["                    /         \\                                                                                                        ",{}]],"6":[["               D---E---F---G---H master                                                                                                ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"9":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"12":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"13":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"14":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"17":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"20":[["       --commit, --no-commit                                                                                                           ",{}]],"21":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"24":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"27":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"28":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"29":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"30":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"33":[[" Manual page git-merge(1) line 28 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040385,{"lines":{"0":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"1":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["                     A---B---C topic                                                                                                   ",{}]],"4":[["                    /         \\                                                                                                        ",{}]],"5":[["               D---E---F---G---H master                                                                                                ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"8":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"11":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"12":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"13":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"16":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"19":[["       --commit, --no-commit                                                                                                           ",{}]],"20":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"23":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"26":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"27":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"28":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"29":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"32":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"33":[[" Manual page git-merge(1) line 29 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040239,{"lines":{"0":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["                     A---B---C topic                                                                                                   ",{}]],"3":[["                    /         \\                                                                                                        ",{}]],"4":[["               D---E---F---G---H master                                                                                                ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"7":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"10":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"11":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"12":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"15":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"18":[["       --commit, --no-commit                                                                                                           ",{}]],"19":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"22":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"25":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"26":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"27":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"28":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"31":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"32":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"33":[[" Manual page git-merge(1) line 30 (press h for help or q to quit)                                                                      ",{}]]}}],[0.041036,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["                     A---B---C topic                                                                                                   ",{}]],"2":[["                    /         \\                                                                                                        ",{}]],"3":[["               D---E---F---G---H master                                                                                                ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"6":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"9":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"10":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"11":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"14":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"17":[["       --commit, --no-commit                                                                                                           ",{}]],"18":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"21":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"24":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"25":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"26":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"27":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"30":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"31":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 31 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040837,{"lines":{"0":[["                     A---B---C topic                                                                                                   ",{}]],"1":[["                    /         \\                                                                                                        ",{}]],"2":[["               D---E---F---G---H master                                                                                                ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"5":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"8":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"9":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"10":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"13":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"16":[["       --commit, --no-commit                                                                                                           ",{}]],"17":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"20":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"23":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"24":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"25":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"26":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"29":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"30":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       --ff                                                                                                                            ",{}]],"33":[[" Manual page git-merge(1) line 32 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040192,{"lines":{"0":[["                    /         \\                                                                                                        ",{}]],"1":[["               D---E---F---G---H master                                                                                                ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"4":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"7":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"8":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"9":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"12":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"15":[["       --commit, --no-commit                                                                                                           ",{}]],"16":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"19":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"22":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"23":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"24":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"25":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"28":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"29":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       --ff                                                                                                                            ",{}]],"32":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"33":[[" Manual page git-merge(1) line 33 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040681,{"lines":{"0":[["               D---E---F---G---H master                                                                                                ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"3":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"6":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"7":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"8":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"11":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"14":[["       --commit, --no-commit                                                                                                           ",{}]],"15":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"18":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"21":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"22":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"23":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"24":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"27":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"28":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       --ff                                                                                                                            ",{}]],"31":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"32":[["           is the default behavior.                                                                                                    ",{}]],"33":[[" Manual page git-merge(1) line 34 (press h for help or q to quit)                                                                      ",{}]]}}],[0.039864,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"2":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"5":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"6":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"7":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"10":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"13":[["       --commit, --no-commit                                                                                                           ",{}]],"14":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"17":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"20":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"21":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"22":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"23":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"26":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"27":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       --ff                                                                                                                            ",{}]],"30":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"31":[["           is the default behavior.                                                                                                    ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 35 (press h for help or q to quit)                                                                      ",{}]]}}],[0.039509,{"lines":{"0":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"1":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"4":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"5":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"6":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"9":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"12":[["       --commit, --no-commit                                                                                                           ",{}]],"13":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"16":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"19":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"20":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"21":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"22":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"25":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"26":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       --ff                                                                                                                            ",{}]],"29":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"30":[["           is the default behavior.                                                                                                    ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       --no-ff                                                                                                                         ",{}]],"33":[[" Manual page git-merge(1) line 37 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040766,{"lines":{"0":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"3":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"4":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"5":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"8":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"11":[["       --commit, --no-commit                                                                                                           ",{}]],"12":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"15":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"18":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"19":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"20":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"21":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"24":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"25":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       --ff                                                                                                                            ",{}]],"28":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"29":[["           is the default behavior.                                                                                                    ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       --no-ff                                                                                                                         ",{}]],"32":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"33":[[" Manual page git-merge(1) line 38 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040664,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"2":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"3":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"4":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"7":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"10":[["       --commit, --no-commit                                                                                                           ",{}]],"11":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"14":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"17":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"18":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"19":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"20":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"23":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"24":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       --ff                                                                                                                            ",{}]],"27":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"28":[["           is the default behavior.                                                                                                    ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       --no-ff                                                                                                                         ",{}]],"31":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"32":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"33":[[" Manual page git-merge(1) line 39 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040404,{"lines":{"0":[["       The third syntax (\"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],["\") can only be run after the merge has resulted in conflicts. ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],["             ",{}]],"1":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"2":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"3":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"6":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"9":[["       --commit, --no-commit                                                                                                           ",{}]],"10":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"13":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"16":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"17":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"18":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"19":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"22":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"23":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       --ff                                                                                                                            ",{}]],"26":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"27":[["           is the default behavior.                                                                                                    ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       --no-ff                                                                                                                         ",{}]],"30":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"31":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 40 (press h for help or q to quit)                                                                      ",{}]]}}],[0.04103,{"lines":{"0":[["       will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes             ",{}]],"1":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"2":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"5":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"8":[["       --commit, --no-commit                                                                                                           ",{}]],"9":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"12":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"15":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"16":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"17":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"18":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"21":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"22":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       --ff                                                                                                                            ",{}]],"25":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"26":[["           is the default behavior.                                                                                                    ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       --no-ff                                                                                                                         ",{}]],"29":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"30":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       --ff-only                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 41 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040216,{"lines":{"0":[["       when the merge started (and especially if those changes were further modified after the merge was started), ",{}],["git",{"underline":true}],["                 ",{}]],"1":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"4":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"7":[["       --commit, --no-commit                                                                                                           ",{}]],"8":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"11":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"14":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"15":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"16":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"17":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"20":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"21":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       --ff                                                                                                                            ",{}]],"24":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"25":[["           is the default behavior.                                                                                                    ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       --no-ff                                                                                                                         ",{}]],"28":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"29":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       --ff-only                                                                                                                       ",{}]],"32":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"33":[[" Manual page git-merge(1) line 42 (press h for help or q to quit)                                                                      ",{}]]}}],[0.04044,{"lines":{"0":[["       ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:                          ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"3":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"6":[["       --commit, --no-commit                                                                                                           ",{}]],"7":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"10":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"13":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"14":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"15":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"16":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"19":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"20":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       --ff                                                                                                                            ",{}]],"23":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"24":[["           is the default behavior.                                                                                                    ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       --no-ff                                                                                                                         ",{}]],"27":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"28":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       --ff-only                                                                                                                       ",{}]],"31":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"32":[["           be resolved as a fast-forward.                                                                                              ",{}]],"33":[[" Manual page git-merge(1) line 43 (press h for help or q to quit)                                                                      ",{}]]}}],[0.039484,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"2":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"5":[["       --commit, --no-commit                                                                                                           ",{}]],"6":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"9":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"12":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"13":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"14":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"15":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"18":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"19":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       --ff                                                                                                                            ",{}]],"22":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"23":[["           is the default behavior.                                                                                                    ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       --no-ff                                                                                                                         ",{}]],"26":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"27":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       --ff-only                                                                                                                       ",{}]],"30":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"31":[["           be resolved as a fast-forward.                                                                                              ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 44 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040072,{"lines":{"0":[["       ",{}],["Warning",{"bold":true}],[": Running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" with non-trivial uncommitted changes is discouraged: while possible, it may leave you in             ",{}]],"1":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"4":[["       --commit, --no-commit                                                                                                           ",{}]],"5":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"8":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"11":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"12":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"13":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"14":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"17":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"18":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       --ff                                                                                                                            ",{}]],"21":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"22":[["           is the default behavior.                                                                                                    ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       --no-ff                                                                                                                         ",{}]],"25":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"26":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       --ff-only                                                                                                                       ",{}]],"29":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"30":[["           be resolved as a fast-forward.                                                                                              ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"33":[[" Manual page git-merge(1) line 45 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040544,{"lines":{"0":[["       a state that is hard to back out of in the case of a conflict.                                                                  ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"3":[["       --commit, --no-commit                                                                                                           ",{}]],"4":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"7":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"10":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"11":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"12":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"13":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"16":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"17":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       --ff                                                                                                                            ",{}]],"20":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"21":[["           is the default behavior.                                                                                                    ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       --no-ff                                                                                                                         ",{}]],"24":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"25":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       --ff-only                                                                                                                       ",{}]],"28":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"29":[["           be resolved as a fast-forward.                                                                                              ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"32":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"33":[[" Manual page git-merge(1) line 46 (press h for help or q to quit)                                                                      ",{}]]}}],[0.039193,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"2":[["       --commit, --no-commit                                                                                                           ",{}]],"3":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"6":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"9":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"10":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"11":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"12":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"15":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"16":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       --ff                                                                                                                            ",{}]],"19":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"20":[["           is the default behavior.                                                                                                    ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       --no-ff                                                                                                                         ",{}]],"23":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"24":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       --ff-only                                                                                                                       ",{}]],"27":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"28":[["           be resolved as a fast-forward.                                                                                              ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"31":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"32":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 47 (press h for help or q to quit)                                                                      ",{}]]}}],[0.041038,{"lines":{"0":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"1":[["       --commit, --no-commit                                                                                                           ",{}]],"2":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"5":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"8":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"9":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"10":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"11":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"14":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"15":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       --ff                                                                                                                            ",{}]],"18":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"19":[["           is the default behavior.                                                                                                    ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       --no-ff                                                                                                                         ",{}]],"22":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"23":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       --ff-only                                                                                                                       ",{}]],"26":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"27":[["           be resolved as a fast-forward.                                                                                              ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"30":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"31":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 48 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040043,{"lines":{"0":[["       --commit, --no-commit                                                                                                           ",{}]],"1":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"4":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"7":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"8":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"9":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"10":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"13":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"14":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       --ff                                                                                                                            ",{}]],"17":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"18":[["           is the default behavior.                                                                                                    ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       --no-ff                                                                                                                         ",{}]],"21":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"22":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       --ff-only                                                                                                                       ",{}]],"25":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"26":[["           be resolved as a fast-forward.                                                                                              ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"29":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"30":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"33":[[" Manual page git-merge(1) line 49 (press h for help or q to quit)                                                                      ",{}]]}}],[0.04086,{"lines":{"0":[["           Perform the merge and commit the result. This option can be used to override --no-commit.                                   ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"3":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"6":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"7":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"8":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"9":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"12":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"13":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       --ff                                                                                                                            ",{}]],"16":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"17":[["           is the default behavior.                                                                                                    ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       --no-ff                                                                                                                         ",{}]],"20":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"21":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       --ff-only                                                                                                                       ",{}]],"24":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"25":[["           be resolved as a fast-forward.                                                                                              ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"28":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"29":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 50 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040886,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"2":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"5":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"6":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"7":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"8":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"11":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"12":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       --ff                                                                                                                            ",{}]],"15":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"16":[["           is the default behavior.                                                                                                    ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       --no-ff                                                                                                                         ",{}]],"19":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"20":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       --ff-only                                                                                                                       ",{}]],"23":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"24":[["           be resolved as a fast-forward.                                                                                              ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"27":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"28":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"33":[[" Manual page git-merge(1) line 51 (press h for help or q to quit)                                                                      ",{}]]}}],[0.041143,{"lines":{"0":[["           With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance            ",{}]],"1":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"4":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"5":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"6":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"7":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"10":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"11":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       --ff                                                                                                                            ",{}]],"14":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"15":[["           is the default behavior.                                                                                                    ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       --no-ff                                                                                                                         ",{}]],"18":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"19":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       --ff-only                                                                                                                       ",{}]],"22":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"23":[["           be resolved as a fast-forward.                                                                                              ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"26":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"27":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"32":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"33":[[" Manual page git-merge(1) line 52 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040398,{"lines":{"0":[["           to inspect and further tweak the merge result before committing.                                                            ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"3":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"4":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"5":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"6":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"9":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"10":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       --ff                                                                                                                            ",{}]],"13":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"14":[["           is the default behavior.                                                                                                    ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       --no-ff                                                                                                                         ",{}]],"17":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"18":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       --ff-only                                                                                                                       ",{}]],"21":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"22":[["           be resolved as a fast-forward.                                                                                              ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"25":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"26":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"31":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 53 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040539,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"2":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"3":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"4":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"5":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"8":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"9":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       --ff                                                                                                                            ",{}]],"12":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"13":[["           is the default behavior.                                                                                                    ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       --no-ff                                                                                                                         ",{}]],"16":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"17":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       --ff-only                                                                                                                       ",{}]],"20":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"21":[["           be resolved as a fast-forward.                                                                                              ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"24":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"25":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"30":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"33":[[" Manual page git-merge(1) line 54 (press h for help or q to quit)                                                                      ",{}]]}}],[0.039974,{"lines":{"0":[["       --edit, -e, --no-edit                                                                                                           ",{}]],"1":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"2":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"3":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"4":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"7":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"8":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       --ff                                                                                                                            ",{}]],"11":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"12":[["           is the default behavior.                                                                                                    ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       --no-ff                                                                                                                         ",{}]],"15":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"16":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       --ff-only                                                                                                                       ",{}]],"19":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"20":[["           be resolved as a fast-forward.                                                                                              ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"23":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"24":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"29":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 55 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040475,{"lines":{"0":[["           Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message,            ",{}]],"1":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"2":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"3":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"6":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"7":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       --ff                                                                                                                            ",{}]],"10":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"11":[["           is the default behavior.                                                                                                    ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       --no-ff                                                                                                                         ",{}]],"14":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"15":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       --ff-only                                                                                                                       ",{}]],"18":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"19":[["           be resolved as a fast-forward.                                                                                              ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"22":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"23":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"28":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       --squash, --no-squash                                                                                                           ",{}]],"33":[[" Manual page git-merge(1) line 56 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040151,{"lines":{"0":[["           so that the user can explain and justify the merge. The ",{}],["--no-edit",{"bold":true}],[" option can be used to accept the                          ",{}]],"1":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"2":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"5":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"6":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       --ff                                                                                                                            ",{}]],"9":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"10":[["           is the default behavior.                                                                                                    ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       --no-ff                                                                                                                         ",{}]],"13":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"14":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       --ff-only                                                                                                                       ",{}]],"17":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"18":[["           be resolved as a fast-forward.                                                                                              ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"21":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"22":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"27":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       --squash, --no-squash                                                                                                           ",{}]],"32":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"33":[[" Manual page git-merge(1) line 57 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040035,{"lines":{"0":[["           auto-generated message (this is generally discouraged). The ",{}],["--edit",{"bold":true}],[" (or ",{}],["-e",{"bold":true}],[") option is still useful if you are                ",{}]],"1":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"4":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"5":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       --ff                                                                                                                            ",{}]],"8":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"9":[["           is the default behavior.                                                                                                    ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       --no-ff                                                                                                                         ",{}]],"12":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"13":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       --ff-only                                                                                                                       ",{}]],"16":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"17":[["           be resolved as a fast-forward.                                                                                              ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"20":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"21":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"26":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       --squash, --no-squash                                                                                                           ",{}]],"31":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"32":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"33":[[" Manual page git-merge(1) line 58 (press h for help or q to quit)                                                                      ",{}]]}}],[0.039937,{"lines":{"0":[["           giving a draft message with the ",{}],["-m",{"bold":true}],[" option from the command line and want to edit it in the editor.                          ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"3":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"4":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       --ff                                                                                                                            ",{}]],"7":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"8":[["           is the default behavior.                                                                                                    ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       --no-ff                                                                                                                         ",{}]],"11":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"12":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       --ff-only                                                                                                                       ",{}]],"15":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"16":[["           be resolved as a fast-forward.                                                                                              ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"19":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"20":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"25":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       --squash, --no-squash                                                                                                           ",{}]],"30":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"31":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"32":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"33":[[" Manual page git-merge(1) line 59 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040632,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"2":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"3":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       --ff                                                                                                                            ",{}]],"6":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"7":[["           is the default behavior.                                                                                                    ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       --no-ff                                                                                                                         ",{}]],"10":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"11":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       --ff-only                                                                                                                       ",{}]],"14":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"15":[["           be resolved as a fast-forward.                                                                                              ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"18":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"19":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"24":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       --squash, --no-squash                                                                                                           ",{}]],"29":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"30":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"31":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"32":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"33":[[" Manual page git-merge(1) line 60 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040914,{"lines":{"0":[["           Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message.                ",{}]],"1":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"2":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       --ff                                                                                                                            ",{}]],"5":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"6":[["           is the default behavior.                                                                                                    ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       --no-ff                                                                                                                         ",{}]],"9":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"10":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       --ff-only                                                                                                                       ",{}]],"13":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"14":[["           be resolved as a fast-forward.                                                                                              ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"17":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"18":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"23":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       --squash, --no-squash                                                                                                           ",{}]],"28":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"29":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"30":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"31":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 61 (press h for help or q to quit)                                                                      ",{}]]}}],[0.041276,{"lines":{"0":[["           They will see an editor opened when they run ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[". To make it easier to adjust such scripts to the updated             ",{}]],"1":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       --ff                                                                                                                            ",{}]],"4":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"5":[["           is the default behavior.                                                                                                    ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       --no-ff                                                                                                                         ",{}]],"8":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"9":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       --ff-only                                                                                                                       ",{}]],"12":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"13":[["           be resolved as a fast-forward.                                                                                              ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"16":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"17":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"22":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       --squash, --no-squash                                                                                                           ",{}]],"27":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"28":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"29":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"30":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"33":[[" Manual page git-merge(1) line 62 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040279,{"lines":{"0":[["           behaviour, the environment variable ",{}],["GIT_MERGE_AUTOEDIT",{"bold":true}],[" can be set to ",{}],["no",{"bold":true}],[" at the beginning of them.                           ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       --ff                                                                                                                            ",{}]],"3":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"4":[["           is the default behavior.                                                                                                    ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       --no-ff                                                                                                                         ",{}]],"7":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"8":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       --ff-only                                                                                                                       ",{}]],"11":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"12":[["           be resolved as a fast-forward.                                                                                              ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"15":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"16":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"21":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       --squash, --no-squash                                                                                                           ",{}]],"26":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"27":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"28":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"29":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 63 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040032,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       --ff                                                                                                                            ",{}]],"2":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"3":[["           is the default behavior.                                                                                                    ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       --no-ff                                                                                                                         ",{}]],"6":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"7":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       --ff-only                                                                                                                       ",{}]],"10":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"11":[["           be resolved as a fast-forward.                                                                                              ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"14":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"15":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"20":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       --squash, --no-squash                                                                                                           ",{}]],"25":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"26":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"27":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"28":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"33":[[" Manual page git-merge(1) line 64 (press h for help or q to quit)                                                                      ",{}]]}}],[0.039923,{"lines":{"0":[["       --ff                                                                                                                            ",{}]],"1":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"2":[["           is the default behavior.                                                                                                    ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       --no-ff                                                                                                                         ",{}]],"5":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"6":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       --ff-only                                                                                                                       ",{}]],"9":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"10":[["           be resolved as a fast-forward.                                                                                              ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"13":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"14":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"19":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       --squash, --no-squash                                                                                                           ",{}]],"24":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"25":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"26":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"27":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"32":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"33":[[" Manual page git-merge(1) line 65 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040266,{"lines":{"0":[["           When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This            ",{}]],"1":[["           is the default behavior.                                                                                                    ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       --no-ff                                                                                                                         ",{}]],"4":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"5":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       --ff-only                                                                                                                       ",{}]],"8":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"9":[["           be resolved as a fast-forward.                                                                                              ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"12":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"13":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"18":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       --squash, --no-squash                                                                                                           ",{}]],"23":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"24":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"25":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"26":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"31":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"32":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"33":[[" Manual page git-merge(1) line 66 (press h for help or q to quit)                                                                      ",{}]]}}],[0.039872,{"lines":{"0":[["           is the default behavior.                                                                                                    ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       --no-ff                                                                                                                         ",{}]],"3":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"4":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       --ff-only                                                                                                                       ",{}]],"7":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"8":[["           be resolved as a fast-forward.                                                                                              ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"11":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"12":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"17":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       --squash, --no-squash                                                                                                           ",{}]],"22":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"23":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"24":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"25":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"30":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"31":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"32":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"33":[[" Manual page git-merge(1) line 67 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040282,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       --no-ff                                                                                                                         ",{}]],"2":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"3":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       --ff-only                                                                                                                       ",{}]],"6":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"7":[["           be resolved as a fast-forward.                                                                                              ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"10":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"11":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"16":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       --squash, --no-squash                                                                                                           ",{}]],"21":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"22":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"23":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"24":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"29":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"30":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"31":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 68 (press h for help or q to quit)                                                                      ",{}]]}}],[0.039376,{"lines":{"0":[["       --no-ff                                                                                                                         ",{}]],"1":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"2":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       --ff-only                                                                                                                       ",{}]],"5":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"6":[["           be resolved as a fast-forward.                                                                                              ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"9":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"10":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"15":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       --squash, --no-squash                                                                                                           ",{}]],"20":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"21":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"22":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"23":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"28":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"29":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"30":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"33":[[" Manual page git-merge(1) line 69 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040552,{"lines":{"0":[["           Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging            ",{}]],"1":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       --ff-only                                                                                                                       ",{}]],"4":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"5":[["           be resolved as a fast-forward.                                                                                              ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"8":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"9":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"14":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       --squash, --no-squash                                                                                                           ",{}]],"19":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"20":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"21":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"22":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"27":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"28":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"29":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"32":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"33":[[" Manual page git-merge(1) line 70 (press h for help or q to quit)                                                                      ",{}]]}}],[0.039486,{"lines":{"0":[["           an annotated (and possibly signed) tag.                                                                                     ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       --ff-only                                                                                                                       ",{}]],"3":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"4":[["           be resolved as a fast-forward.                                                                                              ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"7":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"8":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"13":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       --squash, --no-squash                                                                                                           ",{}]],"18":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"19":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"20":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"21":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"26":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"27":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"28":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"31":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 71 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040509,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       --ff-only                                                                                                                       ",{}]],"2":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"3":[["           be resolved as a fast-forward.                                                                                              ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"6":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"7":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"12":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       --squash, --no-squash                                                                                                           ",{}]],"17":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"18":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"19":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"20":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"25":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"26":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"27":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"30":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"33":[[" Manual page git-merge(1) line 72 (press h for help or q to quit)                                                                      ",{}]]}}],[0.039947,{"lines":{"0":[["       --ff-only                                                                                                                       ",{}]],"1":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"2":[["           be resolved as a fast-forward.                                                                                              ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"5":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"6":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"11":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       --squash, --no-squash                                                                                                           ",{}]],"16":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"17":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"18":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"19":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"24":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"25":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"26":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"29":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"32":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"33":[[" Manual page git-merge(1) line 73 (press h for help or q to quit)                                                                      ",{}]]}}],[0.04012,{"lines":{"0":[["           Refuse to merge and exit with a non-zero status unless the current ",{}],["HEAD",{"bold":true}],[" is already up-to-date or the merge can              ",{}]],"1":[["           be resolved as a fast-forward.                                                                                              ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"4":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"5":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"10":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       --squash, --no-squash                                                                                                           ",{}]],"15":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"16":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"17":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"18":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"23":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"24":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"25":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"28":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"31":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"32":[["           not.                                                                                                                        ",{}]],"33":[[" Manual page git-merge(1) line 74 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040266,{"lines":{"0":[["           be resolved as a fast-forward.                                                                                              ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"3":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"4":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"9":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       --squash, --no-squash                                                                                                           ",{}]],"14":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"15":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"16":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"17":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"22":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"23":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"24":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"27":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"30":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"31":[["           not.                                                                                                                        ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 75 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040528,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"2":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"3":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"8":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       --squash, --no-squash                                                                                                           ",{}]],"13":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"14":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"15":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"16":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"21":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"22":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"23":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"26":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"29":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"30":[["           not.                                                                                                                        ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       --summary, --no-summary                                                                                                         ",{}]],"33":[[" Manual page git-merge(1) line 76 (press h for help or q to quit)                                                                      ",{}]]}}],[0.039851,{"lines":{"0":[["       --log[=<n>], --no-log                                                                                                           ",{}]],"1":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"2":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"7":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       --squash, --no-squash                                                                                                           ",{}]],"12":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"13":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"14":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"15":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"20":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"21":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"22":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"25":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"28":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"29":[["           not.                                                                                                                        ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       --summary, --no-summary                                                                                                         ",{}]],"32":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"33":[[" Manual page git-merge(1) line 77 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040079,{"lines":{"0":[["           In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits            ",{}]],"1":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"6":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       --squash, --no-squash                                                                                                           ",{}]],"11":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"12":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"13":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"14":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"19":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"20":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"21":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"24":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"27":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"28":[["           not.                                                                                                                        ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       --summary, --no-summary                                                                                                         ",{}]],"31":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 78 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040592,{"lines":{"0":[["           that are being merged. See also ",{}],["git-fmt-merge-msg",{"bold":true}],["(1).                                                                       ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"5":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       --squash, --no-squash                                                                                                           ",{}]],"10":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"11":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"12":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"13":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"18":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"19":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"20":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"23":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"26":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"27":[["           not.                                                                                                                        ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       --summary, --no-summary                                                                                                         ",{}]],"30":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       -q, --quiet                                                                                                                     ",{}]],"33":[[" Manual page git-merge(1) line 79 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040677,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"4":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       --squash, --no-squash                                                                                                           ",{}]],"9":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"10":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"11":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"12":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"17":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"18":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"19":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"22":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"25":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"26":[["           not.                                                                                                                        ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       --summary, --no-summary                                                                                                         ",{}]],"29":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       -q, --quiet                                                                                                                     ",{}]],"32":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"33":[[" Manual page git-merge(1) line 80 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040062,{"lines":{"0":[["           With --no-log do not list one-line descriptions from the actual commits being merged.                                       ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"3":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       --squash, --no-squash                                                                                                           ",{}]],"8":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"9":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"10":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"11":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"16":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"17":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"18":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"21":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"24":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"25":[["           not.                                                                                                                        ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       --summary, --no-summary                                                                                                         ",{}]],"28":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       -q, --quiet                                                                                                                     ",{}]],"31":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 81 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040499,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"2":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       --squash, --no-squash                                                                                                           ",{}]],"7":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"8":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"9":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"10":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"15":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"16":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"17":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"20":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"23":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"24":[["           not.                                                                                                                        ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       --summary, --no-summary                                                                                                         ",{}]],"27":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       -q, --quiet                                                                                                                     ",{}]],"30":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       -v, --verbose                                                                                                                   ",{}]],"33":[[" Manual page git-merge(1) line 82 (press h for help or q to quit)                                                                      ",{}]]}}],[0.04046,{"lines":{"0":[["       --stat, -n, --no-stat                                                                                                           ",{}]],"1":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       --squash, --no-squash                                                                                                           ",{}]],"6":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"7":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"8":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"9":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"14":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"15":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"16":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"19":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"22":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"23":[["           not.                                                                                                                        ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       --summary, --no-summary                                                                                                         ",{}]],"26":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       -q, --quiet                                                                                                                     ",{}]],"29":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       -v, --verbose                                                                                                                   ",{}]],"32":[["           Be verbose.                                                                                                                 ",{}]],"33":[[" Manual page git-merge(1) line 83 (press h for help or q to quit)                                                                      ",{}]]}}],[0.04058,{"lines":{"0":[["           Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.            ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       --squash, --no-squash                                                                                                           ",{}]],"5":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"6":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"7":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"8":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"13":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"14":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"15":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"18":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"21":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"22":[["           not.                                                                                                                        ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       --summary, --no-summary                                                                                                         ",{}]],"25":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       -q, --quiet                                                                                                                     ",{}]],"28":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       -v, --verbose                                                                                                                   ",{}]],"31":[["           Be verbose.                                                                                                                 ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 84 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040436,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       --squash, --no-squash                                                                                                           ",{}]],"4":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"5":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"6":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"7":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"12":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"13":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"14":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"17":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"20":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"21":[["           not.                                                                                                                        ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       --summary, --no-summary                                                                                                         ",{}]],"24":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       -q, --quiet                                                                                                                     ",{}]],"27":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       -v, --verbose                                                                                                                   ",{}]],"30":[["           Be verbose.                                                                                                                 ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       --progress, --no-progress                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 85 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040628,{"lines":{"0":[["           With -n or --no-stat do not show a diffstat at the end of the merge.                                                        ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       --squash, --no-squash                                                                                                           ",{}]],"3":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"4":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"5":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"6":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"11":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"12":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"13":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"16":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"19":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"20":[["           not.                                                                                                                        ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       --summary, --no-summary                                                                                                         ",{}]],"23":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       -q, --quiet                                                                                                                     ",{}]],"26":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       -v, --verbose                                                                                                                   ",{}]],"29":[["           Be verbose.                                                                                                                 ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       --progress, --no-progress                                                                                                       ",{}]],"32":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"33":[[" Manual page git-merge(1) line 86 (press h for help or q to quit)                                                                      ",{}]]}}],[0.04007,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       --squash, --no-squash                                                                                                           ",{}]],"2":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"3":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"4":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"5":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"10":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"11":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"12":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"15":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"18":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"19":[["           not.                                                                                                                        ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       --summary, --no-summary                                                                                                         ",{}]],"22":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       -q, --quiet                                                                                                                     ",{}]],"25":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       -v, --verbose                                                                                                                   ",{}]],"28":[["           Be verbose.                                                                                                                 ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       --progress, --no-progress                                                                                                       ",{}]],"31":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"32":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"33":[[" Manual page git-merge(1) line 87 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040777,{"lines":{"0":[["       --squash, --no-squash                                                                                                           ",{}]],"1":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"2":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"3":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"4":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"9":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"10":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"11":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"14":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"17":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"18":[["           not.                                                                                                                        ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       --summary, --no-summary                                                                                                         ",{}]],"21":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       -q, --quiet                                                                                                                     ",{}]],"24":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       -v, --verbose                                                                                                                   ",{}]],"27":[["           Be verbose.                                                                                                                 ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       --progress, --no-progress                                                                                                       ",{}]],"30":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"31":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 88 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040364,{"lines":{"0":[["           Produce the working tree and index state as if a real merge happened (except for the merge information), but do             ",{}]],"1":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"2":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"3":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"8":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"9":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"10":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"13":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"16":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"17":[["           not.                                                                                                                        ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       --summary, --no-summary                                                                                                         ",{}]],"20":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       -q, --quiet                                                                                                                     ",{}]],"23":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       -v, --verbose                                                                                                                   ",{}]],"26":[["           Be verbose.                                                                                                                 ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       --progress, --no-progress                                                                                                       ",{}]],"29":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"30":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"33":[[" Manual page git-merge(1) line 89 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040474,{"lines":{"0":[["           not actually make a commit, move the ",{}],["HEAD",{"bold":true}],[", or record ",{}],["$GIT_DIR/MERGE_HEAD",{"bold":true}],[" (to cause the next ",{}],["git",{"bold":true}],[" ",{}],["commit",{"bold":true}],[" command              ",{}]],"1":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"2":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"7":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"8":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"9":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"12":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"15":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"16":[["           not.                                                                                                                        ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       --summary, --no-summary                                                                                                         ",{}]],"19":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       -q, --quiet                                                                                                                     ",{}]],"22":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       -v, --verbose                                                                                                                   ",{}]],"25":[["           Be verbose.                                                                                                                 ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       --progress, --no-progress                                                                                                       ",{}]],"28":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"29":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"32":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"33":[[" Manual page git-merge(1) line 90 (press h for help or q to quit)                                                                      ",{}]]}}],[0.04004,{"lines":{"0":[["           to create a merge commit). This allows you to create a single commit on top of the current branch whose effect              ",{}]],"1":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"6":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"7":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"8":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"11":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"14":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"15":[["           not.                                                                                                                        ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       --summary, --no-summary                                                                                                         ",{}]],"18":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       -q, --quiet                                                                                                                     ",{}]],"21":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       -v, --verbose                                                                                                                   ",{}]],"24":[["           Be verbose.                                                                                                                 ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       --progress, --no-progress                                                                                                       ",{}]],"27":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"28":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"31":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 91 (press h for help or q to quit)                                                                      ",{}]]}}],[0.0401,{"lines":{"0":[["           is the same as merging another branch (or more in case of an octopus).                                                      ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"5":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"6":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"7":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"10":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"13":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"14":[["           not.                                                                                                                        ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       --summary, --no-summary                                                                                                         ",{}]],"17":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       -q, --quiet                                                                                                                     ",{}]],"20":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       -v, --verbose                                                                                                                   ",{}]],"23":[["           Be verbose.                                                                                                                 ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       --progress, --no-progress                                                                                                       ",{}]],"26":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"27":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"30":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       -m <msg>                                                                                                                        ",{}]],"33":[[" Manual page git-merge(1) line 92 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040094,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"4":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"5":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"6":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"9":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"12":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"13":[["           not.                                                                                                                        ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       --summary, --no-summary                                                                                                         ",{}]],"16":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       -q, --quiet                                                                                                                     ",{}]],"19":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       -v, --verbose                                                                                                                   ",{}]],"22":[["           Be verbose.                                                                                                                 ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       --progress, --no-progress                                                                                                       ",{}]],"25":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"26":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"29":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       -m <msg>                                                                                                                        ",{}]],"32":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"33":[[" Manual page git-merge(1) line 93 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040357,{"lines":{"0":[["           With --no-squash perform the merge and commit the result. This option can be used to override --squash.                     ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"3":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"4":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"5":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"8":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"11":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"12":[["           not.                                                                                                                        ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       --summary, --no-summary                                                                                                         ",{}]],"15":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       -q, --quiet                                                                                                                     ",{}]],"18":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       -v, --verbose                                                                                                                   ",{}]],"21":[["           Be verbose.                                                                                                                 ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       --progress, --no-progress                                                                                                       ",{}]],"24":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"25":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"28":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       -m <msg>                                                                                                                        ",{}]],"31":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 94 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040136,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"2":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"3":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"4":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"7":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"10":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"11":[["           not.                                                                                                                        ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       --summary, --no-summary                                                                                                         ",{}]],"14":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       -q, --quiet                                                                                                                     ",{}]],"17":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       -v, --verbose                                                                                                                   ",{}]],"20":[["           Be verbose.                                                                                                                 ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       --progress, --no-progress                                                                                                       ",{}]],"23":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"24":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"27":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       -m <msg>                                                                                                                        ",{}]],"30":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"33":[[" Manual page git-merge(1) line 95 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040332,{"lines":{"0":[["       -s <strategy>, --strategy=<strategy>                                                                                            ",{}]],"1":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"2":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"3":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"6":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"9":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"10":[["           not.                                                                                                                        ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       --summary, --no-summary                                                                                                         ",{}]],"13":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       -q, --quiet                                                                                                                     ",{}]],"16":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       -v, --verbose                                                                                                                   ",{}]],"19":[["           Be verbose.                                                                                                                 ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       --progress, --no-progress                                                                                                       ",{}]],"22":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"23":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"26":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       -m <msg>                                                                                                                        ",{}]],"29":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 96 (press h for help or q to quit)                                                                      ",{}]]}}],[0.039947,{"lines":{"0":[["           Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried.             ",{}]],"1":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"2":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"5":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"8":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"9":[["           not.                                                                                                                        ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       --summary, --no-summary                                                                                                         ",{}]],"12":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       -q, --quiet                                                                                                                     ",{}]],"15":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       -v, --verbose                                                                                                                   ",{}]],"18":[["           Be verbose.                                                                                                                 ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       --progress, --no-progress                                                                                                       ",{}]],"21":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"22":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"25":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       -m <msg>                                                                                                                        ",{}]],"28":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"33":[[" Manual page git-merge(1) line 97 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040221,{"lines":{"0":[["           If there is no ",{}],["-s",{"bold":true}],[" option, a built-in list of strategies is used instead (",{}],["git",{"underline":true}],[" ",{}],["merge-recursive",{"underline":true}],[" when merging a                 ",{}]],"1":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"4":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"7":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"8":[["           not.                                                                                                                        ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       --summary, --no-summary                                                                                                         ",{}]],"11":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       -q, --quiet                                                                                                                     ",{}]],"14":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       -v, --verbose                                                                                                                   ",{}]],"17":[["           Be verbose.                                                                                                                 ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       --progress, --no-progress                                                                                                       ",{}]],"20":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"21":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"24":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       -m <msg>                                                                                                                        ",{}]],"27":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 98 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040767,{"lines":{"0":[["           single head, ",{}],["git",{"underline":true}],[" ",{}],["merge-octopus",{"underline":true}],[" otherwise).                                                                                  ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"3":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"6":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"7":[["           not.                                                                                                                        ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       --summary, --no-summary                                                                                                         ",{}]],"10":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       -q, --quiet                                                                                                                     ",{}]],"13":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       -v, --verbose                                                                                                                   ",{}]],"16":[["           Be verbose.                                                                                                                 ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       --progress, --no-progress                                                                                                       ",{}]],"19":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"20":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"23":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       -m <msg>                                                                                                                        ",{}]],"26":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"33":[[" Manual page git-merge(1) line 99 (press h for help or q to quit)                                                                      ",{}]]}}],[0.040449,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"2":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"5":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"6":[["           not.                                                                                                                        ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       --summary, --no-summary                                                                                                         ",{}]],"9":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       -q, --quiet                                                                                                                     ",{}]],"12":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       -v, --verbose                                                                                                                   ",{}]],"15":[["           Be verbose.                                                                                                                 ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       --progress, --no-progress                                                                                                       ",{}]],"18":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"19":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"22":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       -m <msg>                                                                                                                        ",{}]],"25":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"32":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"33":[[" Manual page git-merge(1) line 100 (press h for help or q to quit)                                                                     ",{}]]},"cursor":{"x":66}}],[0.039919,{"lines":{"0":[["       -X <option>, --strategy-option=<option>                                                                                         ",{}]],"1":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"4":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"5":[["           not.                                                                                                                        ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       --summary, --no-summary                                                                                                         ",{}]],"8":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       -q, --quiet                                                                                                                     ",{}]],"11":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       -v, --verbose                                                                                                                   ",{}]],"14":[["           Be verbose.                                                                                                                 ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       --progress, --no-progress                                                                                                       ",{}]],"17":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"18":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"21":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       -m <msg>                                                                                                                        ",{}]],"24":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"31":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 101 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039912,{"lines":{"0":[["           Pass merge strategy specific option through to the merge strategy.                                                          ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"3":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"4":[["           not.                                                                                                                        ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       --summary, --no-summary                                                                                                         ",{}]],"7":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       -q, --quiet                                                                                                                     ",{}]],"10":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       -v, --verbose                                                                                                                   ",{}]],"13":[["           Be verbose.                                                                                                                 ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       --progress, --no-progress                                                                                                       ",{}]],"16":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"17":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"20":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       -m <msg>                                                                                                                        ",{}]],"23":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"30":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       --abort                                                                                                                         ",{}]],"33":[[" Manual page git-merge(1) line 102 (press h for help or q to quit)                                                                     ",{}]]}}],[0.03964,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"2":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"3":[["           not.                                                                                                                        ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       --summary, --no-summary                                                                                                         ",{}]],"6":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       -q, --quiet                                                                                                                     ",{}]],"9":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       -v, --verbose                                                                                                                   ",{}]],"12":[["           Be verbose.                                                                                                                 ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       --progress, --no-progress                                                                                                       ",{}]],"15":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"16":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"19":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       -m <msg>                                                                                                                        ",{}]],"22":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"29":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       --abort                                                                                                                         ",{}]],"32":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"33":[[" Manual page git-merge(1) line 103 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040642,{"lines":{"0":[["       --verify-signatures, --no-verify-signatures                                                                                     ",{}]],"1":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"2":[["           not.                                                                                                                        ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       --summary, --no-summary                                                                                                         ",{}]],"5":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       -q, --quiet                                                                                                                     ",{}]],"8":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       -v, --verbose                                                                                                                   ",{}]],"11":[["           Be verbose.                                                                                                                 ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       --progress, --no-progress                                                                                                       ",{}]],"14":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"15":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"18":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       -m <msg>                                                                                                                        ",{}]],"21":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"28":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       --abort                                                                                                                         ",{}]],"31":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 104 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040039,{"lines":{"0":[["           Verify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do               ",{}]],"1":[["           not.                                                                                                                        ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       --summary, --no-summary                                                                                                         ",{}]],"4":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       -q, --quiet                                                                                                                     ",{}]],"7":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       -v, --verbose                                                                                                                   ",{}]],"10":[["           Be verbose.                                                                                                                 ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       --progress, --no-progress                                                                                                       ",{}]],"13":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"14":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"17":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       -m <msg>                                                                                                                        ",{}]],"20":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"27":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       --abort                                                                                                                         ",{}]],"30":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"33":[[" Manual page git-merge(1) line 105 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039626,{"lines":{"0":[["           not.                                                                                                                        ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       --summary, --no-summary                                                                                                         ",{}]],"3":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       -q, --quiet                                                                                                                     ",{}]],"6":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       -v, --verbose                                                                                                                   ",{}]],"9":[["           Be verbose.                                                                                                                 ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       --progress, --no-progress                                                                                                       ",{}]],"12":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"13":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"16":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       -m <msg>                                                                                                                        ",{}]],"19":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"26":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       --abort                                                                                                                         ",{}]],"29":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"32":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"33":[[" Manual page git-merge(1) line 106 (press h for help or q to quit)                                                                     ",{}]]}}],[0.04022,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       --summary, --no-summary                                                                                                         ",{}]],"2":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       -q, --quiet                                                                                                                     ",{}]],"5":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       -v, --verbose                                                                                                                   ",{}]],"8":[["           Be verbose.                                                                                                                 ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       --progress, --no-progress                                                                                                       ",{}]],"11":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"12":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"15":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       -m <msg>                                                                                                                        ",{}]],"18":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"25":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       --abort                                                                                                                         ",{}]],"28":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"31":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"32":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"33":[[" Manual page git-merge(1) line 107 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040277,{"lines":{"0":[["       --summary, --no-summary                                                                                                         ",{}]],"1":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       -q, --quiet                                                                                                                     ",{}]],"4":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       -v, --verbose                                                                                                                   ",{}]],"7":[["           Be verbose.                                                                                                                 ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       --progress, --no-progress                                                                                                       ",{}]],"10":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"11":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"14":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       -m <msg>                                                                                                                        ",{}]],"17":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"24":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       --abort                                                                                                                         ",{}]],"27":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"30":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"31":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 108 (press h for help or q to quit)                                                                     ",{}]]}}],[0.041399,{"lines":{"0":[["           Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.                                   ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       -q, --quiet                                                                                                                     ",{}]],"3":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       -v, --verbose                                                                                                                   ",{}]],"6":[["           Be verbose.                                                                                                                 ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       --progress, --no-progress                                                                                                       ",{}]],"9":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"10":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"13":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       -m <msg>                                                                                                                        ",{}]],"16":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"23":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       --abort                                                                                                                         ",{}]],"26":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"29":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"30":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"33":[[" Manual page git-merge(1) line 109 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039943,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       -q, --quiet                                                                                                                     ",{}]],"2":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       -v, --verbose                                                                                                                   ",{}]],"5":[["           Be verbose.                                                                                                                 ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       --progress, --no-progress                                                                                                       ",{}]],"8":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"9":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"12":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       -m <msg>                                                                                                                        ",{}]],"15":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"22":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       --abort                                                                                                                         ",{}]],"25":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"28":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"29":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 110 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040293,{"lines":{"0":[["       -q, --quiet                                                                                                                     ",{}]],"1":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       -v, --verbose                                                                                                                   ",{}]],"4":[["           Be verbose.                                                                                                                 ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       --progress, --no-progress                                                                                                       ",{}]],"7":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"8":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"11":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       -m <msg>                                                                                                                        ",{}]],"14":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"21":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       --abort                                                                                                                         ",{}]],"24":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"27":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"28":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       <commit>...                                                                                                                     ",{}]],"33":[[" Manual page git-merge(1) line 111 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040323,{"lines":{"0":[["           Operate quietly. Implies --no-progress.                                                                                     ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       -v, --verbose                                                                                                                   ",{}]],"3":[["           Be verbose.                                                                                                                 ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       --progress, --no-progress                                                                                                       ",{}]],"6":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"7":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"10":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       -m <msg>                                                                                                                        ",{}]],"13":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"20":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       --abort                                                                                                                         ",{}]],"23":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"26":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"27":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       <commit>...                                                                                                                     ",{}]],"32":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"33":[[" Manual page git-merge(1) line 112 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040098,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       -v, --verbose                                                                                                                   ",{}]],"2":[["           Be verbose.                                                                                                                 ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       --progress, --no-progress                                                                                                       ",{}]],"5":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"6":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"9":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       -m <msg>                                                                                                                        ",{}]],"12":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"19":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       --abort                                                                                                                         ",{}]],"22":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"25":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"26":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       <commit>...                                                                                                                     ",{}]],"31":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"32":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"33":[[" Manual page git-merge(1) line 113 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040266,{"lines":{"0":[["       -v, --verbose                                                                                                                   ",{}]],"1":[["           Be verbose.                                                                                                                 ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       --progress, --no-progress                                                                                                       ",{}]],"4":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"5":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"8":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       -m <msg>                                                                                                                        ",{}]],"11":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"18":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       --abort                                                                                                                         ",{}]],"21":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"24":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"25":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       <commit>...                                                                                                                     ",{}]],"30":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"31":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 114 (press h for help or q to quit)                                                                     ",{}]]}}],[0.04124,{"lines":{"0":[["           Be verbose.                                                                                                                 ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       --progress, --no-progress                                                                                                       ",{}]],"3":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"4":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"7":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       -m <msg>                                                                                                                        ",{}]],"10":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"17":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       --abort                                                                                                                         ",{}]],"20":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"23":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"24":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       <commit>...                                                                                                                     ",{}]],"29":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"30":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"33":[[" Manual page git-merge(1) line 115 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040717,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       --progress, --no-progress                                                                                                       ",{}]],"2":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"3":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"6":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       -m <msg>                                                                                                                        ",{}]],"9":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"16":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       --abort                                                                                                                         ",{}]],"19":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"22":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"23":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       <commit>...                                                                                                                     ",{}]],"28":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"29":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"32":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"33":[[" Manual page git-merge(1) line 116 (press h for help or q to quit)                                                                     ",{}]]}}],[0.04052,{"lines":{"0":[["       --progress, --no-progress                                                                                                       ",{}]],"1":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"2":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"5":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       -m <msg>                                                                                                                        ",{}]],"8":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"15":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       --abort                                                                                                                         ",{}]],"18":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"21":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"22":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       <commit>...                                                                                                                     ",{}]],"27":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"28":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"31":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 117 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039589,{"lines":{"0":[["           Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a             ",{}]],"1":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"4":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       -m <msg>                                                                                                                        ",{}]],"7":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"14":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       --abort                                                                                                                         ",{}]],"17":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"20":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"21":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       <commit>...                                                                                                                     ",{}]],"26":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"27":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"30":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 118 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040628,{"lines":{"0":[["           terminal. Note that not all merge strategies may support progress reporting.                                                ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"3":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       -m <msg>                                                                                                                        ",{}]],"6":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"13":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       --abort                                                                                                                         ",{}]],"16":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"19":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"20":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       <commit>...                                                                                                                     ",{}]],"25":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"26":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"29":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"32":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"33":[[" Manual page git-merge(1) line 119 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040956,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"2":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       -m <msg>                                                                                                                        ",{}]],"5":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"12":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       --abort                                                                                                                         ",{}]],"15":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"18":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"19":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       <commit>...                                                                                                                     ",{}]],"24":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"25":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"28":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"31":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"32":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"33":[[" Manual page git-merge(1) line 120 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040897,{"lines":{"0":[["       -S[<keyid>], --gpg-sign[=<keyid>]                                                                                               ",{}]],"1":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       -m <msg>                                                                                                                        ",{}]],"4":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"11":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       --abort                                                                                                                         ",{}]],"14":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"17":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"18":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       <commit>...                                                                                                                     ",{}]],"23":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"24":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"27":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"30":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"31":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"32":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"33":[[" Manual page git-merge(1) line 121 (press h for help or q to quit)                                                                     ",{}]]}}],[0.04102,{"lines":{"0":[["           GPG-sign the resulting merge commit.                                                                                        ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       -m <msg>                                                                                                                        ",{}]],"3":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"10":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       --abort                                                                                                                         ",{}]],"13":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"16":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"17":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       <commit>...                                                                                                                     ",{}]],"22":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"23":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"26":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"29":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"30":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"31":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 122 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040685,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       -m <msg>                                                                                                                        ",{}]],"2":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"9":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       --abort                                                                                                                         ",{}]],"12":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"15":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"16":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       <commit>...                                                                                                                     ",{}]],"21":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"22":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"25":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"28":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"29":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"30":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"33":[[" Manual page git-merge(1) line 123 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039697,{"lines":{"0":[["       -m <msg>                                                                                                                        ",{}]],"1":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"8":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       --abort                                                                                                                         ",{}]],"11":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"14":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"15":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       <commit>...                                                                                                                     ",{}]],"20":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"21":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"24":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"27":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"28":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"29":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"32":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"33":[[" Manual page git-merge(1) line 124 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040039,{"lines":{"0":[["           Set the commit message to be used for the merge commit (in case one is created).                                            ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"7":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       --abort                                                                                                                         ",{}]],"10":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"13":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"14":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       <commit>...                                                                                                                     ",{}]],"19":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"20":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"23":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"26":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"27":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"28":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"31":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"32":[["       the state that would result from the merge already.)                                                                            ",{}]],"33":[[" Manual page git-merge(1) line 125 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040376,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"6":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       --abort                                                                                                                         ",{}]],"9":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"12":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"13":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       <commit>...                                                                                                                     ",{}]],"18":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"19":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"22":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"25":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"26":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"27":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"30":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"31":[["       the state that would result from the merge already.)                                                                            ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 126 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040072,{"lines":{"0":[["           If ",{}],["--log",{"bold":true}],[" is specified, a shortlog of the commits being merged will be appended to the specified message.                    ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"5":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       --abort                                                                                                                         ",{}]],"8":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"11":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"12":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       <commit>...                                                                                                                     ",{}]],"17":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"18":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"21":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"24":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"25":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"26":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"29":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"30":[["       the state that would result from the merge already.)                                                                            ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"33":[[" Manual page git-merge(1) line 127 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040333,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"4":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       --abort                                                                                                                         ",{}]],"7":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"10":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"11":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       <commit>...                                                                                                                     ",{}]],"16":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"17":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"20":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"23":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"24":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"25":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"28":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"29":[["       the state that would result from the merge already.)                                                                            ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 128 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040605,{"lines":{"0":[["           The ",{}],["git",{"underline":true}],[" ",{}],["fmt-merge-msg",{"underline":true}],[" command can be used to give a good default for automated ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" invocations.                       ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"3":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       --abort                                                                                                                         ",{}]],"6":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"9":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"10":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       <commit>...                                                                                                                     ",{}]],"15":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"16":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"19":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"22":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"23":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"24":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"27":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"28":[["       the state that would result from the merge already.)                                                                            ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"33":[[" Manual page git-merge(1) line 129 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039616,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"2":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       --abort                                                                                                                         ",{}]],"5":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"8":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"9":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       <commit>...                                                                                                                     ",{}]],"14":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"15":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"18":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"21":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"22":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"23":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"26":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"27":[["       the state that would result from the merge already.)                                                                            ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"32":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"33":[[" Manual page git-merge(1) line 130 (press h for help or q to quit)                                                                     ",{}]]}}],[0.03988,{"lines":{"0":[["       --[no-]rerere-autoupdate                                                                                                        ",{}]],"1":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       --abort                                                                                                                         ",{}]],"4":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"7":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"8":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       <commit>...                                                                                                                     ",{}]],"13":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"14":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"17":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"20":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"21":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"22":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"25":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"26":[["       the state that would result from the merge already.)                                                                            ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"31":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"32":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"33":[[" Manual page git-merge(1) line 131 (press h for help or q to quit)                                                                     ",{}]]}}],[0.04061,{"lines":{"0":[["           Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.                     ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       --abort                                                                                                                         ",{}]],"3":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"6":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"7":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       <commit>...                                                                                                                     ",{}]],"12":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"13":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"16":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"19":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"20":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"21":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"24":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"25":[["       the state that would result from the merge already.)                                                                            ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"30":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"31":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"32":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"33":[[" Manual page git-merge(1) line 132 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039842,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       --abort                                                                                                                         ",{}]],"2":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"5":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"6":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       <commit>...                                                                                                                     ",{}]],"11":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"12":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"15":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"18":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"19":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"20":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"23":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"24":[["       the state that would result from the merge already.)                                                                            ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"29":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"30":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"31":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"32":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"33":[[" Manual page git-merge(1) line 133 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039335,{"lines":{"0":[["       --abort                                                                                                                         ",{}]],"1":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"4":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"5":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       <commit>...                                                                                                                     ",{}]],"10":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"11":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"14":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"17":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"18":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"19":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"22":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"23":[["       the state that would result from the merge already.)                                                                            ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"28":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"29":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"30":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"31":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"32":[["       commit.                                                                                                                         ",{}]],"33":[[" Manual page git-merge(1) line 134 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040335,{"lines":{"0":[["           Abort the current conflict resolution process, and try to reconstruct the pre-merge state.                                  ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"3":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"4":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       <commit>...                                                                                                                     ",{}]],"9":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"10":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"13":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"16":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"17":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"18":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"21":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"22":[["       the state that would result from the merge already.)                                                                            ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"27":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"28":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"29":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"30":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"31":[["       commit.                                                                                                                         ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 135 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040201,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"2":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"3":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       <commit>...                                                                                                                     ",{}]],"8":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"9":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"12":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"15":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"16":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"17":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"20":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"21":[["       the state that would result from the merge already.)                                                                            ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"26":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"27":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"28":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"29":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"30":[["       commit.                                                                                                                         ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"33":[[" Manual page git-merge(1) line 136 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039831,{"lines":{"0":[["           If there were uncommitted worktree changes present when the merge started, ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" will in some cases             ",{}]],"1":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"2":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       <commit>...                                                                                                                     ",{}]],"7":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"8":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"11":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"14":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"15":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"16":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"19":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"20":[["       the state that would result from the merge already.)                                                                            ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"25":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"26":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"27":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"28":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"29":[["       commit.                                                                                                                         ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 137 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040016,{"lines":{"0":[["           be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes                  ",{}]],"1":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       <commit>...                                                                                                                     ",{}]],"6":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"7":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"10":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"13":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"14":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"15":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"18":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"19":[["       the state that would result from the merge already.)                                                                            ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"24":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"25":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"26":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"27":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"28":[["       commit.                                                                                                                         ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"33":[[" Manual page git-merge(1) line 138 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040328,{"lines":{"0":[["           before running ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[".                                                                                                   ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       <commit>...                                                                                                                     ",{}]],"5":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"6":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"9":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"12":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"13":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"14":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"17":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"18":[["       the state that would result from the merge already.)                                                                            ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"23":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"24":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"25":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"26":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"27":[["       commit.                                                                                                                         ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"32":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"33":[[" Manual page git-merge(1) line 139 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039932,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       <commit>...                                                                                                                     ",{}]],"4":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"5":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"8":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"11":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"12":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"13":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"16":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"17":[["       the state that would result from the merge already.)                                                                            ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"22":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"23":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"24":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"25":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"26":[["       commit.                                                                                                                         ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"31":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"32":[["       has both of them as its parents.                                                                                                ",{}]],"33":[[" Manual page git-merge(1) line 140 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040305,{"lines":{"0":[["           ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" ",{}],["--abort",{"underline":true}],[" is equivalent to ",{}],["git",{"underline":true}],[" ",{}],["reset",{"underline":true}],[" ",{}],["--merge",{"underline":true}],[" when ",{}],["MERGE_HEAD",{"bold":true}],[" is present.                                            ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       <commit>...                                                                                                                     ",{}]],"3":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"4":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"7":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"10":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"11":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"12":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"15":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"16":[["       the state that would result from the merge already.)                                                                            ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"21":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"22":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"23":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"24":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"25":[["       commit.                                                                                                                         ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"30":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"31":[["       has both of them as its parents.                                                                                                ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 141 (press h for help or q to quit)                                                                     ",{}]]}}],[0.03933,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       <commit>...                                                                                                                     ",{}]],"2":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"3":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"6":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"9":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"10":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"11":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"14":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"15":[["       the state that would result from the merge already.)                                                                            ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"20":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"21":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"22":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"23":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"24":[["       commit.                                                                                                                         ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"29":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"30":[["       has both of them as its parents.                                                                                                ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"33":[[" Manual page git-merge(1) line 142 (press h for help or q to quit)                                                                     ",{}]]}}],[0.192204,{"lines":{"0":[["       <commit>...                                                                                                                     ",{}]],"1":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"2":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"5":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"8":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"9":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"10":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"13":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"14":[["       the state that would result from the merge already.)                                                                            ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"19":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"20":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"21":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"22":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"23":[["       commit.                                                                                                                         ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"28":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"29":[["       has both of them as its parents.                                                                                                ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"32":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"33":[[" Manual page git-merge(1) line 143 (press h for help or q to quit)                                                                     ",{}]]}}],[0.178475,{"lines":{"0":[["           Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a                ",{}]],"1":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"4":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"7":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"8":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"9":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"12":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"13":[["       the state that would result from the merge already.)                                                                            ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"18":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"19":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"20":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"21":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"22":[["       commit.                                                                                                                         ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"27":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"28":[["       has both of them as its parents.                                                                                                ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"31":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"32":[["       overlap; the update will preserve them.                                                                                         ",{}]],"33":[[" Manual page git-merge(1) line 144 (press h for help or q to quit)                                                                     ",{}]]}}],[0.660977,{"lines":{"0":[["           merge with more than two parents (affectionately called an Octopus merge).                                                  ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"3":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"6":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"7":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"8":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"11":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"12":[["       the state that would result from the merge already.)                                                                            ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"17":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"18":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"19":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"20":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"21":[["       commit.                                                                                                                         ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"26":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"27":[["       has both of them as its parents.                                                                                                ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"30":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"31":[["       overlap; the update will preserve them.                                                                                         ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 145 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039628,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"2":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"5":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"6":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"7":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"10":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"11":[["       the state that would result from the merge already.)                                                                            ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"16":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"17":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"18":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"19":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"20":[["       commit.                                                                                                                         ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"25":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"26":[["       has both of them as its parents.                                                                                                ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"29":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"30":[["       overlap; the update will preserve them.                                                                                         ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"33":[[" Manual page git-merge(1) line 146 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039912,{"lines":{"0":[["           If no commit is given from the command line, merge the remote-tracking branches that the current branch is                  ",{}]],"1":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"4":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"5":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"6":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"9":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"10":[["       the state that would result from the merge already.)                                                                            ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"15":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"16":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"17":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"18":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"19":[["       commit.                                                                                                                         ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"24":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"25":[["       has both of them as its parents.                                                                                                ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"28":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"29":[["       overlap; the update will preserve them.                                                                                         ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 147 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039883,{"lines":{"0":[["           configured to use as its upstream. See also the configuration section of this manual page.                                  ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"3":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"4":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"5":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"8":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"9":[["       the state that would result from the merge already.)                                                                            ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"14":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"15":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"16":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"17":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"18":[["       commit.                                                                                                                         ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"23":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"24":[["       has both of them as its parents.                                                                                                ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"27":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"28":[["       overlap; the update will preserve them.                                                                                         ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"33":[[" Manual page git-merge(1) line 148 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039979,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"2":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"3":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"4":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"7":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"8":[["       the state that would result from the merge already.)                                                                            ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"13":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"14":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"15":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"16":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"17":[["       commit.                                                                                                                         ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"22":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"23":[["       has both of them as its parents.                                                                                                ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"26":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"27":[["       overlap; the update will preserve them.                                                                                         ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 149 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040456,{"lines":{"0":[["PRE-MERGE",{"bold":true}],[" ",{}],["CHECKS",{"bold":true}],["                                                                                                                       ",{}]],"1":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"2":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"3":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"6":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"7":[["       the state that would result from the merge already.)                                                                            ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"12":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"13":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"14":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"15":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"16":[["       commit.                                                                                                                         ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"21":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"22":[["       has both of them as its parents.                                                                                                ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"25":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"26":[["       overlap; the update will preserve them.                                                                                         ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"33":[[" Manual page git-merge(1) line 150 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040033,{"lines":{"0":[["       Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be            ",{}]],"1":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"2":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"5":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"6":[["       the state that would result from the merge already.)                                                                            ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"11":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"12":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"13":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"14":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"15":[["       commit.                                                                                                                         ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"20":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"21":[["       has both of them as its parents.                                                                                                ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"24":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"25":[["       overlap; the update will preserve them.                                                                                         ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 151 (press h for help or q to quit)                                                                     ",{}]]}}],[0.041068,{"lines":{"0":[["       clobbered if there are conflicts. See also ",{}],["git-stash",{"bold":true}],["(1). ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will stop without doing anything                ",{}]],"1":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"4":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"5":[["       the state that would result from the merge already.)                                                                            ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"10":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"11":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"12":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"13":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"14":[["       commit.                                                                                                                         ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"19":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"20":[["       has both of them as its parents.                                                                                                ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"23":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"24":[["       overlap; the update will preserve them.                                                                                         ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"33":[[" Manual page git-merge(1) line 152 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040221,{"lines":{"0":[["       when local uncommitted changes overlap with files that ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],["/",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" may need to update.                                   ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"3":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"4":[["       the state that would result from the merge already.)                                                                            ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"9":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"10":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"11":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"12":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"13":[["       commit.                                                                                                                         ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"18":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"19":[["       has both of them as its parents.                                                                                                ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"22":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"23":[["       overlap; the update will preserve them.                                                                                         ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 153 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040571,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"2":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"3":[["       the state that would result from the merge already.)                                                                            ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"8":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"9":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"10":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"11":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"12":[["       commit.                                                                                                                         ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"17":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"18":[["       has both of them as its parents.                                                                                                ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"21":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"22":[["       overlap; the update will preserve them.                                                                                         ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"33":[[" Manual page git-merge(1) line 154 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039884,{"lines":{"0":[["       To avoid recording unrelated changes in the merge commit, ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" and ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will also abort if there are any               ",{}]],"1":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"2":[["       the state that would result from the merge already.)                                                                            ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"7":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"8":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"9":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"10":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"11":[["       commit.                                                                                                                         ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"16":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"17":[["       has both of them as its parents.                                                                                                ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"20":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"21":[["       overlap; the update will preserve them.                                                                                         ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"32":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"33":[[" Manual page git-merge(1) line 155 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040159,{"lines":{"0":[["       changes registered in the index relative to the ",{}],["HEAD",{"bold":true}],[" commit. (One exception is when the changed index entries are in            ",{}]],"1":[["       the state that would result from the merge already.)                                                                            ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"6":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"7":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"8":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"9":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"10":[["       commit.                                                                                                                         ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"15":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"16":[["       has both of them as its parents.                                                                                                ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"19":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"20":[["       overlap; the update will preserve them.                                                                                         ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"31":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"32":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"33":[[" Manual page git-merge(1) line 156 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040213,{"lines":{"0":[["       the state that would result from the merge already.)                                                                            ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"5":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"6":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"7":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"8":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"9":[["       commit.                                                                                                                         ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"14":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"15":[["       has both of them as its parents.                                                                                                ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"18":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"19":[["       overlap; the update will preserve them.                                                                                         ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"30":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"31":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"32":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"33":[[" Manual page git-merge(1) line 157 (press h for help or q to quit)                                                                     ",{}]]}}],[0.041026,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"4":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"5":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"6":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"7":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"8":[["       commit.                                                                                                                         ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"13":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"14":[["       has both of them as its parents.                                                                                                ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"17":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"18":[["       overlap; the update will preserve them.                                                                                         ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"29":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"30":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"31":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 158 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040297,{"lines":{"0":[["       If all named commits are already ancestors of ",{}],["HEAD",{"bold":true}],[", ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" will exit early with the message \"Already up-to-date.\"            ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"3":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"4":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"5":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"6":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"7":[["       commit.                                                                                                                         ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"12":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"13":[["       has both of them as its parents.                                                                                                ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"16":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"17":[["       overlap; the update will preserve them.                                                                                         ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"28":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"29":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"30":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"33":[[" Manual page git-merge(1) line 159 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040058,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"2":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"3":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"4":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"5":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"6":[["       commit.                                                                                                                         ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"11":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"12":[["       has both of them as its parents.                                                                                                ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"15":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"16":[["       overlap; the update will preserve them.                                                                                         ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"27":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"28":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"29":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"32":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"33":[[" Manual page git-merge(1) line 160 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040252,{"lines":{"0":[["FAST-FORWARD",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                     ",{}]],"1":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"2":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"3":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"4":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"5":[["       commit.                                                                                                                         ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"10":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"11":[["       has both of them as its parents.                                                                                                ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"14":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"15":[["       overlap; the update will preserve them.                                                                                         ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"26":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"27":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"28":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"31":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 161 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040169,{"lines":{"0":[["       Often the current branch head is an ancestor of the named commit. This is the most common case especially when                  ",{}]],"1":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"2":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"3":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"4":[["       commit.                                                                                                                         ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"9":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"10":[["       has both of them as its parents.                                                                                                ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"13":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"14":[["       overlap; the update will preserve them.                                                                                         ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"25":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"26":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"27":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"30":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"33":[[" Manual page git-merge(1) line 162 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039269,{"lines":{"0":[["       invoked from ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[": you are tracking an upstream repository, you have committed no local changes, and now you                ",{}]],"1":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"2":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"3":[["       commit.                                                                                                                         ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"8":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"9":[["       has both of them as its parents.                                                                                                ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"12":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"13":[["       overlap; the update will preserve them.                                                                                         ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"24":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"25":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"26":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"29":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"32":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"33":[[" Manual page git-merge(1) line 163 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039908,{"lines":{"0":[["       want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history;            ",{}]],"1":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"2":[["       commit.                                                                                                                         ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"7":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"8":[["       has both of them as its parents.                                                                                                ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"11":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"12":[["       overlap; the update will preserve them.                                                                                         ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"23":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"24":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"25":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"28":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"31":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 164 (press h for help or q to quit)                                                                     ",{}]]}}],[0.04115,{"lines":{"0":[["       instead, the ",{}],["HEAD",{"bold":true}],[" (along with the index) is updated to point at the named commit, without creating an extra merge               ",{}]],"1":[["       commit.                                                                                                                         ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"6":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"7":[["       has both of them as its parents.                                                                                                ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"10":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"11":[["       overlap; the update will preserve them.                                                                                         ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"22":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"23":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"24":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"27":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"30":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"33":[[" Manual page git-merge(1) line 165 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040795,{"lines":{"0":[["       commit.                                                                                                                         ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"5":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"6":[["       has both of them as its parents.                                                                                                ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"9":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"10":[["       overlap; the update will preserve them.                                                                                         ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"21":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"22":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"23":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"26":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"29":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"32":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"33":[[" Manual page git-merge(1) line 166 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040113,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"4":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"5":[["       has both of them as its parents.                                                                                                ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"8":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"9":[["       overlap; the update will preserve them.                                                                                         ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"20":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"21":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"22":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"25":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"28":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"31":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"32":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"33":[[" Manual page git-merge(1) line 167 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040545,{"lines":{"0":[["       This behavior can be suppressed with the ",{}],["--no-ff",{"bold":true}],[" option.                                                                        ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"3":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"4":[["       has both of them as its parents.                                                                                                ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"7":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"8":[["       overlap; the update will preserve them.                                                                                         ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"19":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"20":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"21":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"24":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"27":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"30":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"31":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"32":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"33":[[" Manual page git-merge(1) line 168 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039625,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"2":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"3":[["       has both of them as its parents.                                                                                                ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"6":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"7":[["       overlap; the update will preserve them.                                                                                         ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"18":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"19":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"20":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"23":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"26":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"29":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"30":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"31":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 169 (press h for help or q to quit)                                                                     ",{}]]}}],[0.04118,{"lines":{"0":[["TRUE",{"bold":true}],[" ",{}],["MERGE",{"bold":true}],["                                                                                                                             ",{}]],"1":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"2":[["       has both of them as its parents.                                                                                                ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"5":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"6":[["       overlap; the update will preserve them.                                                                                         ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"17":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"18":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"19":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"22":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"25":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"28":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"29":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"30":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"33":[[" Manual page git-merge(1) line 170 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040269,{"lines":{"0":[["       Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that              ",{}]],"1":[["       has both of them as its parents.                                                                                                ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"4":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"5":[["       overlap; the update will preserve them.                                                                                         ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"16":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"17":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"18":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"21":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"24":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"27":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"28":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"29":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"32":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"33":[[" Manual page git-merge(1) line 171 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040372,{"lines":{"0":[["       has both of them as its parents.                                                                                                ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"3":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"4":[["       overlap; the update will preserve them.                                                                                         ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"15":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"16":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"17":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"20":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"23":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"26":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"27":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"28":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"31":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 172 (press h for help or q to quit)                                                                     ",{}]]}}],[0.04048,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"2":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"3":[["       overlap; the update will preserve them.                                                                                         ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"14":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"15":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"16":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"19":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"22":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"25":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"26":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"27":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"30":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"33":[[" Manual page git-merge(1) line 173 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040385,{"lines":{"0":[["       A merged version reconciling the changes from all branches to be merged is committed, and your ",{}],["HEAD",{"bold":true}],[", index, and                 ",{}]],"1":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"2":[["       overlap; the update will preserve them.                                                                                         ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"13":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"14":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"15":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"18":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"21":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"24":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"25":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"26":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"29":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"32":[["       have any work on your own. e.g.                                                                                                 ",{}]],"33":[[" Manual page git-merge(1) line 174 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040198,{"lines":{"0":[["       working tree are updated to it. It is possible to have modifications in the working tree as long as they do not                 ",{}]],"1":[["       overlap; the update will preserve them.                                                                                         ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"12":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"13":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"14":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"17":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"20":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"23":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"24":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"25":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"28":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"31":[["       have any work on your own. e.g.                                                                                                 ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 175 (press h for help or q to quit)                                                                     ",{}]]}}],[0.041085,{"lines":{"0":[["       overlap; the update will preserve them.                                                                                         ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"11":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"12":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"13":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"16":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"19":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"22":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"23":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"24":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"27":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"30":[["       have any work on your own. e.g.                                                                                                 ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           git fetch origin                                                                                                            ",{}]],"33":[[" Manual page git-merge(1) line 176 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040911,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"10":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"11":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"12":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"15":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"18":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"21":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"22":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"23":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"26":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"29":[["       have any work on your own. e.g.                                                                                                 ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           git fetch origin                                                                                                            ",{}]],"32":[["           git merge v1.2.3^0                                                                                                          ",{}]],"33":[[" Manual page git-merge(1) line 177 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040063,{"lines":{"0":[["       When it is not obvious how to reconcile the changes, the following happens:                                                     ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"9":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"10":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"11":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"14":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"17":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"20":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"21":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"22":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"25":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"28":[["       have any work on your own. e.g.                                                                                                 ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           git fetch origin                                                                                                            ",{}]],"31":[["           git merge v1.2.3^0                                                                                                          ",{}]],"32":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"33":[[" Manual page git-merge(1) line 178 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040218,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"8":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"9":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"10":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"13":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"16":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"19":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"20":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"21":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"24":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"27":[["       have any work on your own. e.g.                                                                                                 ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           git fetch origin                                                                                                            ",{}]],"30":[["           git merge v1.2.3^0                                                                                                          ",{}]],"31":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 179 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040786,{"lines":{"0":[["        1. The ",{}],["HEAD",{"bold":true}],[" pointer stays the same.                                                                                            ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"7":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"8":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"9":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"12":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"15":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"18":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"19":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"20":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"23":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"26":[["       have any work on your own. e.g.                                                                                                 ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           git fetch origin                                                                                                            ",{}]],"29":[["           git merge v1.2.3^0                                                                                                          ",{}]],"30":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"33":[[" Manual page git-merge(1) line 180 (press h for help or q to quit)                                                                     ",{}]]}}],[0.03994,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"6":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"7":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"8":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"11":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"14":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"17":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"18":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"19":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"22":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"25":[["       have any work on your own. e.g.                                                                                                 ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           git fetch origin                                                                                                            ",{}]],"28":[["           git merge v1.2.3^0                                                                                                          ",{}]],"29":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"32":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"33":[[" Manual page git-merge(1) line 181 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040456,{"lines":{"0":[["        2. The ",{}],["MERGE_HEAD",{"bold":true}],[" ref is set to point to the other branch head.                                                                ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"5":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"6":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"7":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"10":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"13":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"16":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"17":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"18":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"21":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"24":[["       have any work on your own. e.g.                                                                                                 ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           git fetch origin                                                                                                            ",{}]],"27":[["           git merge v1.2.3^0                                                                                                          ",{}]],"28":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"31":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"32":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"33":[[" Manual page git-merge(1) line 182 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039961,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"4":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"5":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"6":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"9":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"12":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"15":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"16":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"17":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"20":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"23":[["       have any work on your own. e.g.                                                                                                 ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           git fetch origin                                                                                                            ",{}]],"26":[["           git merge v1.2.3^0                                                                                                          ",{}]],"27":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"30":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"31":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"32":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"33":[[" Manual page git-merge(1) line 183 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040361,{"lines":{"0":[["        3. Paths that merged cleanly are updated both in the index file and in your working tree.                                      ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"3":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"4":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"5":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"8":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"11":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"14":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"15":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"16":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"19":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"22":[["       have any work on your own. e.g.                                                                                                 ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           git fetch origin                                                                                                            ",{}]],"25":[["           git merge v1.2.3^0                                                                                                          ",{}]],"26":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"29":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"30":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"31":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"32":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"33":[[" Manual page git-merge(1) line 184 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040593,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"2":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"3":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"4":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"7":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"10":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"13":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"14":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"15":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"18":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"21":[["       have any work on your own. e.g.                                                                                                 ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           git fetch origin                                                                                                            ",{}]],"24":[["           git merge v1.2.3^0                                                                                                          ",{}]],"25":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"28":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"29":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"30":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"31":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"32":[["       both sides did to that area.                                                                                                    ",{}]],"33":[[" Manual page git-merge(1) line 185 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039557,{"lines":{"0":[["        4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common              ",{}]],"1":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"2":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"3":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"6":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"9":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"12":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"13":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"14":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"17":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"20":[["       have any work on your own. e.g.                                                                                                 ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           git fetch origin                                                                                                            ",{}]],"23":[["           git merge v1.2.3^0                                                                                                          ",{}]],"24":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"27":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"28":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"29":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"30":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"31":[["       both sides did to that area.                                                                                                    ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 186 (press h for help or q to quit)                                                                     ",{}]]}}],[0.04093,{"lines":{"0":[["           ancestor, stage 2 from ",{}],["HEAD",{"bold":true}],[", and stage 3 from ",{}],["MERGE_HEAD",{"bold":true}],[" (you can inspect the stages with ",{}],["git",{"bold":true}],[" ",{}],["ls-files",{"bold":true}],[" ",{}],["-u",{"bold":true}],["). The             ",{}]],"1":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"2":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"5":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"8":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"11":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"12":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"13":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"16":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"19":[["       have any work on your own. e.g.                                                                                                 ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           git fetch origin                                                                                                            ",{}]],"22":[["           git merge v1.2.3^0                                                                                                          ",{}]],"23":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"26":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"27":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"28":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"29":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"30":[["       both sides did to that area.                                                                                                    ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"33":[[" Manual page git-merge(1) line 187 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039974,{"lines":{"0":[["           working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict               ",{}]],"1":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"4":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"7":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"10":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"11":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"12":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"15":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"18":[["       have any work on your own. e.g.                                                                                                 ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           git fetch origin                                                                                                            ",{}]],"21":[["           git merge v1.2.3^0                                                                                                          ",{}]],"22":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"25":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"26":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"27":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"28":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"29":[["       both sides did to that area.                                                                                                    ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"32":[["       conflicted hunk, like this:                                                                                                     ",{}]],"33":[[" Manual page git-merge(1) line 188 (press h for help or q to quit)                                                                     ",{}]]}}],[0.041206,{"lines":{"0":[["           markers ",{}],["<<<===>>>",{"bold":true}],[".                                                                                                          ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"3":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"6":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"9":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"10":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"11":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"14":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"17":[["       have any work on your own. e.g.                                                                                                 ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           git fetch origin                                                                                                            ",{}]],"20":[["           git merge v1.2.3^0                                                                                                          ",{}]],"21":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"24":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"25":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"26":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"27":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"28":[["       both sides did to that area.                                                                                                    ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"31":[["       conflicted hunk, like this:                                                                                                     ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 189 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040426,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"2":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"5":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"8":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"9":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"10":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"13":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"16":[["       have any work on your own. e.g.                                                                                                 ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           git fetch origin                                                                                                            ",{}]],"19":[["           git merge v1.2.3^0                                                                                                          ",{}]],"20":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"23":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"24":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"25":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"26":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"27":[["       both sides did to that area.                                                                                                    ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"30":[["       conflicted hunk, like this:                                                                                                     ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"33":[[" Manual page git-merge(1) line 190 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040291,{"lines":{"0":[["        5. No other changes are made. In particular, the local modifications you had before you started merge will stay the            ",{}]],"1":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"4":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"7":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"8":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"9":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"12":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"15":[["       have any work on your own. e.g.                                                                                                 ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           git fetch origin                                                                                                            ",{}]],"18":[["           git merge v1.2.3^0                                                                                                          ",{}]],"19":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"22":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"23":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"24":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"25":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"26":[["       both sides did to that area.                                                                                                    ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"29":[["       conflicted hunk, like this:                                                                                                     ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"32":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"33":[[" Manual page git-merge(1) line 191 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039772,{"lines":{"0":[["           same and the index entries for them stay as they were, i.e. matching ",{}],["HEAD",{"bold":true}],[".                                                  ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"3":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"6":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"7":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"8":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"11":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"14":[["       have any work on your own. e.g.                                                                                                 ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           git fetch origin                                                                                                            ",{}]],"17":[["           git merge v1.2.3^0                                                                                                          ",{}]],"18":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"21":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"22":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"23":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"24":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"25":[["       both sides did to that area.                                                                                                    ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"28":[["       conflicted hunk, like this:                                                                                                     ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"31":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"32":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"33":[[" Manual page git-merge(1) line 192 (press h for help or q to quit)                                                                     ",{}]]}}],[0.04063,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"2":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"5":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"6":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"7":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"10":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"13":[["       have any work on your own. e.g.                                                                                                 ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           git fetch origin                                                                                                            ",{}]],"16":[["           git merge v1.2.3^0                                                                                                          ",{}]],"17":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"20":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"21":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"22":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"23":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"24":[["       both sides did to that area.                                                                                                    ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"27":[["       conflicted hunk, like this:                                                                                                     ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"30":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"31":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"32":[["           Conflict resolution is hard;                                                                                                ",{}]],"33":[[" Manual page git-merge(1) line 193 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040682,{"lines":{"0":[["       If you tried a merge which resulted in complex conflicts and want to start over, you can recover with ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],["                 ",{}]],"1":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"4":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"5":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"6":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"9":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"12":[["       have any work on your own. e.g.                                                                                                 ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           git fetch origin                                                                                                            ",{}]],"15":[["           git merge v1.2.3^0                                                                                                          ",{}]],"16":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"19":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"20":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"21":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"22":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"23":[["       both sides did to that area.                                                                                                    ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"26":[["       conflicted hunk, like this:                                                                                                     ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"29":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"30":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"31":[["           Conflict resolution is hard;                                                                                                ",{}]],"32":[["           let's go shopping.                                                                                                          ",{}]],"33":[[" Manual page git-merge(1) line 194 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039377,{"lines":{"0":[["       ",{}],["--abort",{"bold":true}],[".                                                                                                                        ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"3":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"4":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"5":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"8":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"11":[["       have any work on your own. e.g.                                                                                                 ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           git fetch origin                                                                                                            ",{}]],"14":[["           git merge v1.2.3^0                                                                                                          ",{}]],"15":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"18":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"19":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"20":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"21":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"22":[["       both sides did to that area.                                                                                                    ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"25":[["       conflicted hunk, like this:                                                                                                     ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"28":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"29":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"30":[["           Conflict resolution is hard;                                                                                                ",{}]],"31":[["           let's go shopping.                                                                                                          ",{}]],"32":[["           =======                                                                                                                     ",{}]],"33":[[" Manual page git-merge(1) line 195 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040785,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"2":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"3":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"4":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"7":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"10":[["       have any work on your own. e.g.                                                                                                 ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           git fetch origin                                                                                                            ",{}]],"13":[["           git merge v1.2.3^0                                                                                                          ",{}]],"14":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"17":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"18":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"19":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"20":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"21":[["       both sides did to that area.                                                                                                    ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"24":[["       conflicted hunk, like this:                                                                                                     ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"27":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"28":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"29":[["           Conflict resolution is hard;                                                                                                ",{}]],"30":[["           let's go shopping.                                                                                                          ",{}]],"31":[["           =======                                                                                                                     ",{}]],"32":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"33":[[" Manual page git-merge(1) line 196 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040842,{"lines":{"0":[["MERGING",{"bold":true}],[" ",{}],["TAG",{"bold":true}],["                                                                                                                            ",{}]],"1":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"2":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"3":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"6":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"9":[["       have any work on your own. e.g.                                                                                                 ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           git fetch origin                                                                                                            ",{}]],"12":[["           git merge v1.2.3^0                                                                                                          ",{}]],"13":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"16":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"17":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"18":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"19":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"20":[["       both sides did to that area.                                                                                                    ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"23":[["       conflicted hunk, like this:                                                                                                     ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"26":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"27":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"28":[["           Conflict resolution is hard;                                                                                                ",{}]],"29":[["           let's go shopping.                                                                                                          ",{}]],"30":[["           =======                                                                                                                     ",{}]],"31":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"32":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"33":[[" Manual page git-merge(1) line 197 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040626,{"lines":{"0":[["       When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge             ",{}]],"1":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"2":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"5":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"8":[["       have any work on your own. e.g.                                                                                                 ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           git fetch origin                                                                                                            ",{}]],"11":[["           git merge v1.2.3^0                                                                                                          ",{}]],"12":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"15":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"16":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"17":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"18":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"19":[["       both sides did to that area.                                                                                                    ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"22":[["       conflicted hunk, like this:                                                                                                     ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"25":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"26":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"27":[["           Conflict resolution is hard;                                                                                                ",{}]],"28":[["           let's go shopping.                                                                                                          ",{}]],"29":[["           =======                                                                                                                     ",{}]],"30":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"31":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"32":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"33":[[" Manual page git-merge(1) line 198 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039841,{"lines":{"0":[["       is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed,              ",{}]],"1":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"4":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"7":[["       have any work on your own. e.g.                                                                                                 ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           git fetch origin                                                                                                            ",{}]],"10":[["           git merge v1.2.3^0                                                                                                          ",{}]],"11":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"14":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"15":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"16":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"17":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"18":[["       both sides did to that area.                                                                                                    ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"21":[["       conflicted hunk, like this:                                                                                                     ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"24":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"25":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"26":[["           Conflict resolution is hard;                                                                                                ",{}]],"27":[["           let's go shopping.                                                                                                          ",{}]],"28":[["           =======                                                                                                                     ",{}]],"29":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"30":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"31":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 199 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040437,{"lines":{"0":[["       the signature check is reported as a comment in the message template. See also ",{}],["git-tag",{"bold":true}],["(1).                                      ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"3":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"6":[["       have any work on your own. e.g.                                                                                                 ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           git fetch origin                                                                                                            ",{}]],"9":[["           git merge v1.2.3^0                                                                                                          ",{}]],"10":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"13":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"14":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"15":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"16":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"17":[["       both sides did to that area.                                                                                                    ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"20":[["       conflicted hunk, like this:                                                                                                     ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"23":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"24":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"25":[["           Conflict resolution is hard;                                                                                                ",{}]],"26":[["           let's go shopping.                                                                                                          ",{}]],"27":[["           =======                                                                                                                     ",{}]],"28":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"29":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"30":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"33":[[" Manual page git-merge(1) line 200 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039737,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"2":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"5":[["       have any work on your own. e.g.                                                                                                 ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           git fetch origin                                                                                                            ",{}]],"8":[["           git merge v1.2.3^0                                                                                                          ",{}]],"9":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"12":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"13":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"14":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"15":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"16":[["       both sides did to that area.                                                                                                    ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"19":[["       conflicted hunk, like this:                                                                                                     ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"22":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"23":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"24":[["           Conflict resolution is hard;                                                                                                ",{}]],"25":[["           let's go shopping.                                                                                                          ",{}]],"26":[["           =======                                                                                                                     ",{}]],"27":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"28":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"29":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"32":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"33":[[" Manual page git-merge(1) line 201 (press h for help or q to quit)                                                                     ",{}]]}}],[0.410004,{"lines":{"0":[["       When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing               ",{}]],"1":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"4":[["       have any work on your own. e.g.                                                                                                 ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           git fetch origin                                                                                                            ",{}]],"7":[["           git merge v1.2.3^0                                                                                                          ",{}]],"8":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"11":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"12":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"13":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"14":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"15":[["       both sides did to that area.                                                                                                    ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"18":[["       conflicted hunk, like this:                                                                                                     ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"21":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"22":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"23":[["           Conflict resolution is hard;                                                                                                ",{}]],"24":[["           let's go shopping.                                                                                                          ",{}]],"25":[["           =======                                                                                                                     ",{}]],"26":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"27":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"28":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"31":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 202 (press h for help or q to quit)                                                                     ",{}]]}}],[0.660358,{"lines":{"0":[["       with an upstream release point, you may not want to make an unnecessary merge commit.                                           ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"3":[["       have any work on your own. e.g.                                                                                                 ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           git fetch origin                                                                                                            ",{}]],"6":[["           git merge v1.2.3^0                                                                                                          ",{}]],"7":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"10":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"11":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"12":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"13":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"14":[["       both sides did to that area.                                                                                                    ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"17":[["       conflicted hunk, like this:                                                                                                     ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"20":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"21":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"22":[["           Conflict resolution is hard;                                                                                                ",{}]],"23":[["           let's go shopping.                                                                                                          ",{}]],"24":[["           =======                                                                                                                     ",{}]],"25":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"26":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"27":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"30":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"33":[[" Manual page git-merge(1) line 203 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040473,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"2":[["       have any work on your own. e.g.                                                                                                 ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           git fetch origin                                                                                                            ",{}]],"5":[["           git merge v1.2.3^0                                                                                                          ",{}]],"6":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"9":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"10":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"11":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"12":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"13":[["       both sides did to that area.                                                                                                    ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"16":[["       conflicted hunk, like this:                                                                                                     ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"19":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"20":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"21":[["           Conflict resolution is hard;                                                                                                ",{}]],"22":[["           let's go shopping.                                                                                                          ",{}]],"23":[["           =======                                                                                                                     ",{}]],"24":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"25":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"26":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"29":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"32":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"33":[[" Manual page git-merge(1) line 204 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040399,{"lines":{"0":[["       In such a case, you can \"unwrap\" the tag yourself before feeding it to ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[", or pass ",{}],["--ff-only",{"bold":true}],[" when you do not             ",{}]],"1":[["       have any work on your own. e.g.                                                                                                 ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           git fetch origin                                                                                                            ",{}]],"4":[["           git merge v1.2.3^0                                                                                                          ",{}]],"5":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"8":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"9":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"10":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"11":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"12":[["       both sides did to that area.                                                                                                    ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"15":[["       conflicted hunk, like this:                                                                                                     ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"18":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"19":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"20":[["           Conflict resolution is hard;                                                                                                ",{}]],"21":[["           let's go shopping.                                                                                                          ",{}]],"22":[["           =======                                                                                                                     ",{}]],"23":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"24":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"25":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"28":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"31":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"32":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"33":[[" Manual page git-merge(1) line 205 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040424,{"lines":{"0":[["       have any work on your own. e.g.                                                                                                 ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           git fetch origin                                                                                                            ",{}]],"3":[["           git merge v1.2.3^0                                                                                                          ",{}]],"4":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"7":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"8":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"9":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"10":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"11":[["       both sides did to that area.                                                                                                    ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"14":[["       conflicted hunk, like this:                                                                                                     ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"17":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"18":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"19":[["           Conflict resolution is hard;                                                                                                ",{}]],"20":[["           let's go shopping.                                                                                                          ",{}]],"21":[["           =======                                                                                                                     ",{}]],"22":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"23":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"24":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"27":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"30":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"31":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 206 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040628,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           git fetch origin                                                                                                            ",{}]],"2":[["           git merge v1.2.3^0                                                                                                          ",{}]],"3":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"6":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"7":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"8":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"9":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"10":[["       both sides did to that area.                                                                                                    ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"13":[["       conflicted hunk, like this:                                                                                                     ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"16":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"17":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"18":[["           Conflict resolution is hard;                                                                                                ",{}]],"19":[["           let's go shopping.                                                                                                          ",{}]],"20":[["           =======                                                                                                                     ",{}]],"21":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"22":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"23":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"26":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"29":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"30":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"33":[[" Manual page git-merge(1) line 207 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040296,{"lines":{"0":[["           git fetch origin                                                                                                            ",{}]],"1":[["           git merge v1.2.3^0                                                                                                          ",{}]],"2":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"5":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"6":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"7":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"8":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"9":[["       both sides did to that area.                                                                                                    ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"12":[["       conflicted hunk, like this:                                                                                                     ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"15":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"16":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"17":[["           Conflict resolution is hard;                                                                                                ",{}]],"18":[["           let's go shopping.                                                                                                          ",{}]],"19":[["           =======                                                                                                                     ",{}]],"20":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"21":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"22":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"25":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"28":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"29":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"32":[["       style, the above conflict may look like this:                                                                                   ",{}]],"33":[[" Manual page git-merge(1) line 208 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040699,{"lines":{"0":[["           git merge v1.2.3^0                                                                                                          ",{}]],"1":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"4":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"5":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"6":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"7":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"8":[["       both sides did to that area.                                                                                                    ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"11":[["       conflicted hunk, like this:                                                                                                     ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"14":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"15":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"16":[["           Conflict resolution is hard;                                                                                                ",{}]],"17":[["           let's go shopping.                                                                                                          ",{}]],"18":[["           =======                                                                                                                     ",{}]],"19":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"20":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"21":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"24":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"27":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"28":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"31":[["       style, the above conflict may look like this:                                                                                   ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 209 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039794,{"lines":{"0":[["           git merge --ff-only v1.2.3                                                                                                  ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"3":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"4":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"5":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"6":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"7":[["       both sides did to that area.                                                                                                    ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"10":[["       conflicted hunk, like this:                                                                                                     ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"13":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"14":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"15":[["           Conflict resolution is hard;                                                                                                ",{}]],"16":[["           let's go shopping.                                                                                                          ",{}]],"17":[["           =======                                                                                                                     ",{}]],"18":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"19":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"20":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"23":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"26":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"27":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"30":[["       style, the above conflict may look like this:                                                                                   ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"33":[[" Manual page git-merge(1) line 210 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040234,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"2":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"3":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"4":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"5":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"6":[["       both sides did to that area.                                                                                                    ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"9":[["       conflicted hunk, like this:                                                                                                     ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"12":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"13":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"14":[["           Conflict resolution is hard;                                                                                                ",{}]],"15":[["           let's go shopping.                                                                                                          ",{}]],"16":[["           =======                                                                                                                     ",{}]],"17":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"18":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"19":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"22":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"25":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"26":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"29":[["       style, the above conflict may look like this:                                                                                   ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"32":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"33":[[" Manual page git-merge(1) line 211 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039859,{"lines":{"0":[["HOW",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],[" ",{}],["ARE",{"bold":true}],[" ",{}],["PRESENTED",{"bold":true}],["                                                                                                            ",{}]],"1":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"2":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"3":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"4":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"5":[["       both sides did to that area.                                                                                                    ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"8":[["       conflicted hunk, like this:                                                                                                     ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"11":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"12":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"13":[["           Conflict resolution is hard;                                                                                                ",{}]],"14":[["           let's go shopping.                                                                                                          ",{}]],"15":[["           =======                                                                                                                     ",{}]],"16":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"17":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"18":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"21":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"24":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"25":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"28":[["       style, the above conflict may look like this:                                                                                   ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"31":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"32":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"33":[[" Manual page git-merge(1) line 213 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040254,{"lines":{"0":[["       During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the            ",{}]],"1":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"2":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"3":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"4":[["       both sides did to that area.                                                                                                    ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"7":[["       conflicted hunk, like this:                                                                                                     ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"10":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"11":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"12":[["           Conflict resolution is hard;                                                                                                ",{}]],"13":[["           let's go shopping.                                                                                                          ",{}]],"14":[["           =======                                                                                                                     ",{}]],"15":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"16":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"17":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"20":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"23":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"24":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"27":[["       style, the above conflict may look like this:                                                                                   ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"30":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"31":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"32":[["           Conflict resolution is hard;                                                                                                ",{}]],"33":[[" Manual page git-merge(1) line 214 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039679,{"lines":{"0":[["       common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left             ",{}]],"1":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"2":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"3":[["       both sides did to that area.                                                                                                    ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"6":[["       conflicted hunk, like this:                                                                                                     ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"9":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"10":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"11":[["           Conflict resolution is hard;                                                                                                ",{}]],"12":[["           let's go shopping.                                                                                                          ",{}]],"13":[["           =======                                                                                                                     ",{}]],"14":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"15":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"16":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"19":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"22":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"23":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"26":[["       style, the above conflict may look like this:                                                                                   ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"29":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"30":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"31":[["           Conflict resolution is hard;                                                                                                ",{}]],"32":[["           let's go shopping.                                                                                                          ",{}]],"33":[[" Manual page git-merge(1) line 215 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040561,{"lines":{"0":[["       that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the             ",{}]],"1":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"2":[["       both sides did to that area.                                                                                                    ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"5":[["       conflicted hunk, like this:                                                                                                     ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"8":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"9":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"10":[["           Conflict resolution is hard;                                                                                                ",{}]],"11":[["           let's go shopping.                                                                                                          ",{}]],"12":[["           =======                                                                                                                     ",{}]],"13":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"14":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"15":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"18":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"21":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"22":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"25":[["       style, the above conflict may look like this:                                                                                   ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"28":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"29":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"30":[["           Conflict resolution is hard;                                                                                                ",{}]],"31":[["           let's go shopping.                                                                                                          ",{}]],"32":[["           |||||||                                                                                                                     ",{}]],"33":[[" Manual page git-merge(1) line 216 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040378,{"lines":{"0":[["       same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what                ",{}]],"1":[["       both sides did to that area.                                                                                                    ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"4":[["       conflicted hunk, like this:                                                                                                     ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"7":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"8":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"9":[["           Conflict resolution is hard;                                                                                                ",{}]],"10":[["           let's go shopping.                                                                                                          ",{}]],"11":[["           =======                                                                                                                     ",{}]],"12":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"13":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"14":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"17":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"20":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"21":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"24":[["       style, the above conflict may look like this:                                                                                   ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"27":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"28":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"29":[["           Conflict resolution is hard;                                                                                                ",{}]],"30":[["           let's go shopping.                                                                                                          ",{}]],"31":[["           |||||||                                                                                                                     ",{}]],"32":[["           Conflict resolution is hard.                                                                                                ",{}]],"33":[[" Manual page git-merge(1) line 217 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040132,{"lines":{"0":[["       both sides did to that area.                                                                                                    ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"3":[["       conflicted hunk, like this:                                                                                                     ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"6":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"7":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"8":[["           Conflict resolution is hard;                                                                                                ",{}]],"9":[["           let's go shopping.                                                                                                          ",{}]],"10":[["           =======                                                                                                                     ",{}]],"11":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"12":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"13":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"16":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"19":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"20":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"23":[["       style, the above conflict may look like this:                                                                                   ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"26":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"27":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"28":[["           Conflict resolution is hard;                                                                                                ",{}]],"29":[["           let's go shopping.                                                                                                          ",{}]],"30":[["           |||||||                                                                                                                     ",{}]],"31":[["           Conflict resolution is hard.                                                                                                ",{}]],"32":[["           =======                                                                                                                     ",{}]],"33":[[" Manual page git-merge(1) line 218 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039647,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"2":[["       conflicted hunk, like this:                                                                                                     ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"5":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"6":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"7":[["           Conflict resolution is hard;                                                                                                ",{}]],"8":[["           let's go shopping.                                                                                                          ",{}]],"9":[["           =======                                                                                                                     ",{}]],"10":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"11":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"12":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"15":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"18":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"19":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"22":[["       style, the above conflict may look like this:                                                                                   ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"25":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"26":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"27":[["           Conflict resolution is hard;                                                                                                ",{}]],"28":[["           let's go shopping.                                                                                                          ",{}]],"29":[["           |||||||                                                                                                                     ",{}]],"30":[["           Conflict resolution is hard.                                                                                                ",{}]],"31":[["           =======                                                                                                                     ",{}]],"32":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"33":[[" Manual page git-merge(1) line 219 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040655,{"lines":{"0":[["       By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a                 ",{}]],"1":[["       conflicted hunk, like this:                                                                                                     ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"4":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"5":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"6":[["           Conflict resolution is hard;                                                                                                ",{}]],"7":[["           let's go shopping.                                                                                                          ",{}]],"8":[["           =======                                                                                                                     ",{}]],"9":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"10":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"11":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"14":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"17":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"18":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"21":[["       style, the above conflict may look like this:                                                                                   ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"24":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"25":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"26":[["           Conflict resolution is hard;                                                                                                ",{}]],"27":[["           let's go shopping.                                                                                                          ",{}]],"28":[["           |||||||                                                                                                                     ",{}]],"29":[["           Conflict resolution is hard.                                                                                                ",{}]],"30":[["           =======                                                                                                                     ",{}]],"31":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"32":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"33":[[" Manual page git-merge(1) line 220 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039838,{"lines":{"0":[["       conflicted hunk, like this:                                                                                                     ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"3":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"4":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"5":[["           Conflict resolution is hard;                                                                                                ",{}]],"6":[["           let's go shopping.                                                                                                          ",{}]],"7":[["           =======                                                                                                                     ",{}]],"8":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"9":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"10":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"13":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"16":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"17":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"20":[["       style, the above conflict may look like this:                                                                                   ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"23":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"24":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"25":[["           Conflict resolution is hard;                                                                                                ",{}]],"26":[["           let's go shopping.                                                                                                          ",{}]],"27":[["           |||||||                                                                                                                     ",{}]],"28":[["           Conflict resolution is hard.                                                                                                ",{}]],"29":[["           =======                                                                                                                     ",{}]],"30":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"31":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"32":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"33":[[" Manual page git-merge(1) line 221 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040899,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"2":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"3":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"4":[["           Conflict resolution is hard;                                                                                                ",{}]],"5":[["           let's go shopping.                                                                                                          ",{}]],"6":[["           =======                                                                                                                     ",{}]],"7":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"8":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"9":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"12":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"15":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"16":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"19":[["       style, the above conflict may look like this:                                                                                   ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"22":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"23":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"24":[["           Conflict resolution is hard;                                                                                                ",{}]],"25":[["           let's go shopping.                                                                                                          ",{}]],"26":[["           |||||||                                                                                                                     ",{}]],"27":[["           Conflict resolution is hard.                                                                                                ",{}]],"28":[["           =======                                                                                                                     ",{}]],"29":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"30":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"31":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 222 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040405,{"lines":{"0":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"1":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"2":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"3":[["           Conflict resolution is hard;                                                                                                ",{}]],"4":[["           let's go shopping.                                                                                                          ",{}]],"5":[["           =======                                                                                                                     ",{}]],"6":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"7":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"8":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"11":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"14":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"15":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"18":[["       style, the above conflict may look like this:                                                                                   ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"21":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"22":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"23":[["           Conflict resolution is hard;                                                                                                ",{}]],"24":[["           let's go shopping.                                                                                                          ",{}]],"25":[["           |||||||                                                                                                                     ",{}]],"26":[["           Conflict resolution is hard.                                                                                                ",{}]],"27":[["           =======                                                                                                                     ",{}]],"28":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"29":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"30":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"33":[[" Manual page git-merge(1) line 223 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040351,{"lines":{"0":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"1":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"2":[["           Conflict resolution is hard;                                                                                                ",{}]],"3":[["           let's go shopping.                                                                                                          ",{}]],"4":[["           =======                                                                                                                     ",{}]],"5":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"6":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"7":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"10":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"13":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"14":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"17":[["       style, the above conflict may look like this:                                                                                   ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"20":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"21":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"22":[["           Conflict resolution is hard;                                                                                                ",{}]],"23":[["           let's go shopping.                                                                                                          ",{}]],"24":[["           |||||||                                                                                                                     ",{}]],"25":[["           Conflict resolution is hard.                                                                                                ",{}]],"26":[["           =======                                                                                                                     ",{}]],"27":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"28":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"29":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"32":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"33":[[" Manual page git-merge(1) line 224 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040882,{"lines":{"0":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"1":[["           Conflict resolution is hard;                                                                                                ",{}]],"2":[["           let's go shopping.                                                                                                          ",{}]],"3":[["           =======                                                                                                                     ",{}]],"4":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"5":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"6":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"9":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"12":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"13":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"16":[["       style, the above conflict may look like this:                                                                                   ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"19":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"20":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"21":[["           Conflict resolution is hard;                                                                                                ",{}]],"22":[["           let's go shopping.                                                                                                          ",{}]],"23":[["           |||||||                                                                                                                     ",{}]],"24":[["           Conflict resolution is hard.                                                                                                ",{}]],"25":[["           =======                                                                                                                     ",{}]],"26":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"27":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"28":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"31":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"32":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"33":[[" Manual page git-merge(1) line 225 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040865,{"lines":{"0":[["           Conflict resolution is hard;                                                                                                ",{}]],"1":[["           let's go shopping.                                                                                                          ",{}]],"2":[["           =======                                                                                                                     ",{}]],"3":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"4":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"5":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"8":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"11":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"12":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"15":[["       style, the above conflict may look like this:                                                                                   ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"18":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"19":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"20":[["           Conflict resolution is hard;                                                                                                ",{}]],"21":[["           let's go shopping.                                                                                                          ",{}]],"22":[["           |||||||                                                                                                                     ",{}]],"23":[["           Conflict resolution is hard.                                                                                                ",{}]],"24":[["           =======                                                                                                                     ",{}]],"25":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"26":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"27":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"30":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"31":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"32":[["       resolution by viewing the original.                                                                                             ",{}]],"33":[[" Manual page git-merge(1) line 226 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040998,{"lines":{"0":[["           let's go shopping.                                                                                                          ",{}]],"1":[["           =======                                                                                                                     ",{}]],"2":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"3":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"4":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"7":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"10":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"11":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"14":[["       style, the above conflict may look like this:                                                                                   ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"17":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"18":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"19":[["           Conflict resolution is hard;                                                                                                ",{}]],"20":[["           let's go shopping.                                                                                                          ",{}]],"21":[["           |||||||                                                                                                                     ",{}]],"22":[["           Conflict resolution is hard.                                                                                                ",{}]],"23":[["           =======                                                                                                                     ",{}]],"24":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"25":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"26":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"29":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"30":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"31":[["       resolution by viewing the original.                                                                                             ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 227 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040805,{"lines":{"0":[["           =======                                                                                                                     ",{}]],"1":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"2":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"3":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"6":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"9":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"10":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"13":[["       style, the above conflict may look like this:                                                                                   ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"16":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"17":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"18":[["           Conflict resolution is hard;                                                                                                ",{}]],"19":[["           let's go shopping.                                                                                                          ",{}]],"20":[["           |||||||                                                                                                                     ",{}]],"21":[["           Conflict resolution is hard.                                                                                                ",{}]],"22":[["           =======                                                                                                                     ",{}]],"23":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"24":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"25":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"28":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"29":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"30":[["       resolution by viewing the original.                                                                                             ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"33":[[" Manual page git-merge(1) line 228 (press h for help or q to quit)                                                                     ",{}]]}}],[0.041039,{"lines":{"0":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"1":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"2":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"5":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"8":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"9":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"12":[["       style, the above conflict may look like this:                                                                                   ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"15":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"16":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"17":[["           Conflict resolution is hard;                                                                                                ",{}]],"18":[["           let's go shopping.                                                                                                          ",{}]],"19":[["           |||||||                                                                                                                     ",{}]],"20":[["           Conflict resolution is hard.                                                                                                ",{}]],"21":[["           =======                                                                                                                     ",{}]],"22":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"23":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"24":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"27":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"28":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"29":[["       resolution by viewing the original.                                                                                             ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"32":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"33":[[" Manual page git-merge(1) line 229 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040121,{"lines":{"0":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"1":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"4":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"7":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"8":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"11":[["       style, the above conflict may look like this:                                                                                   ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"14":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"15":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"16":[["           Conflict resolution is hard;                                                                                                ",{}]],"17":[["           let's go shopping.                                                                                                          ",{}]],"18":[["           |||||||                                                                                                                     ",{}]],"19":[["           Conflict resolution is hard.                                                                                                ",{}]],"20":[["           =======                                                                                                                     ",{}]],"21":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"22":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"23":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"26":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"27":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"28":[["       resolution by viewing the original.                                                                                             ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"31":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 230 (press h for help or q to quit)                                                                     ",{}]]}}],[0.04063,{"lines":{"0":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"3":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"6":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"7":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"10":[["       style, the above conflict may look like this:                                                                                   ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"13":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"14":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"15":[["           Conflict resolution is hard;                                                                                                ",{}]],"16":[["           let's go shopping.                                                                                                          ",{}]],"17":[["           |||||||                                                                                                                     ",{}]],"18":[["           Conflict resolution is hard.                                                                                                ",{}]],"19":[["           =======                                                                                                                     ",{}]],"20":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"21":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"22":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"25":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"26":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"27":[["       resolution by viewing the original.                                                                                             ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"30":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"33":[[" Manual page git-merge(1) line 231 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039641,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"2":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"5":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"6":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"9":[["       style, the above conflict may look like this:                                                                                   ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"12":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"13":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"14":[["           Conflict resolution is hard;                                                                                                ",{}]],"15":[["           let's go shopping.                                                                                                          ",{}]],"16":[["           |||||||                                                                                                                     ",{}]],"17":[["           Conflict resolution is hard.                                                                                                ",{}]],"18":[["           =======                                                                                                                     ",{}]],"19":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"20":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"21":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"24":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"25":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"26":[["       resolution by viewing the original.                                                                                             ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"29":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"32":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"33":[[" Manual page git-merge(1) line 232 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040817,{"lines":{"0":[["       The area where a pair of conflicting changes happened is marked with markers ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[". The part            ",{}]],"1":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"4":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"5":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"8":[["       style, the above conflict may look like this:                                                                                   ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"11":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"12":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"13":[["           Conflict resolution is hard;                                                                                                ",{}]],"14":[["           let's go shopping.                                                                                                          ",{}]],"15":[["           |||||||                                                                                                                     ",{}]],"16":[["           Conflict resolution is hard.                                                                                                ",{}]],"17":[["           =======                                                                                                                     ",{}]],"18":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"19":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"20":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"23":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"24":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"25":[["       resolution by viewing the original.                                                                                             ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"28":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"31":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 234 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040231,{"lines":{"0":[["       before the ",{}],["=======",{"bold":true}],[" is typically your side, and the part afterwards is typically their side.                                     ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"3":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"4":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"7":[["       style, the above conflict may look like this:                                                                                   ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"10":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"11":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"12":[["           Conflict resolution is hard;                                                                                                ",{}]],"13":[["           let's go shopping.                                                                                                          ",{}]],"14":[["           |||||||                                                                                                                     ",{}]],"15":[["           Conflict resolution is hard.                                                                                                ",{}]],"16":[["           =======                                                                                                                     ",{}]],"17":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"18":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"19":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"22":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"23":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"24":[["       resolution by viewing the original.                                                                                             ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"27":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"30":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"33":[[" Manual page git-merge(1) line 235 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040082,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"2":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"3":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"6":[["       style, the above conflict may look like this:                                                                                   ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"9":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"10":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"11":[["           Conflict resolution is hard;                                                                                                ",{}]],"12":[["           let's go shopping.                                                                                                          ",{}]],"13":[["           |||||||                                                                                                                     ",{}]],"14":[["           Conflict resolution is hard.                                                                                                ",{}]],"15":[["           =======                                                                                                                     ",{}]],"16":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"17":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"18":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"21":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"22":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"23":[["       resolution by viewing the original.                                                                                             ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"26":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"29":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"32":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"33":[[" Manual page git-merge(1) line 236 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039784,{"lines":{"0":[["       The default format does not show what the original said in the conflicting area. You cannot tell how many lines are             ",{}]],"1":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"2":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"5":[["       style, the above conflict may look like this:                                                                                   ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"8":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"9":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"10":[["           Conflict resolution is hard;                                                                                                ",{}]],"11":[["           let's go shopping.                                                                                                          ",{}]],"12":[["           |||||||                                                                                                                     ",{}]],"13":[["           Conflict resolution is hard.                                                                                                ",{}]],"14":[["           =======                                                                                                                     ",{}]],"15":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"16":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"17":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"20":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"21":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"22":[["       resolution by viewing the original.                                                                                             ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"25":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"28":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"31":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 237 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040233,{"lines":{"0":[["       deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say              ",{}]],"1":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"4":[["       style, the above conflict may look like this:                                                                                   ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"7":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"8":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"9":[["           Conflict resolution is hard;                                                                                                ",{}]],"10":[["           let's go shopping.                                                                                                          ",{}]],"11":[["           |||||||                                                                                                                     ",{}]],"12":[["           Conflict resolution is hard.                                                                                                ",{}]],"13":[["           =======                                                                                                                     ",{}]],"14":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"15":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"16":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"19":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"20":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"21":[["       resolution by viewing the original.                                                                                             ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"24":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"27":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"30":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 238 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039833,{"lines":{"0":[["       it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.                                     ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"3":[["       style, the above conflict may look like this:                                                                                   ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"6":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"7":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"8":[["           Conflict resolution is hard;                                                                                                ",{}]],"9":[["           let's go shopping.                                                                                                          ",{}]],"10":[["           |||||||                                                                                                                     ",{}]],"11":[["           Conflict resolution is hard.                                                                                                ",{}]],"12":[["           =======                                                                                                                     ",{}]],"13":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"14":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"15":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"18":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"19":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"20":[["       resolution by viewing the original.                                                                                             ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"23":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"26":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"29":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 239 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040231,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"2":[["       style, the above conflict may look like this:                                                                                   ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"5":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"6":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"7":[["           Conflict resolution is hard;                                                                                                ",{}]],"8":[["           let's go shopping.                                                                                                          ",{}]],"9":[["           |||||||                                                                                                                     ",{}]],"10":[["           Conflict resolution is hard.                                                                                                ",{}]],"11":[["           =======                                                                                                                     ",{}]],"12":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"13":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"14":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"17":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"18":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"19":[["       resolution by viewing the original.                                                                                             ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"22":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"25":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"28":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"33":[[" Manual page git-merge(1) line 240 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039549,{"lines":{"0":[["       An alternative style can be used by setting the \"merge.conflictstyle\" configuration variable to \"diff3\". In \"diff3\"             ",{}]],"1":[["       style, the above conflict may look like this:                                                                                   ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"4":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"5":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"6":[["           Conflict resolution is hard;                                                                                                ",{}]],"7":[["           let's go shopping.                                                                                                          ",{}]],"8":[["           |||||||                                                                                                                     ",{}]],"9":[["           Conflict resolution is hard.                                                                                                ",{}]],"10":[["           =======                                                                                                                     ",{}]],"11":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"12":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"13":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"16":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"17":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"18":[["       resolution by viewing the original.                                                                                             ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"21":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"24":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"27":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 241 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040813,{"lines":{"0":[["       style, the above conflict may look like this:                                                                                   ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"3":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"4":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"5":[["           Conflict resolution is hard;                                                                                                ",{}]],"6":[["           let's go shopping.                                                                                                          ",{}]],"7":[["           |||||||                                                                                                                     ",{}]],"8":[["           Conflict resolution is hard.                                                                                                ",{}]],"9":[["           =======                                                                                                                     ",{}]],"10":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"11":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"12":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"15":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"16":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"17":[["       resolution by viewing the original.                                                                                             ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"20":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"23":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"26":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"33":[[" Manual page git-merge(1) line 242 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039978,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"2":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"3":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"4":[["           Conflict resolution is hard;                                                                                                ",{}]],"5":[["           let's go shopping.                                                                                                          ",{}]],"6":[["           |||||||                                                                                                                     ",{}]],"7":[["           Conflict resolution is hard.                                                                                                ",{}]],"8":[["           =======                                                                                                                     ",{}]],"9":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"10":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"11":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"14":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"15":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"16":[["       resolution by viewing the original.                                                                                             ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"19":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"22":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"25":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"32":[["           versions.                                                                                                                   ",{}]],"33":[[" Manual page git-merge(1) line 243 (press h for help or q to quit)                                                                     ",{}]]}}],[0.04007,{"lines":{"0":[["           Here are lines that are either unchanged from the common                                                                    ",{}]],"1":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"2":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"3":[["           Conflict resolution is hard;                                                                                                ",{}]],"4":[["           let's go shopping.                                                                                                          ",{}]],"5":[["           |||||||                                                                                                                     ",{}]],"6":[["           Conflict resolution is hard.                                                                                                ",{}]],"7":[["           =======                                                                                                                     ",{}]],"8":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"9":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"10":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"13":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"14":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"15":[["       resolution by viewing the original.                                                                                             ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"18":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"21":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"24":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"31":[["           versions.                                                                                                                   ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 244 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040486,{"lines":{"0":[["           ancestor, or cleanly resolved because only one side changed.                                                                ",{}]],"1":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"2":[["           Conflict resolution is hard;                                                                                                ",{}]],"3":[["           let's go shopping.                                                                                                          ",{}]],"4":[["           |||||||                                                                                                                     ",{}]],"5":[["           Conflict resolution is hard.                                                                                                ",{}]],"6":[["           =======                                                                                                                     ",{}]],"7":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"8":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"9":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"12":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"13":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"14":[["       resolution by viewing the original.                                                                                             ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"17":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"20":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"23":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"30":[["           versions.                                                                                                                   ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"33":[[" Manual page git-merge(1) line 245 (press h for help or q to quit)                                                                     ",{}]]}}],[0.04037,{"lines":{"0":[["           <<<<<<< yours:sample.txt                                                                                                    ",{}]],"1":[["           Conflict resolution is hard;                                                                                                ",{}]],"2":[["           let's go shopping.                                                                                                          ",{}]],"3":[["           |||||||                                                                                                                     ",{}]],"4":[["           Conflict resolution is hard.                                                                                                ",{}]],"5":[["           =======                                                                                                                     ",{}]],"6":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"7":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"8":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"11":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"12":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"13":[["       resolution by viewing the original.                                                                                             ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"16":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"19":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"22":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"29":[["           versions.                                                                                                                   ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"32":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"33":[[" Manual page git-merge(1) line 246 (press h for help or q to quit)                                                                     ",{}]]}}],[0.144078,{"lines":{"0":[["           Conflict resolution is hard;                                                                                                ",{}]],"1":[["           let's go shopping.                                                                                                          ",{}]],"2":[["           |||||||                                                                                                                     ",{}]],"3":[["           Conflict resolution is hard.                                                                                                ",{}]],"4":[["           =======                                                                                                                     ",{}]],"5":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"6":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"7":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"10":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"11":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"12":[["       resolution by viewing the original.                                                                                             ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"15":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"18":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"21":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"28":[["           versions.                                                                                                                   ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"31":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 247 (press h for help or q to quit)                                                                     ",{}]]}}],[0.150908,{"lines":{"0":[["           let's go shopping.                                                                                                          ",{}]],"1":[["           |||||||                                                                                                                     ",{}]],"2":[["           Conflict resolution is hard.                                                                                                ",{}]],"3":[["           =======                                                                                                                     ",{}]],"4":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"5":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"6":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"9":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"10":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"11":[["       resolution by viewing the original.                                                                                             ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"14":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"17":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"20":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"27":[["           versions.                                                                                                                   ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"30":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"33":[[" Manual page git-merge(1) line 248 (press h for help or q to quit)                                                                     ",{}]]}}],[0.140773,{"lines":{"0":[["           |||||||                                                                                                                     ",{}]],"1":[["           Conflict resolution is hard.                                                                                                ",{}]],"2":[["           =======                                                                                                                     ",{}]],"3":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"4":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"5":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"8":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"9":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"10":[["       resolution by viewing the original.                                                                                             ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"13":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"16":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"19":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"26":[["           versions.                                                                                                                   ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"29":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"32":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"33":[[" Manual page git-merge(1) line 249 (press h for help or q to quit)                                                                     ",{}]]}}],[0.110336,{"lines":{"0":[["           Conflict resolution is hard.                                                                                                ",{}]],"1":[["           =======                                                                                                                     ",{}]],"2":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"3":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"4":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"7":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"8":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"9":[["       resolution by viewing the original.                                                                                             ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"12":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"15":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"18":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"25":[["           versions.                                                                                                                   ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"28":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"31":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 250 (press h for help or q to quit)                                                                     ",{}]]}}],[0.168665,{"lines":{"0":[["           =======                                                                                                                     ",{}]],"1":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"2":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"3":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"6":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"7":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"8":[["       resolution by viewing the original.                                                                                             ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"11":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"14":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"17":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"24":[["           versions.                                                                                                                   ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"27":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"30":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"33":[[" Manual page git-merge(1) line 251 (press h for help or q to quit)                                                                     ",{}]]}}],[0.659918,{"lines":{"0":[["           Git makes conflict resolution easy.                                                                                         ",{}]],"1":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"2":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"5":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"6":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"7":[["       resolution by viewing the original.                                                                                             ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"10":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"13":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"16":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"23":[["           versions.                                                                                                                   ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"26":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"29":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"32":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"33":[[" Manual page git-merge(1) line 252 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039757,{"lines":{"0":[["           >>>>>>> theirs:sample.txt                                                                                                   ",{}]],"1":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"4":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"5":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"6":[["       resolution by viewing the original.                                                                                             ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"9":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"12":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"15":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"22":[["           versions.                                                                                                                   ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"25":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"28":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"31":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 253 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040406,{"lines":{"0":[["           And here is another line that is cleanly resolved or unmodified.                                                            ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"3":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"4":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"5":[["       resolution by viewing the original.                                                                                             ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"8":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"11":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"14":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"21":[["           versions.                                                                                                                   ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"24":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"27":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"30":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["               $ git merge fixes enhancements                                                                                          ",{}]],"33":[[" Manual page git-merge(1) line 254 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040869,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"2":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"3":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"4":[["       resolution by viewing the original.                                                                                             ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"7":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"10":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"13":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"20":[["           versions.                                                                                                                   ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"23":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"26":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"29":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["               $ git merge fixes enhancements                                                                                          ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 255 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039355,{"lines":{"0":[["       In addition to the ",{}],["<<<<<<<",{"bold":true}],[", ",{}],["=======",{"bold":true}],[", and ",{}],[">>>>>>>",{"bold":true}],[" markers, it uses another ",{}],["|||||||",{"bold":true}],[" marker that is followed by the                ",{}]],"1":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"2":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"3":[["       resolution by viewing the original.                                                                                             ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"6":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"9":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"12":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"19":[["           versions.                                                                                                                   ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"22":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"25":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"28":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["               $ git merge fixes enhancements                                                                                          ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"33":[[" Manual page git-merge(1) line 257 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040254,{"lines":{"0":[["       original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and            ",{}]],"1":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"2":[["       resolution by viewing the original.                                                                                             ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"5":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"8":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"11":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"18":[["           versions.                                                                                                                   ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"21":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"24":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"27":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["               $ git merge fixes enhancements                                                                                          ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 258 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040173,{"lines":{"0":[["       gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better                   ",{}]],"1":[["       resolution by viewing the original.                                                                                             ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"4":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"7":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"10":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"17":[["           versions.                                                                                                                   ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"20":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"23":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"26":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["               $ git merge fixes enhancements                                                                                          ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"33":[[" Manual page git-merge(1) line 259 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039886,{"lines":{"0":[["       resolution by viewing the original.                                                                                             ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"3":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"6":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"9":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"16":[["           versions.                                                                                                                   ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"19":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"22":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"25":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["               $ git merge fixes enhancements                                                                                          ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 260 (press h for help or q to quit)                                                                     ",{}]]}}],[0.03964,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"2":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"5":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"8":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"15":[["           versions.                                                                                                                   ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"18":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"21":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"24":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["               $ git merge fixes enhancements                                                                                          ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"33":[[" Manual page git-merge(1) line 261 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039954,{"lines":{"0":[["HOW",{"bold":true}],[" ",{}],["TO",{"bold":true}],[" ",{}],["RESOLVE",{"bold":true}],[" ",{}],["CONFLICTS",{"bold":true}],["                                                                                                               ",{}]],"1":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"4":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"7":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"14":[["           versions.                                                                                                                   ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"17":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"20":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"23":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["               $ git merge fixes enhancements                                                                                          ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 262 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040251,{"lines":{"0":[["       After seeing a conflict, you can do two things:                                                                                 ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"3":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"6":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"13":[["           versions.                                                                                                                   ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"16":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"19":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"22":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["               $ git merge fixes enhancements                                                                                          ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["               $ git merge --no-commit maint                                                                                           ",{}]],"33":[[" Manual page git-merge(1) line 263 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039932,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"2":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"5":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"12":[["           versions.                                                                                                                   ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"15":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"18":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"21":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["               $ git merge fixes enhancements                                                                                          ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["               $ git merge --no-commit maint                                                                                           ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 264 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040501,{"lines":{"0":[["       ·   Decide not to merge. The only clean-ups you need are to reset the index file to the ",{}],["HEAD",{"bold":true}],[" commit to reverse 2.               ",{}]],"1":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"4":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"11":[["           versions.                                                                                                                   ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"14":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"17":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"20":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["               $ git merge fixes enhancements                                                                                          ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["               $ git merge --no-commit maint                                                                                           ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"33":[[" Manual page git-merge(1) line 265 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040193,{"lines":{"0":[["           and to clean up working tree changes made by 2. and 3.; ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["--abort",{"bold":true}],[" can be used for this.                             ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"3":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"10":[["           versions.                                                                                                                   ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"13":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"16":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"19":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["               $ git merge fixes enhancements                                                                                          ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["               $ git merge --no-commit maint                                                                                           ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"32":[["           message.                                                                                                                    ",{}]],"33":[[" Manual page git-merge(1) line 266 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039306,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"2":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"9":[["           versions.                                                                                                                   ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"12":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"15":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"18":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["               $ git merge fixes enhancements                                                                                          ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["               $ git merge --no-commit maint                                                                                           ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"31":[["           message.                                                                                                                    ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 267 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040896,{"lines":{"0":[["       ·   Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and ",{}],["git",{"underline":true}],[" ",{}],["add",{"underline":true}],["               ",{}]],"1":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"8":[["           versions.                                                                                                                   ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"11":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"14":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"17":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["               $ git merge fixes enhancements                                                                                          ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["               $ git merge --no-commit maint                                                                                           ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"30":[["           message.                                                                                                                    ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"33":[[" Manual page git-merge(1) line 268 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040363,{"lines":{"0":[["           them to the index. Use ",{}],["git",{"underline":true}],[" ",{}],["commit",{"underline":true}],[" to seal the deal.                                                                         ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"7":[["           versions.                                                                                                                   ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"10":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"13":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"16":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["               $ git merge fixes enhancements                                                                                          ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["               $ git merge --no-commit maint                                                                                           ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"29":[["           message.                                                                                                                    ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"32":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"33":[[" Manual page git-merge(1) line 269 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039899,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"6":[["           versions.                                                                                                                   ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"9":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"12":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"15":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["               $ git merge fixes enhancements                                                                                          ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["               $ git merge --no-commit maint                                                                                           ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"28":[["           message.                                                                                                                    ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"31":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 270 (press h for help or q to quit)                                                                     ",{}]]}}],[0.03999,{"lines":{"0":[["       You can work through the conflict with a number of tools:                                                                       ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"5":[["           versions.                                                                                                                   ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"8":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"11":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"14":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["               $ git merge fixes enhancements                                                                                          ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["               $ git merge --no-commit maint                                                                                           ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"27":[["           message.                                                                                                                    ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"30":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 271 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040452,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"4":[["           versions.                                                                                                                   ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"7":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"10":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"13":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["               $ git merge fixes enhancements                                                                                          ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["               $ git merge --no-commit maint                                                                                           ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"26":[["           message.                                                                                                                    ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"29":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"32":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"33":[[" Manual page git-merge(1) line 272 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040074,{"lines":{"0":[["       ·   Use a mergetool.  ",{}],["git",{"bold":true}],[" ",{}],["mergetool",{"bold":true}],[" to launch a graphical mergetool which will work you through the merge.                      ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"3":[["           versions.                                                                                                                   ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"6":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"9":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"12":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["               $ git merge fixes enhancements                                                                                          ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["               $ git merge --no-commit maint                                                                                           ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"25":[["           message.                                                                                                                    ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"28":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"31":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"32":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"33":[[" Manual page git-merge(1) line 273 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040207,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"2":[["           versions.                                                                                                                   ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"5":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"8":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"11":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["               $ git merge fixes enhancements                                                                                          ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["               $ git merge --no-commit maint                                                                                           ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"24":[["           message.                                                                                                                    ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"27":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"30":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"31":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"32":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"33":[[" Manual page git-merge(1) line 274 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040546,{"lines":{"0":[["       ·   Look at the diffs.  ",{}],["git",{"bold":true}],[" ",{}],["diff",{"bold":true}],[" will show a three-way diff, highlighting changes from both the ",{}],["HEAD",{"bold":true}],[" and ",{}],["MERGE_HEAD",{"bold":true}],["             ",{}]],"1":[["           versions.                                                                                                                   ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"4":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"7":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"10":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["               $ git merge fixes enhancements                                                                                          ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["               $ git merge --no-commit maint                                                                                           ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"23":[["           message.                                                                                                                    ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"26":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"29":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"30":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"31":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 275 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039773,{"lines":{"0":[["           versions.                                                                                                                   ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"3":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"6":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"9":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["               $ git merge fixes enhancements                                                                                          ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["               $ git merge --no-commit maint                                                                                           ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"22":[["           message.                                                                                                                    ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"25":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"28":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"29":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"30":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       resolve                                                                                                                         ",{}]],"33":[[" Manual page git-merge(1) line 276 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040145,{"lines":{"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[5e-06,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"2":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"5":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"8":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["               $ git merge fixes enhancements                                                                                          ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["               $ git merge --no-commit maint                                                                                           ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"21":[["           message.                                                                                                                    ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"24":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"27":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"28":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"29":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       resolve                                                                                                                         ",{}]],"32":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"33":[[" Manual page git-merge(1) line 277 (press h for help or q to quit)                                                                     ",{}]]},"cursor":{"x":66}}],[0.039953,{"lines":{"0":[["       ·   Look at the diffs from each branch.  ",{}],["git",{"bold":true}],[" ",{}],["log",{"bold":true}],[" ",{}],["--merge",{"bold":true}],[" ",{}],["-p",{"bold":true}],[" ",{}],["<path>",{"bold":true}],[" will show diffs first for the ",{}],["HEAD",{"bold":true}],[" version and               ",{}]],"1":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"4":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"7":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["               $ git merge fixes enhancements                                                                                          ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["               $ git merge --no-commit maint                                                                                           ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"20":[["           message.                                                                                                                    ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"23":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"26":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"27":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"28":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       resolve                                                                                                                         ",{}]],"31":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"32":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"33":[[" Manual page git-merge(1) line 278 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040518,{"lines":{"0":[["           then the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                                                                ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"3":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"6":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["               $ git merge fixes enhancements                                                                                          ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["               $ git merge --no-commit maint                                                                                           ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"19":[["           message.                                                                                                                    ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"22":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"25":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"26":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"27":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       resolve                                                                                                                         ",{}]],"30":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"31":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 279 (press h for help or q to quit)                                                                     ",{}]]}}],[0.165112,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"2":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"5":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["               $ git merge fixes enhancements                                                                                          ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["               $ git merge --no-commit maint                                                                                           ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"18":[["           message.                                                                                                                    ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"21":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"24":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"25":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"26":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       resolve                                                                                                                         ",{}]],"29":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"30":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       recursive                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 280 (press h for help or q to quit)                                                                     ",{}]]}}],[0.659824,{"lines":{"0":[["       ·   Look at the originals.  ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":1:filename",{"bold":true}],[" shows the common ancestor, ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":2:filename",{"bold":true}],[" shows the ",{}],["HEAD",{"bold":true}],["                 ",{}]],"1":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"4":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["               $ git merge fixes enhancements                                                                                          ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["               $ git merge --no-commit maint                                                                                           ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"17":[["           message.                                                                                                                    ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"20":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"23":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"24":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"25":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       resolve                                                                                                                         ",{}]],"28":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"29":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       recursive                                                                                                                       ",{}]],"32":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"33":[[" Manual page git-merge(1) line 281 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040029,{"lines":{"0":[["           version, and ",{}],["git",{"bold":true}],[" ",{}],["show",{"bold":true}],[" ",{}],[":3:filename",{"bold":true}],[" shows the ",{}],["MERGE_HEAD",{"bold":true}],[" version.                                                             ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"3":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["               $ git merge fixes enhancements                                                                                          ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["               $ git merge --no-commit maint                                                                                           ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"16":[["           message.                                                                                                                    ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"19":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"22":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"23":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"24":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       resolve                                                                                                                         ",{}]],"27":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"28":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       recursive                                                                                                                       ",{}]],"31":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"32":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"33":[[" Manual page git-merge(1) line 282 (press h for help or q to quit)                                                                     ",{}]]}}],[0.04027,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"2":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["               $ git merge fixes enhancements                                                                                          ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["               $ git merge --no-commit maint                                                                                           ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"15":[["           message.                                                                                                                    ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"18":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"21":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"22":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"23":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       resolve                                                                                                                         ",{}]],"26":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"27":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       recursive                                                                                                                       ",{}]],"30":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"31":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"32":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"33":[[" Manual page git-merge(1) line 283 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039475,{"lines":{"0":[["EXAMPLES",{"bold":true}],["                                                                                                                               ",{}]],"1":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["               $ git merge fixes enhancements                                                                                          ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["               $ git merge --no-commit maint                                                                                           ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"14":[["           message.                                                                                                                    ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"17":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"20":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"21":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"22":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       resolve                                                                                                                         ",{}]],"25":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"26":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       recursive                                                                                                                       ",{}]],"29":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"30":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"31":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"32":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"33":[[" Manual page git-merge(1) line 284 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040613,{"lines":{"0":[["       ·   Merge branches ",{}],["fixes",{"bold":true}],[" and ",{}],["enhancements",{"bold":true}],[" on top of the current branch, making an octopus merge:                                ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["               $ git merge fixes enhancements                                                                                          ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["               $ git merge --no-commit maint                                                                                           ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"13":[["           message.                                                                                                                    ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"16":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"19":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"20":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"21":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       resolve                                                                                                                         ",{}]],"24":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"25":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       recursive                                                                                                                       ",{}]],"28":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"29":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"30":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"31":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"32":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"33":[[" Manual page git-merge(1) line 285 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040854,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["               $ git merge fixes enhancements                                                                                          ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["               $ git merge --no-commit maint                                                                                           ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"12":[["           message.                                                                                                                    ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"15":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"18":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"19":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"20":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       resolve                                                                                                                         ",{}]],"23":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"24":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       recursive                                                                                                                       ",{}]],"27":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"28":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"29":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"30":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"31":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 286 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039367,{"lines":{"0":[["               $ git merge fixes enhancements                                                                                          ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["               $ git merge --no-commit maint                                                                                           ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"11":[["           message.                                                                                                                    ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"14":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"17":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"18":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"19":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       resolve                                                                                                                         ",{}]],"22":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"23":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       recursive                                                                                                                       ",{}]],"26":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"27":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"28":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"29":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"30":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"33":[[" Manual page git-merge(1) line 287 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039982,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["               $ git merge --no-commit maint                                                                                           ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"10":[["           message.                                                                                                                    ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"13":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"16":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"17":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"18":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       resolve                                                                                                                         ",{}]],"21":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"22":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       recursive                                                                                                                       ",{}]],"25":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"26":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"27":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"28":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"29":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 288 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040276,{"lines":{"0":[["       ·   Merge branch ",{}],["obsolete",{"bold":true}],[" into the current branch, using ",{}],["ours",{"bold":true}],[" merge strategy:                                                   ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["               $ git merge --no-commit maint                                                                                           ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"9":[["           message.                                                                                                                    ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"12":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"15":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"16":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"17":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       resolve                                                                                                                         ",{}]],"20":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"21":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       recursive                                                                                                                       ",{}]],"24":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"25":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"26":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"27":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"28":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           ours                                                                                                                        ",{}]],"33":[[" Manual page git-merge(1) line 290 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039922,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["               $ git merge --no-commit maint                                                                                           ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"8":[["           message.                                                                                                                    ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"11":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"14":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"15":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"16":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       resolve                                                                                                                         ",{}]],"19":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"20":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       recursive                                                                                                                       ",{}]],"23":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"24":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"25":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"26":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"27":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           ours                                                                                                                        ",{}]],"32":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"33":[[" Manual page git-merge(1) line 291 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040373,{"lines":{"0":[["               $ git merge -s ours obsolete                                                                                            ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["               $ git merge --no-commit maint                                                                                           ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"7":[["           message.                                                                                                                    ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"10":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"13":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"14":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"15":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       resolve                                                                                                                         ",{}]],"18":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"19":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       recursive                                                                                                                       ",{}]],"22":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"23":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"24":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"25":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"26":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           ours                                                                                                                        ",{}]],"31":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"32":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"33":[[" Manual page git-merge(1) line 292 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039972,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["               $ git merge --no-commit maint                                                                                           ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"6":[["           message.                                                                                                                    ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"9":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"12":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"13":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"14":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       resolve                                                                                                                         ",{}]],"17":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"18":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       recursive                                                                                                                       ",{}]],"21":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"22":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"23":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"24":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"25":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           ours                                                                                                                        ",{}]],"30":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"31":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"32":[["               entire contents are taken from our side.                                                                                ",{}]],"33":[[" Manual page git-merge(1) line 293 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040872,{"lines":{"0":[["       ·   Merge branch ",{}],["maint",{"bold":true}],[" into the current branch, but do not make a new commit automatically:                                     ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["               $ git merge --no-commit maint                                                                                           ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"5":[["           message.                                                                                                                    ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"8":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"11":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"12":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"13":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       resolve                                                                                                                         ",{}]],"16":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"17":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       recursive                                                                                                                       ",{}]],"20":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"21":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"22":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"23":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"24":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           ours                                                                                                                        ",{}]],"29":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"30":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"31":[["               entire contents are taken from our side.                                                                                ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 295 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040647,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["               $ git merge --no-commit maint                                                                                           ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"4":[["           message.                                                                                                                    ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"7":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"10":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"11":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"12":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       resolve                                                                                                                         ",{}]],"15":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"16":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       recursive                                                                                                                       ",{}]],"19":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"20":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"21":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"22":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"23":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           ours                                                                                                                        ",{}]],"28":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"29":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"30":[["               entire contents are taken from our side.                                                                                ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"33":[[" Manual page git-merge(1) line 296 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040124,{"lines":{"0":[["               $ git merge --no-commit maint                                                                                           ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"3":[["           message.                                                                                                                    ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"6":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"9":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"10":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"11":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       resolve                                                                                                                         ",{}]],"14":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"15":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       recursive                                                                                                                       ",{}]],"18":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"19":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"20":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"21":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"22":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           ours                                                                                                                        ",{}]],"27":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"28":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"29":[["               entire contents are taken from our side.                                                                                ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"32":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"33":[[" Manual page git-merge(1) line 297 (press h for help or q to quit)                                                                     ",{}]]}}],[0.039633,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"2":[["           message.                                                                                                                    ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"5":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"8":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"9":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"10":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       resolve                                                                                                                         ",{}]],"13":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"14":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       recursive                                                                                                                       ",{}]],"17":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"18":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"19":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"20":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"21":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           ours                                                                                                                        ",{}]],"26":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"27":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"28":[["               entire contents are taken from our side.                                                                                ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"31":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"32":[["               in it.                                                                                                                  ",{}]],"33":[[" Manual page git-merge(1) line 298 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040703,{"lines":{"0":[["           This can be used when you want to include further changes to the merge, or want to write your own merge commit              ",{}]],"1":[["           message.                                                                                                                    ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"4":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"7":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"8":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"9":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       resolve                                                                                                                         ",{}]],"12":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"13":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       recursive                                                                                                                       ",{}]],"16":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"17":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"18":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"19":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"20":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           ours                                                                                                                        ",{}]],"25":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"26":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"27":[["               entire contents are taken from our side.                                                                                ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"30":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"31":[["               in it.                                                                                                                  ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 299 (press h for help or q to quit)                                                                     ",{}]]}}],[0.041084,{"lines":{"0":[["           message.                                                                                                                    ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"3":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"6":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"7":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"8":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       resolve                                                                                                                         ",{}]],"11":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"12":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       recursive                                                                                                                       ",{}]],"15":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"16":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"17":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"18":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"19":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           ours                                                                                                                        ",{}]],"24":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"25":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"26":[["               entire contents are taken from our side.                                                                                ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"29":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"30":[["               in it.                                                                                                                  ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           theirs                                                                                                                      ",{}]],"33":[[" Manual page git-merge(1) line 300 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040603,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"2":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"5":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"6":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"7":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       resolve                                                                                                                         ",{}]],"10":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"11":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       recursive                                                                                                                       ",{}]],"14":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"15":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"16":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"17":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"18":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           ours                                                                                                                        ",{}]],"23":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"24":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"25":[["               entire contents are taken from our side.                                                                                ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"28":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"29":[["               in it.                                                                                                                  ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           theirs                                                                                                                      ",{}]],"32":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"33":[[" Manual page git-merge(1) line 301 (press h for help or q to quit)                                                                     ",{}]]}}],[0.040171,{"lines":{"0":[["           You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like             ",{}]],"1":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"4":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"5":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"6":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       resolve                                                                                                                         ",{}]],"9":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"10":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       recursive                                                                                                                       ",{}]],"13":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"14":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"15":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"16":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"17":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           ours                                                                                                                        ",{}]],"22":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"23":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"24":[["               entire contents are taken from our side.                                                                                ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"27":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"28":[["               in it.                                                                                                                  ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           theirs                                                                                                                      ",{}]],"31":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 302 (press h for help or q to quit)                                                                     ",{}]]}}],[0.208928,{"lines":{"0":[["           bumping release/version name would be acceptable.                                                                           ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"3":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"4":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"5":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       resolve                                                                                                                         ",{}]],"8":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"9":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       recursive                                                                                                                       ",{}]],"12":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"13":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"14":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"15":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"16":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           ours                                                                                                                        ",{}]],"21":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"22":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"23":[["               entire contents are taken from our side.                                                                                ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"26":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"27":[["               in it.                                                                                                                  ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           theirs                                                                                                                      ",{}]],"30":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           patience                                                                                                                    ",{}]],"33":[[" Manual page git-merge(1) line 303 (press h for help or q to quit)                                                                     ",{}]]}}],[0.426772,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"2":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"3":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"4":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       resolve                                                                                                                         ",{}]],"7":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"8":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       recursive                                                                                                                       ",{}]],"11":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"12":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"13":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"14":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"15":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           ours                                                                                                                        ",{}]],"20":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"21":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"22":[["               entire contents are taken from our side.                                                                                ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"25":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"26":[["               in it.                                                                                                                  ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           theirs                                                                                                                      ",{}]],"29":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           patience                                                                                                                    ",{}]],"32":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"33":[[" Manual page git-merge(1) line 304 (press h for help or q to quit)                                                                     ",{}]]}}],[0.512023,{"lines":{"0":[["MERGE",{"bold":true}],[" ",{}],["STRATEGIES",{"bold":true}],["                                                                                                                       ",{}]],"1":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"2":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"3":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       resolve                                                                                                                         ",{}]],"6":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"7":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       recursive                                                                                                                       ",{}]],"10":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"11":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"12":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"13":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"14":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           ours                                                                                                                        ",{}]],"19":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"20":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"21":[["               entire contents are taken from our side.                                                                                ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"24":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"25":[["               in it.                                                                                                                  ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           theirs                                                                                                                      ",{}]],"28":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           patience                                                                                                                    ",{}]],"31":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"32":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"33":[[" Manual page git-merge(1) line 305 (press h for help or q to quit)                                                                     ",{}]]}}],[0.21092,{"lines":{"0":[["       The merge mechanism (",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" and ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[" commands) allows the backend ",{}],["merge",{"underline":true}],[" ",{}],["strategies",{"underline":true}],[" to be chosen with ",{}],["-s",{"bold":true}],["                  ",{}]],"1":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"2":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       resolve                                                                                                                         ",{}]],"5":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"6":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       recursive                                                                                                                       ",{}]],"9":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"10":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"11":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"12":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"13":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           ours                                                                                                                        ",{}]],"18":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"19":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"20":[["               entire contents are taken from our side.                                                                                ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"23":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"24":[["               in it.                                                                                                                  ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           theirs                                                                                                                      ",{}]],"27":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           patience                                                                                                                    ",{}]],"30":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"31":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"32":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"33":[[" Manual page git-merge(1) line 306 (press h for help or q to quit)                                                                     ",{}]]}}],[0.632246,{"lines":{"0":[["       option. Some strategies can also take their own options, which can be passed by giving ",{}],["-X<option>",{"bold":true}],[" arguments to ",{}],["git",{"bold":true}],["              ",{}]],"1":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       resolve                                                                                                                         ",{}]],"4":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"5":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       recursive                                                                                                                       ",{}]],"8":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"9":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"10":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"11":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"12":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           ours                                                                                                                        ",{}]],"17":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"18":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"19":[["               entire contents are taken from our side.                                                                                ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"22":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"23":[["               in it.                                                                                                                  ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           theirs                                                                                                                      ",{}]],"26":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           patience                                                                                                                    ",{}]],"29":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"30":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"31":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 307 (press h for help or q to quit)                                                                     ",{}]]}}],[0.28011,{"lines":{"0":[["       ",{}],["merge",{"bold":true}],[" and/or ",{}],["git",{"bold":true}],[" ",{}],["pull",{"bold":true}],[".                                                                                                          ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       resolve                                                                                                                         ",{}]],"3":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"4":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       recursive                                                                                                                       ",{}]],"7":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"8":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"9":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"10":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"11":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           ours                                                                                                                        ",{}]],"16":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"17":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"18":[["               entire contents are taken from our side.                                                                                ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"21":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"22":[["               in it.                                                                                                                  ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           theirs                                                                                                                      ",{}]],"25":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           patience                                                                                                                    ",{}]],"28":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"29":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"30":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"33":[[" Manual page git-merge(1) line 308 (press h for help or q to quit)                                                                     ",{}]]}}],[0.300922,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       resolve                                                                                                                         ",{}]],"2":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"3":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       recursive                                                                                                                       ",{}]],"6":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"7":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"8":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"9":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"10":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           ours                                                                                                                        ",{}]],"15":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"16":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"17":[["               entire contents are taken from our side.                                                                                ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"20":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"21":[["               in it.                                                                                                                  ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           theirs                                                                                                                      ",{}]],"24":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           patience                                                                                                                    ",{}]],"27":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"28":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"29":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"32":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"33":[[" Manual page git-merge(1) line 309 (press h for help or q to quit)                                                                     ",{}]]}}],[0.410903,{"lines":{"0":[["       resolve                                                                                                                         ",{}]],"1":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"2":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       recursive                                                                                                                       ",{}]],"5":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"6":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"7":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"8":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"9":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           ours                                                                                                                        ",{}]],"14":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"15":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"16":[["               entire contents are taken from our side.                                                                                ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"19":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"20":[["               in it.                                                                                                                  ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           theirs                                                                                                                      ",{}]],"23":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           patience                                                                                                                    ",{}]],"26":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"27":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"28":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"31":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"32":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"33":[[" Manual page git-merge(1) line 310 (press h for help or q to quit)                                                                     ",{}]]}}],[0.281266,{"lines":{"0":[["           This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge            ",{}]],"1":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       recursive                                                                                                                       ",{}]],"4":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"5":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"6":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"7":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"8":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           ours                                                                                                                        ",{}]],"13":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"14":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"15":[["               entire contents are taken from our side.                                                                                ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"18":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"19":[["               in it.                                                                                                                  ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           theirs                                                                                                                      ",{}]],"22":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           patience                                                                                                                    ",{}]],"25":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"26":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"27":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"30":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"31":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 311 (press h for help or q to quit)                                                                     ",{}]]}}],[0.222725,{"lines":{"0":[["           algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.            ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       recursive                                                                                                                       ",{}]],"3":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"4":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"5":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"6":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"7":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           ours                                                                                                                        ",{}]],"12":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"13":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"14":[["               entire contents are taken from our side.                                                                                ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"17":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"18":[["               in it.                                                                                                                  ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           theirs                                                                                                                      ",{}]],"21":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           patience                                                                                                                    ",{}]],"24":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"25":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"26":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"29":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"30":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"33":[[" Manual page git-merge(1) line 312 (press h for help or q to quit)                                                                     ",{}]]}}],[0.502806,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       recursive                                                                                                                       ",{}]],"2":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"3":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"4":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"5":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"6":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           ours                                                                                                                        ",{}]],"11":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"12":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"13":[["               entire contents are taken from our side.                                                                                ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"16":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"17":[["               in it.                                                                                                                  ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           theirs                                                                                                                      ",{}]],"20":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           patience                                                                                                                    ",{}]],"23":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"24":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"25":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"28":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"29":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"32":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"33":[[" Manual page git-merge(1) line 313 (press h for help or q to quit)                                                                     ",{}]]}}],[66.18624699999999,{"lines":{"0":[["       recursive                                                                                                                       ",{}]],"1":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"2":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"3":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"4":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"5":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           ours                                                                                                                        ",{}]],"10":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"11":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"12":[["               entire contents are taken from our side.                                                                                ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"15":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"16":[["               in it.                                                                                                                  ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           theirs                                                                                                                      ",{}]],"19":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           patience                                                                                                                    ",{}]],"22":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"23":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"24":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"27":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"28":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"31":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"32":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"33":[[" Manual page git-merge(1) line 314 (press h for help or q to quit)                                                                     ",{}]]}}],[0.323046,{"lines":{"0":[["           This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that             ",{}]],"1":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"2":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"3":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"4":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           ours                                                                                                                        ",{}]],"9":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"10":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"11":[["               entire contents are taken from our side.                                                                                ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"14":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"15":[["               in it.                                                                                                                  ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           theirs                                                                                                                      ",{}]],"18":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           patience                                                                                                                    ",{}]],"21":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"22":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"23":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"26":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"27":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"30":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"31":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"32":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"33":[[" Manual page git-merge(1) line 315 (press h for help or q to quit)                                                                     ",{}]]}}],[0.189015,{"lines":{"0":[["           can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference                ",{}]],"1":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"2":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"3":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           ours                                                                                                                        ",{}]],"8":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"9":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"10":[["               entire contents are taken from our side.                                                                                ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"13":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"14":[["               in it.                                                                                                                  ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           theirs                                                                                                                      ",{}]],"17":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           patience                                                                                                                    ",{}]],"20":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"21":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"22":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"25":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"26":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"29":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"30":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"31":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 316 (press h for help or q to quit)                                                                     ",{}]]}}],[0.170366,{"lines":{"0":[["           tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by            ",{}]],"1":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"2":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           ours                                                                                                                        ",{}]],"7":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"8":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"9":[["               entire contents are taken from our side.                                                                                ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"12":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"13":[["               in it.                                                                                                                  ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           theirs                                                                                                                      ",{}]],"16":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           patience                                                                                                                    ",{}]],"19":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"20":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"21":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"24":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"25":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"28":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"29":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"30":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"33":[[" Manual page git-merge(1) line 317 (press h for help or q to quit)                                                                     ",{}]]}}],[0.161294,{"lines":{"0":[["           tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect            ",{}]],"1":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           ours                                                                                                                        ",{}]],"6":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"7":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"8":[["               entire contents are taken from our side.                                                                                ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"11":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"12":[["               in it.                                                                                                                  ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           theirs                                                                                                                      ",{}]],"15":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           patience                                                                                                                    ",{}]],"18":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"19":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"20":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"23":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"24":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"27":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"28":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"29":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 318 (press h for help or q to quit)                                                                     ",{}]]}}],[0.180837,{"lines":{"0":[["           and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.                 ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           ours                                                                                                                        ",{}]],"5":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"6":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"7":[["               entire contents are taken from our side.                                                                                ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"10":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"11":[["               in it.                                                                                                                  ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           theirs                                                                                                                      ",{}]],"14":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           patience                                                                                                                    ",{}]],"17":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"18":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"19":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"22":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"23":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"26":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"27":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"28":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"33":[[" Manual page git-merge(1) line 319 (press h for help or q to quit)                                                                     ",{}]]}}],[0.735069,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           ours                                                                                                                        ",{}]],"4":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"5":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"6":[["               entire contents are taken from our side.                                                                                ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"9":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"10":[["               in it.                                                                                                                  ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           theirs                                                                                                                      ",{}]],"13":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           patience                                                                                                                    ",{}]],"16":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"17":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"18":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"21":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"22":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"25":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"26":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"27":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"32":[["                   version is used;                                                                                                    ",{}]],"33":[[" Manual page git-merge(1) line 320 (press h for help or q to quit)                                                                     ",{}]]}}],[68.286714,{"lines":{"0":[["           The ",{}],["recursive",{"underline":true}],[" strategy can take the following options:                                                                      ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           ours                                                                                                                        ",{}]],"3":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"4":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"5":[["               entire contents are taken from our side.                                                                                ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"8":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"9":[["               in it.                                                                                                                  ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           theirs                                                                                                                      ",{}]],"12":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           patience                                                                                                                    ",{}]],"15":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"16":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"17":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"20":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"21":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"24":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"25":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"26":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"31":[["                   version is used;                                                                                                    ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 321 (press h for help or q to quit)                                                                     ",{}]]}}],[0.145758,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           ours                                                                                                                        ",{}]],"2":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"3":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"4":[["               entire contents are taken from our side.                                                                                ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"7":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"8":[["               in it.                                                                                                                  ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           theirs                                                                                                                      ",{}]],"11":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           patience                                                                                                                    ",{}]],"14":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"15":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"16":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"19":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"20":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"23":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"24":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"25":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"30":[["                   version is used;                                                                                                    ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"33":[[" Manual page git-merge(1) line 322 (press h for help or q to quit)                                                                     ",{}]]}}],[0.150005,{"lines":{"0":[["           ours                                                                                                                        ",{}]],"1":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"2":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"3":[["               entire contents are taken from our side.                                                                                ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"6":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"7":[["               in it.                                                                                                                  ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           theirs                                                                                                                      ",{}]],"10":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           patience                                                                                                                    ",{}]],"13":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"14":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"15":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"18":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"19":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"22":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"23":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"24":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"29":[["                   version is used;                                                                                                    ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 323 (press h for help or q to quit)                                                                     ",{}]]}}],[0.116395,{"lines":{"0":[["               This option forces conflicting hunks to be auto-resolved cleanly by favoring ",{}],["our",{"underline":true}],[" version. Changes from the              ",{}]],"1":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"2":[["               entire contents are taken from our side.                                                                                ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"5":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"6":[["               in it.                                                                                                                  ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           theirs                                                                                                                      ",{}]],"9":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           patience                                                                                                                    ",{}]],"12":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"13":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"14":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"17":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"18":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"21":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"22":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"23":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"28":[["                   version is used;                                                                                                    ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           renormalize                                                                                                                 ",{}]],"33":[[" Manual page git-merge(1) line 324 (press h for help or q to quit)                                                                     ",{}]]}}],[0.220684,{"lines":{"0":[["               other tree that do not conflict with our side are reflected to the merge result. For a binary file, the                 ",{}]],"1":[["               entire contents are taken from our side.                                                                                ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"4":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"5":[["               in it.                                                                                                                  ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           theirs                                                                                                                      ",{}]],"8":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           patience                                                                                                                    ",{}]],"11":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"12":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"13":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"16":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"17":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"20":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"21":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"22":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"27":[["                   version is used;                                                                                                    ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           renormalize                                                                                                                 ",{}]],"32":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"33":[[" Manual page git-merge(1) line 325 (press h for help or q to quit)                                                                     ",{}]]}}],[0.07734000000000001,{"lines":{"0":[["               entire contents are taken from our side.                                                                                ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"3":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"4":[["               in it.                                                                                                                  ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           theirs                                                                                                                      ",{}]],"7":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           patience                                                                                                                    ",{}]],"10":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"11":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"12":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"15":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"16":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"19":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"20":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"21":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"26":[["                   version is used;                                                                                                    ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           renormalize                                                                                                                 ",{}]],"31":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"32":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"33":[[" Manual page git-merge(1) line 326 (press h for help or q to quit)                                                                     ",{}]]}}],[0.09361999999999999,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"2":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"3":[["               in it.                                                                                                                  ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           theirs                                                                                                                      ",{}]],"6":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           patience                                                                                                                    ",{}]],"9":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"10":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"11":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"14":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"15":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"18":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"19":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"20":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"25":[["                   version is used;                                                                                                    ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           renormalize                                                                                                                 ",{}]],"30":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"31":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"32":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"33":[[" Manual page git-merge(1) line 327 (press h for help or q to quit)                                                                     ",{}]]}}],[0.101711,{"lines":{"0":[["               This should not be confused with the ",{}],["ours",{"underline":true}],[" merge strategy, which does not even look at what the other tree               ",{}]],"1":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"2":[["               in it.                                                                                                                  ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           theirs                                                                                                                      ",{}]],"5":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           patience                                                                                                                    ",{}]],"8":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"9":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"10":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"13":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"14":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"17":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"18":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"19":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"24":[["                   version is used;                                                                                                    ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           renormalize                                                                                                                 ",{}]],"29":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"30":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"31":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"32":[["               for details.                                                                                                            ",{}]],"33":[[" Manual page git-merge(1) line 328 (press h for help or q to quit)                                                                     ",{}]]}}],[0.329515,{"lines":{"0":[["               contains at all. It discards everything the other tree did, declaring ",{}],["our",{"underline":true}],[" history contains all that happened            ",{}]],"1":[["               in it.                                                                                                                  ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           theirs                                                                                                                      ",{}]],"4":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           patience                                                                                                                    ",{}]],"7":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"8":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"9":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"12":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"13":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"16":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"17":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"18":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"23":[["                   version is used;                                                                                                    ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           renormalize                                                                                                                 ",{}]],"28":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"29":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"30":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"31":[["               for details.                                                                                                            ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 329 (press h for help or q to quit)                                                                     ",{}]]}}],[0.11803,{"lines":{"0":[["               in it.                                                                                                                  ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           theirs                                                                                                                      ",{}]],"3":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           patience                                                                                                                    ",{}]],"6":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"7":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"8":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"11":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"12":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"15":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"16":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"17":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"22":[["                   version is used;                                                                                                    ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           renormalize                                                                                                                 ",{}]],"27":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"28":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"29":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"30":[["               for details.                                                                                                            ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           no-renormalize                                                                                                              ",{}]],"33":[[" Manual page git-merge(1) line 330 (press h for help or q to quit)                                                                     ",{}]]}}],[0.110321,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           theirs                                                                                                                      ",{}]],"2":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           patience                                                                                                                    ",{}]],"5":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"6":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"7":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"10":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"11":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"14":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"15":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"16":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"21":[["                   version is used;                                                                                                    ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           renormalize                                                                                                                 ",{}]],"26":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"27":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"28":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"29":[["               for details.                                                                                                            ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           no-renormalize                                                                                                              ",{}]],"32":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"33":[[" Manual page git-merge(1) line 331 (press h for help or q to quit)                                                                     ",{}]]}}],[0.110542,{"lines":{"0":[["           theirs                                                                                                                      ",{}]],"1":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           patience                                                                                                                    ",{}]],"4":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"5":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"6":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"9":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"10":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"13":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"14":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"15":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"20":[["                   version is used;                                                                                                    ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           renormalize                                                                                                                 ",{}]],"25":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"26":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"27":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"28":[["               for details.                                                                                                            ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           no-renormalize                                                                                                              ",{}]],"31":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 332 (press h for help or q to quit)                                                                     ",{}]]}}],[0.105674,{"lines":{"0":[["               This is the opposite of ",{}],["ours",{"underline":true}],[".                                                                                           ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           patience                                                                                                                    ",{}]],"3":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"4":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"5":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"8":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"9":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"12":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"13":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"14":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"19":[["                   version is used;                                                                                                    ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           renormalize                                                                                                                 ",{}]],"24":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"25":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"26":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"27":[["               for details.                                                                                                            ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           no-renormalize                                                                                                              ",{}]],"30":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           rename-threshold=<n>                                                                                                        ",{}]],"33":[[" Manual page git-merge(1) line 333 (press h for help or q to quit)                                                                     ",{}]]}}],[0.113492,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           patience                                                                                                                    ",{}]],"2":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"3":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"4":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"7":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"8":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"11":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"12":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"13":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"18":[["                   version is used;                                                                                                    ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           renormalize                                                                                                                 ",{}]],"23":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"24":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"25":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"26":[["               for details.                                                                                                            ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           no-renormalize                                                                                                              ",{}]],"29":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           rename-threshold=<n>                                                                                                        ",{}]],"32":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"33":[[" Manual page git-merge(1) line 334 (press h for help or q to quit)                                                                     ",{}]]}}],[0.105377,{"lines":{"0":[["           patience                                                                                                                    ",{}]],"1":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"2":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"3":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"6":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"7":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"10":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"11":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"12":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"17":[["                   version is used;                                                                                                    ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           renormalize                                                                                                                 ",{}]],"22":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"23":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"24":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"25":[["               for details.                                                                                                            ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           no-renormalize                                                                                                              ",{}]],"28":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           rename-threshold=<n>                                                                                                        ",{}]],"31":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 335 (press h for help or q to quit)                                                                     ",{}]]}}],[0.096954,{"lines":{"0":[["               With this option, ",{}],["merge-recursive",{"underline":true}],[" spends a little extra time to avoid mismerges that sometimes occur due to             ",{}]],"1":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"2":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"5":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"6":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"9":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"10":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"11":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"16":[["                   version is used;                                                                                                    ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           renormalize                                                                                                                 ",{}]],"21":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"22":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"23":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"24":[["               for details.                                                                                                            ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           no-renormalize                                                                                                              ",{}]],"27":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           rename-threshold=<n>                                                                                                        ",{}]],"30":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           subtree[=<path>]                                                                                                            ",{}]],"33":[[" Manual page git-merge(1) line 336 (press h for help or q to quit)                                                                     ",{}]]}}],[0.100802,{"lines":{"0":[["               unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged              ",{}]],"1":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"4":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"5":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"8":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"9":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"10":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"15":[["                   version is used;                                                                                                    ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           renormalize                                                                                                                 ",{}]],"20":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"21":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"22":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"23":[["               for details.                                                                                                            ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           no-renormalize                                                                                                              ",{}]],"26":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           rename-threshold=<n>                                                                                                        ",{}]],"29":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           subtree[=<path>]                                                                                                            ",{}]],"32":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"33":[[" Manual page git-merge(1) line 337 (press h for help or q to quit)                                                                     ",{}]]}}],[0.110663,{"lines":{"0":[["               have diverged wildly. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--patience",{"bold":true}],[".                                                                   ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"3":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"4":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"7":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"8":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"9":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"14":[["                   version is used;                                                                                                    ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           renormalize                                                                                                                 ",{}]],"19":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"20":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"21":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"22":[["               for details.                                                                                                            ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           no-renormalize                                                                                                              ",{}]],"25":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           rename-threshold=<n>                                                                                                        ",{}]],"28":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           subtree[=<path>]                                                                                                            ",{}]],"31":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"32":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"33":[[" Manual page git-merge(1) line 338 (press h for help or q to quit)                                                                     ",{}]]}}],[0.170733,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"2":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"3":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"6":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"7":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"8":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"13":[["                   version is used;                                                                                                    ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           renormalize                                                                                                                 ",{}]],"18":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"19":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"20":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"21":[["               for details.                                                                                                            ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           no-renormalize                                                                                                              ",{}]],"24":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           rename-threshold=<n>                                                                                                        ",{}]],"27":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           subtree[=<path>]                                                                                                            ",{}]],"30":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"31":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"32":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"33":[[" Manual page git-merge(1) line 339 (press h for help or q to quit)                                                                     ",{}]]}}],[0.153842,{"lines":{"0":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"1":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"2":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"5":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"6":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"7":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"12":[["                   version is used;                                                                                                    ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           renormalize                                                                                                                 ",{}]],"17":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"18":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"19":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"20":[["               for details.                                                                                                            ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           no-renormalize                                                                                                              ",{}]],"23":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           rename-threshold=<n>                                                                                                        ",{}]],"26":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           subtree[=<path>]                                                                                                            ",{}]],"29":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"30":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"31":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 340 (press h for help or q to quit)                                                                     ",{}]]}}],[0.180797,{"lines":{"0":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"1":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"4":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"5":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"6":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"11":[["                   version is used;                                                                                                    ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           renormalize                                                                                                                 ",{}]],"16":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"17":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"18":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"19":[["               for details.                                                                                                            ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           no-renormalize                                                                                                              ",{}]],"22":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           rename-threshold=<n>                                                                                                        ",{}]],"25":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           subtree[=<path>]                                                                                                            ",{}]],"28":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"29":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"30":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       octopus                                                                                                                         ",{}]],"33":[[" Manual page git-merge(1) line 341 (press h for help or q to quit)                                                                     ",{}]]}}],[0.486692,{"lines":{"0":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"3":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"4":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"5":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"10":[["                   version is used;                                                                                                    ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           renormalize                                                                                                                 ",{}]],"15":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"16":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"17":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"18":[["               for details.                                                                                                            ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           no-renormalize                                                                                                              ",{}]],"21":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           rename-threshold=<n>                                                                                                        ",{}]],"24":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           subtree[=<path>]                                                                                                            ",{}]],"27":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"28":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"29":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       octopus                                                                                                                         ",{}]],"32":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"33":[[" Manual page git-merge(1) line 342 (press h for help or q to quit)                                                                     ",{}]]}}],[0.118225,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"2":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"3":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"4":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"9":[["                   version is used;                                                                                                    ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           renormalize                                                                                                                 ",{}]],"14":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"15":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"16":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"17":[["               for details.                                                                                                            ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           no-renormalize                                                                                                              ",{}]],"20":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           rename-threshold=<n>                                                                                                        ",{}]],"23":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           subtree[=<path>]                                                                                                            ",{}]],"26":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"27":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"28":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       octopus                                                                                                                         ",{}]],"31":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"32":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"33":[[" Manual page git-merge(1) line 343 (press h for help or q to quit)                                                                     ",{}]]}}],[0.135343,{"lines":{"0":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"1":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"2":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"3":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"8":[["                   version is used;                                                                                                    ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           renormalize                                                                                                                 ",{}]],"13":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"14":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"15":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"16":[["               for details.                                                                                                            ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           no-renormalize                                                                                                              ",{}]],"19":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           rename-threshold=<n>                                                                                                        ",{}]],"22":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           subtree[=<path>]                                                                                                            ",{}]],"25":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"26":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"27":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       octopus                                                                                                                         ",{}]],"30":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"31":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"32":[["           pulling or merging more than one branch.                                                                                    ",{}]],"33":[[" Manual page git-merge(1) line 344 (press h for help or q to quit)                                                                     ",{}]]}}],[0.113445,{"lines":{"0":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"1":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"2":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"7":[["                   version is used;                                                                                                    ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           renormalize                                                                                                                 ",{}]],"12":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"13":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"14":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"15":[["               for details.                                                                                                            ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           no-renormalize                                                                                                              ",{}]],"18":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           rename-threshold=<n>                                                                                                        ",{}]],"21":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           subtree[=<path>]                                                                                                            ",{}]],"24":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"25":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"26":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       octopus                                                                                                                         ",{}]],"29":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"30":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"31":[["           pulling or merging more than one branch.                                                                                    ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 345 (press h for help or q to quit)                                                                     ",{}]]}}],[0.136166,{"lines":{"0":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"1":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"6":[["                   version is used;                                                                                                    ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           renormalize                                                                                                                 ",{}]],"11":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"12":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"13":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"14":[["               for details.                                                                                                            ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           no-renormalize                                                                                                              ",{}]],"17":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           rename-threshold=<n>                                                                                                        ",{}]],"20":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           subtree[=<path>]                                                                                                            ",{}]],"23":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"24":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"25":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       octopus                                                                                                                         ",{}]],"28":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"29":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"30":[["           pulling or merging more than one branch.                                                                                    ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       ours                                                                                                                            ",{}]],"33":[[" Manual page git-merge(1) line 346 (press h for help or q to quit)                                                                     ",{}]]}}],[0.150371,{"lines":{"0":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"5":[["                   version is used;                                                                                                    ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           renormalize                                                                                                                 ",{}]],"10":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"11":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"12":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"13":[["               for details.                                                                                                            ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           no-renormalize                                                                                                              ",{}]],"16":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           rename-threshold=<n>                                                                                                        ",{}]],"19":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           subtree[=<path>]                                                                                                            ",{}]],"22":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"23":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"24":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       octopus                                                                                                                         ",{}]],"27":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"28":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"29":[["           pulling or merging more than one branch.                                                                                    ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       ours                                                                                                                            ",{}]],"32":[["           This resolves any number of heads, but the resulting tree of the merge is always that of the current branch                 ",{}]],"33":[[" Manual page git-merge(1) line 347 (press h for help or q to quit)                                                                     ",{}]]}}],[0.152138,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"4":[["                   version is used;                                                                                                    ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           renormalize                                                                                                                 ",{}]],"9":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"10":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"11":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"12":[["               for details.                                                                                                            ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           no-renormalize                                                                                                              ",{}]],"15":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           rename-threshold=<n>                                                                                                        ",{}]],"18":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           subtree[=<path>]                                                                                                            ",{}]],"21":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"22":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"23":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       octopus                                                                                                                         ",{}]],"26":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"27":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"28":[["           pulling or merging more than one branch.                                                                                    ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       ours                                                                                                                            ",{}]],"31":[["           This resolves any number of heads, but the resulting tree of the merge is always that of the current branch                 ",{}]],"32":[["           head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old                     ",{}]],"33":[[" Manual page git-merge(1) line 348 (press h for help or q to quit)                                                                     ",{}]]}}],[0.26162,{"lines":{"0":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"3":[["                   version is used;                                                                                                    ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           renormalize                                                                                                                 ",{}]],"8":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"9":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"10":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"11":[["               for details.                                                                                                            ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           no-renormalize                                                                                                              ",{}]],"14":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           rename-threshold=<n>                                                                                                        ",{}]],"17":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           subtree[=<path>]                                                                                                            ",{}]],"20":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"21":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"22":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       octopus                                                                                                                         ",{}]],"25":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"26":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"27":[["           pulling or merging more than one branch.                                                                                    ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       ours                                                                                                                            ",{}]],"30":[["           This resolves any number of heads, but the resulting tree of the merge is always that of the current branch                 ",{}]],"31":[["           head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old                     ",{}]],"32":[["           development history of side branches. Note that this is different from the -Xours option to the ",{}],["recursive",{"underline":true}],[" merge             ",{}]],"33":[[" Manual page git-merge(1) line 349 (press h for help or q to quit)                                                                     ",{}]]}}],[0.193916,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"2":[["                   version is used;                                                                                                    ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           renormalize                                                                                                                 ",{}]],"7":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"8":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"9":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"10":[["               for details.                                                                                                            ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           no-renormalize                                                                                                              ",{}]],"13":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           rename-threshold=<n>                                                                                                        ",{}]],"16":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           subtree[=<path>]                                                                                                            ",{}]],"19":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"20":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"21":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       octopus                                                                                                                         ",{}]],"24":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"25":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"26":[["           pulling or merging more than one branch.                                                                                    ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       ours                                                                                                                            ",{}]],"29":[["           This resolves any number of heads, but the resulting tree of the merge is always that of the current branch                 ",{}]],"30":[["           head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old                     ",{}]],"31":[["           development history of side branches. Note that this is different from the -Xours option to the ",{}],["recursive",{"underline":true}],[" merge             ",{}]],"32":[["           strategy.                                                                                                                   ",{}]],"33":[[" Manual page git-merge(1) line 350 (press h for help or q to quit)                                                                     ",{}]]}}],[0.170959,{"lines":{"0":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"1":[["                   version is used;                                                                                                    ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           renormalize                                                                                                                 ",{}]],"6":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"7":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"8":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"9":[["               for details.                                                                                                            ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           no-renormalize                                                                                                              ",{}]],"12":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           rename-threshold=<n>                                                                                                        ",{}]],"15":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           subtree[=<path>]                                                                                                            ",{}]],"18":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"19":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"20":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       octopus                                                                                                                         ",{}]],"23":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"24":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"25":[["           pulling or merging more than one branch.                                                                                    ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       ours                                                                                                                            ",{}]],"28":[["           This resolves any number of heads, but the resulting tree of the merge is always that of the current branch                 ",{}]],"29":[["           head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old                     ",{}]],"30":[["           development history of side branches. Note that this is different from the -Xours option to the ",{}],["recursive",{"underline":true}],[" merge             ",{}]],"31":[["           strategy.                                                                                                                   ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 351 (press h for help or q to quit)                                                                     ",{}]]}}],[0.150743,{"lines":{"0":[["                   version is used;                                                                                                    ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           renormalize                                                                                                                 ",{}]],"5":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"6":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"7":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"8":[["               for details.                                                                                                            ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           no-renormalize                                                                                                              ",{}]],"11":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           rename-threshold=<n>                                                                                                        ",{}]],"14":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           subtree[=<path>]                                                                                                            ",{}]],"17":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"18":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"19":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       octopus                                                                                                                         ",{}]],"22":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"23":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"24":[["           pulling or merging more than one branch.                                                                                    ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       ours                                                                                                                            ",{}]],"27":[["           This resolves any number of heads, but the resulting tree of the merge is always that of the current branch                 ",{}]],"28":[["           head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old                     ",{}]],"29":[["           development history of side branches. Note that this is different from the -Xours option to the ",{}],["recursive",{"underline":true}],[" merge             ",{}]],"30":[["           strategy.                                                                                                                   ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       subtree                                                                                                                         ",{}]],"33":[[" Manual page git-merge(1) line 352 (press h for help or q to quit)                                                                     ",{}]]}}],[0.155742,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           renormalize                                                                                                                 ",{}]],"4":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"5":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"6":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"7":[["               for details.                                                                                                            ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           no-renormalize                                                                                                              ",{}]],"10":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           rename-threshold=<n>                                                                                                        ",{}]],"13":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           subtree[=<path>]                                                                                                            ",{}]],"16":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"17":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"18":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       octopus                                                                                                                         ",{}]],"21":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"22":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"23":[["           pulling or merging more than one branch.                                                                                    ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       ours                                                                                                                            ",{}]],"26":[["           This resolves any number of heads, but the resulting tree of the merge is always that of the current branch                 ",{}]],"27":[["           head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old                     ",{}]],"28":[["           development history of side branches. Note that this is different from the -Xours option to the ",{}],["recursive",{"underline":true}],[" merge             ",{}]],"29":[["           strategy.                                                                                                                   ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       subtree                                                                                                                         ",{}]],"32":[["           This is a modified recursive strategy. When merging trees A and B, if B corresponds to a subtree of A, B is                 ",{}]],"33":[[" Manual page git-merge(1) line 353 (press h for help or q to quit)                                                                     ",{}]]}}],[0.644598,{"lines":{"0":[["                   version is used;                                                                                                    ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           renormalize                                                                                                                 ",{}]],"5":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"6":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"7":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"8":[["               for details.                                                                                                            ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           no-renormalize                                                                                                              ",{}]],"11":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           rename-threshold=<n>                                                                                                        ",{}]],"14":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           subtree[=<path>]                                                                                                            ",{}]],"17":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"18":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"19":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       octopus                                                                                                                         ",{}]],"22":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"23":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"24":[["           pulling or merging more than one branch.                                                                                    ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       ours                                                                                                                            ",{}]],"27":[["           This resolves any number of heads, but the resulting tree of the merge is always that of the current branch                 ",{}]],"28":[["           head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old                     ",{}]],"29":[["           development history of side branches. Note that this is different from the -Xours option to the ",{}],["recursive",{"underline":true}],[" merge             ",{}]],"30":[["           strategy.                                                                                                                   ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       subtree                                                                                                                         ",{}]],"33":[[" Manual page git-merge(1) line 352 (press h for help or q to quit)                                                                     ",{}]]}}],[0.778525,{"lines":{"0":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"1":[["                   version is used;                                                                                                    ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           renormalize                                                                                                                 ",{}]],"6":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"7":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"8":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"9":[["               for details.                                                                                                            ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           no-renormalize                                                                                                              ",{}]],"12":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           rename-threshold=<n>                                                                                                        ",{}]],"15":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           subtree[=<path>]                                                                                                            ",{}]],"18":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"19":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"20":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       octopus                                                                                                                         ",{}]],"23":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"24":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"25":[["           pulling or merging more than one branch.                                                                                    ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       ours                                                                                                                            ",{}]],"28":[["           This resolves any number of heads, but the resulting tree of the merge is always that of the current branch                 ",{}]],"29":[["           head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old                     ",{}]],"30":[["           development history of side branches. Note that this is different from the -Xours option to the ",{}],["recursive",{"underline":true}],[" merge             ",{}]],"31":[["           strategy.                                                                                                                   ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 351 (press h for help or q to quit)                                                                     ",{}]]}}],[1.265563,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"2":[["                   version is used;                                                                                                    ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           renormalize                                                                                                                 ",{}]],"7":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"8":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"9":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"10":[["               for details.                                                                                                            ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           no-renormalize                                                                                                              ",{}]],"13":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           rename-threshold=<n>                                                                                                        ",{}]],"16":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           subtree[=<path>]                                                                                                            ",{}]],"19":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"20":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"21":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       octopus                                                                                                                         ",{}]],"24":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"25":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"26":[["           pulling or merging more than one branch.                                                                                    ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       ours                                                                                                                            ",{}]],"29":[["           This resolves any number of heads, but the resulting tree of the merge is always that of the current branch                 ",{}]],"30":[["           head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old                     ",{}]],"31":[["           development history of side branches. Note that this is different from the -Xours option to the ",{}],["recursive",{"underline":true}],[" merge             ",{}]],"32":[["           strategy.                                                                                                                   ",{}]],"33":[[" Manual page git-merge(1) line 350 (press h for help or q to quit)                                                                     ",{}]]}}],[0.116295,{"lines":{"0":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"3":[["                   version is used;                                                                                                    ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           renormalize                                                                                                                 ",{}]],"8":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"9":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"10":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"11":[["               for details.                                                                                                            ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           no-renormalize                                                                                                              ",{}]],"14":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           rename-threshold=<n>                                                                                                        ",{}]],"17":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           subtree[=<path>]                                                                                                            ",{}]],"20":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"21":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"22":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       octopus                                                                                                                         ",{}]],"25":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"26":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"27":[["           pulling or merging more than one branch.                                                                                    ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       ours                                                                                                                            ",{}]],"30":[["           This resolves any number of heads, but the resulting tree of the merge is always that of the current branch                 ",{}]],"31":[["           head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old                     ",{}]],"32":[["           development history of side branches. Note that this is different from the -Xours option to the ",{}],["recursive",{"underline":true}],[" merge             ",{}]],"33":[[" Manual page git-merge(1) line 349 (press h for help or q to quit)                                                                     ",{}]]}}],[0.117919,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"4":[["                   version is used;                                                                                                    ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           renormalize                                                                                                                 ",{}]],"9":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"10":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"11":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"12":[["               for details.                                                                                                            ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           no-renormalize                                                                                                              ",{}]],"15":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           rename-threshold=<n>                                                                                                        ",{}]],"18":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           subtree[=<path>]                                                                                                            ",{}]],"21":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"22":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"23":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       octopus                                                                                                                         ",{}]],"26":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"27":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"28":[["           pulling or merging more than one branch.                                                                                    ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       ours                                                                                                                            ",{}]],"31":[["           This resolves any number of heads, but the resulting tree of the merge is always that of the current branch                 ",{}]],"32":[["           head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old                     ",{}]],"33":[[" Manual page git-merge(1) line 348 (press h for help or q to quit)                                                                     ",{}]]}}],[0.089905,{"lines":{"0":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"5":[["                   version is used;                                                                                                    ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           renormalize                                                                                                                 ",{}]],"10":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"11":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"12":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"13":[["               for details.                                                                                                            ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           no-renormalize                                                                                                              ",{}]],"16":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           rename-threshold=<n>                                                                                                        ",{}]],"19":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           subtree[=<path>]                                                                                                            ",{}]],"22":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"23":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"24":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       octopus                                                                                                                         ",{}]],"27":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"28":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"29":[["           pulling or merging more than one branch.                                                                                    ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       ours                                                                                                                            ",{}]],"32":[["           This resolves any number of heads, but the resulting tree of the merge is always that of the current branch                 ",{}]],"33":[[" Manual page git-merge(1) line 347 (press h for help or q to quit)                                                                     ",{}]]}}],[0.131631,{"lines":{"0":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"1":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"6":[["                   version is used;                                                                                                    ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           renormalize                                                                                                                 ",{}]],"11":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"12":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"13":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"14":[["               for details.                                                                                                            ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           no-renormalize                                                                                                              ",{}]],"17":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           rename-threshold=<n>                                                                                                        ",{}]],"20":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           subtree[=<path>]                                                                                                            ",{}]],"23":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"24":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"25":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       octopus                                                                                                                         ",{}]],"28":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"29":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"30":[["           pulling or merging more than one branch.                                                                                    ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       ours                                                                                                                            ",{}]],"33":[[" Manual page git-merge(1) line 346 (press h for help or q to quit)                                                                     ",{}]]}}],[0.255531,{"lines":{"0":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"1":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"2":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"7":[["                   version is used;                                                                                                    ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           renormalize                                                                                                                 ",{}]],"12":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"13":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"14":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"15":[["               for details.                                                                                                            ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           no-renormalize                                                                                                              ",{}]],"18":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           rename-threshold=<n>                                                                                                        ",{}]],"21":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           subtree[=<path>]                                                                                                            ",{}]],"24":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"25":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"26":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       octopus                                                                                                                         ",{}]],"29":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"30":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"31":[["           pulling or merging more than one branch.                                                                                    ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 345 (press h for help or q to quit)                                                                     ",{}]]}}],[0.185856,{"lines":{"0":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"1":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"2":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"3":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"8":[["                   version is used;                                                                                                    ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           renormalize                                                                                                                 ",{}]],"13":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"14":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"15":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"16":[["               for details.                                                                                                            ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           no-renormalize                                                                                                              ",{}]],"19":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           rename-threshold=<n>                                                                                                        ",{}]],"22":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           subtree[=<path>]                                                                                                            ",{}]],"25":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"26":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"27":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       octopus                                                                                                                         ",{}]],"30":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"31":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"32":[["           pulling or merging more than one branch.                                                                                    ",{}]],"33":[[" Manual page git-merge(1) line 344 (press h for help or q to quit)                                                                     ",{}]]}}],[0.183693,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"2":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"3":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"4":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"9":[["                   version is used;                                                                                                    ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           renormalize                                                                                                                 ",{}]],"14":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"15":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"16":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"17":[["               for details.                                                                                                            ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           no-renormalize                                                                                                              ",{}]],"20":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           rename-threshold=<n>                                                                                                        ",{}]],"23":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           subtree[=<path>]                                                                                                            ",{}]],"26":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"27":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"28":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       octopus                                                                                                                         ",{}]],"31":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"32":[["           is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when             ",{}]],"33":[[" Manual page git-merge(1) line 343 (press h for help or q to quit)                                                                     ",{}]]}}],[0.153161,{"lines":{"0":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"3":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"4":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"5":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"10":[["                   version is used;                                                                                                    ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           renormalize                                                                                                                 ",{}]],"15":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"16":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"17":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"18":[["               for details.                                                                                                            ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           no-renormalize                                                                                                              ",{}]],"21":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           rename-threshold=<n>                                                                                                        ",{}]],"24":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           subtree[=<path>]                                                                                                            ",{}]],"27":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"28":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"29":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       octopus                                                                                                                         ",{}]],"32":[["           This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It            ",{}]],"33":[[" Manual page git-merge(1) line 342 (press h for help or q to quit)                                                                     ",{}]]}}],[0.139998,{"lines":{"0":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"1":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"4":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"5":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"6":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"11":[["                   version is used;                                                                                                    ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           renormalize                                                                                                                 ",{}]],"16":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"17":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"18":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"19":[["               for details.                                                                                                            ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           no-renormalize                                                                                                              ",{}]],"22":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           rename-threshold=<n>                                                                                                        ",{}]],"25":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           subtree[=<path>]                                                                                                            ",{}]],"28":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"29":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"30":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       octopus                                                                                                                         ",{}]],"33":[[" Manual page git-merge(1) line 341 (press h for help or q to quit)                                                                     ",{}]]}}],[0.341625,{"lines":{"0":[["           diff-algorithm=[patience|minimal|histogram|myers]                                                                           ",{}]],"1":[["               Tells ",{}],["merge-recursive",{"underline":true}],[" to use a different diff algorithm, which can help avoid mismerges that occur due to               ",{}]],"2":[["               unimportant matching lines (such as braces from distinct functions). See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["--diff-algorithm",{"bold":true}],[".              ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           ignore-space-change, ignore-all-space, ignore-space-at-eol                                                                  ",{}]],"5":[["               Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge.               ",{}]],"6":[["               Whitespace changes mixed with other changes to a line are not ignored. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-b",{"bold":true}],[", ",{}],["-w",{"bold":true}],[", and                  ",{}]],"7":[["               ",{}],["--ignore-space-at-eol",{"bold":true}],[".                                                                                                  ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["               ·   If ",{}],["their",{"underline":true}],[" version only introduces whitespace changes to a line, ",{}],["our",{"underline":true}],[" version is used;                                 ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["               ·   If ",{}],["our",{"underline":true}],[" version introduces whitespace changes but ",{}],["their",{"underline":true}],[" version includes a substantial change, ",{}],["their",{"underline":true}],["                 ",{}]],"12":[["                   version is used;                                                                                                    ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["               ·   Otherwise, the merge proceeds in the usual way.                                                                     ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           renormalize                                                                                                                 ",{}]],"17":[["               This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge.              ",{}]],"18":[["               This option is meant to be used when merging branches with different clean filters or end-of-line                       ",{}]],"19":[["               normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in ",{}],["gitattributes",{"bold":true}],["(5)              ",{}]],"20":[["               for details.                                                                                                            ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           no-renormalize                                                                                                              ",{}]],"23":[["               Disables the ",{}],["renormalize",{"bold":true}],[" option. This overrides the ",{}],["merge.renormalize",{"bold":true}],[" configuration variable.                           ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           rename-threshold=<n>                                                                                                        ",{}]],"26":[["               Controls the similarity threshold used for rename detection. See also ",{}],["git-diff",{"bold":true}],["(1)",{}],["-M",{"bold":true}],[".                                    ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           subtree[=<path>]                                                                                                            ",{}]],"29":[["               This option is a more advanced form of ",{}],["subtree",{"underline":true}],[" strategy, where the strategy makes a guess on how two trees              ",{}]],"30":[["               must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped             ",{}]],"31":[["               from the beginning) to make the shape of two trees to match.                                                            ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-merge(1) line 340 (press h for help or q to quit)                                                                     ",{}]]}}],[8.218593,{"lines":{"0":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"1":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"2":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"3":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"4":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"5":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"6":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"7":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"8":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"9":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"10":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"11":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"12":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"13":[["        end                                                                                                                            ",{}]],"14":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"15":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"16":[[" end                                                                                                                                   ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[[" def main()                                                                                                                            ",{}]],"19":[["        # Our job with fibonacci is to print the sum of the fibonacci sequence up to                                                   ",{}]],"20":[["        # the tenth item.                                                                                                              ",{}]],"21":[["benjica@",{}],["gunter",{"underline":true}],["> git merge iterative_refactor                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"22":[["Auto-merging fib.rb                                                                                                                    ",{}]],"23":[["CONFLICT (content): Merge conflict in fib.rb                                                                                           ",{}]],"24":[["Automatic merge failed; fix conflicts and then commit the result.                                                                      ",{}]],"25":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"26":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"27":[["benjica@",{}],["gunter",{"underline":true}],["> git merge --abort                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"28":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"29":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"30":[["On branch master                                                                                                                       ",{}]],"31":[["nothing to commit, working directory clean                                                                                             ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.001309,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[3.864051,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":29}}],[0.256518,{"lines":{"0":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"1":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"2":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"3":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"4":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"5":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"6":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"7":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"8":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"9":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"10":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"11":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"12":[["        end                                                                                                                            ",{}]],"13":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"14":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"15":[[" end                                                                                                                                   ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[[" def main()                                                                                                                            ",{}]],"18":[["        # Our job with fibonacci is to print the sum of the fibonacci sequence up to                                                   ",{}]],"19":[["        # the tenth item.                                                                                                              ",{}]],"20":[["benjica@",{}],["gunter",{"underline":true}],["> git merge iterative_refactor                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"21":[["Auto-merging fib.rb                                                                                                                    ",{}]],"22":[["CONFLICT (content): Merge conflict in fib.rb                                                                                           ",{}]],"23":[["Automatic merge failed; fix conflicts and then commit the result.                                                                      ",{}]],"24":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"25":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge --abort                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"27":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"28":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"29":[["On branch master                                                                                                                       ",{}]],"30":[["nothing to commit, working directory clean                                                                                             ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.02827,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["                                                                                                                                       ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["                                                                                                                                       ",{}]]}}],[0.021934,{"lines":{"16":[["GIT-MERGE(1)                                             Git Manual                                            GIT-MERGE(1)            ",{}]],"18":[["NAME",{"bold":true}],["                                                                                                                                   ",{}]],"19":[["       git-merge - Join two or more development histories together                                                                     ",{}]],"21":[["SYNOPSIS",{"bold":true}],["                                                                                                                               ",{}]],"22":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]                                                                  ",{}]],"23":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"24":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"25":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"26":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"28":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"29":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"30":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"31":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"33":[["       Assume the following history exists and the current branch is \"",{}],["mas",{"bold":true}],["                                                              ",{}]]},"cursor":{"x":73}}],[0.000122,{"lines":{"0":[["GIT-MERGE(1)                                             Git Manual                                            GIT-MERGE(1)            ",{}]],"2":[["NAME",{"bold":true}],["                                                                                                                                   ",{}]],"3":[["       git-merge - Join two or more development histories together                                                                     ",{}]],"5":[["SYNOPSIS",{"bold":true}],["                                                                                                                               ",{}]],"6":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]                                                                  ",{}]],"7":[["               [-s <strategy>] [-X <strategy-option>] [-S[<key-id>]]                                                                   ",{}]],"8":[["               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]                                                                     ",{}]],"9":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" <msg> HEAD <commit>...                                                                                                ",{}]],"10":[["       ",{}],["git",{"underline":true}],[" ",{}],["merge",{"underline":true}],[" --abort                                                                                                               ",{}]],"12":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"13":[["       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into              ",{}]],"14":[["       the current branch. This command is used by ",{}],["git",{"underline":true}],[" ",{}],["pull",{"underline":true}],[" to incorporate changes from another repository and can be used             ",{}]],"15":[["       by hand to merge changes from one branch into another.                                                                          ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       Assume the following history exists and the current branch is \"",{}],["master",{"bold":true}],["\":                                                         ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["                     A---B---C topic                                                                                                   ",{}]],"20":[["                    /                                                                                                                  ",{}]],"21":[["               D---E---F---G master                                                                                                    ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       Then \"",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["topic",{"bold":true}],["\" will replay the changes made on the ",{}],["topic",{"bold":true}],[" branch since it diverged from ",{}],["master",{"bold":true}],[" (i.e., ",{}],["E",{"bold":true}],[")                 ",{}]],"24":[["       until its current commit (",{}],["C",{"bold":true}],[") on top of ",{}],["master",{"bold":true}],[", and record the result in a new commit along with the names of the two            ",{}]],"25":[["       parent commits and a log message from the user describing the changes.                                                          ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["                     A---B---C topic                                                                                                   ",{}]],"28":[["                    /         \\                                                                                                        ",{}]],"29":[["               D---E---F---G---H master                                                                                                ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       The second syntax (<msg> ",{}],["HEAD",{"bold":true}],[" <commit>...) is supported for historical reasons. Do not use it from the command line             ",{}]],"32":[["       or in new scripts. It is the same as ",{}],["git",{"bold":true}],[" ",{}],["merge",{"bold":true}],[" ",{}],["-m",{"bold":true}],[" ",{}],["<msg>",{"bold":true}],[" ",{}],["<commit>...",{"bold":true}],[".                                                            ",{}]],"33":[[" Manual page git-merge(1) line 1 (press h for help or q to quit)                                                                       ",{}]]},"cursor":{"x":64}}],[23.939855,{"lines":{"0":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"1":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"2":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"3":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"4":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"5":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"6":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"7":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"8":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"9":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"10":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"11":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"12":[["        end                                                                                                                            ",{}]],"13":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"14":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"15":[[" end                                                                                                                                   ",{}]],"17":[[" def main()                                                                                                                            ",{}]],"18":[["        # Our job with fibonacci is to print the sum of the fibonacci sequence up to                                                   ",{}]],"19":[["        # the tenth item.                                                                                                              ",{}]],"20":[["benjica@",{}],["gunter",{"underline":true}],["> git merge iterative_refactor                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"21":[["Auto-merging fib.rb                                                                                                                    ",{}]],"22":[["CONFLICT (content): Merge conflict in fib.rb                                                                                           ",{}]],"23":[["Automatic merge failed; fix conflicts and then commit the result.                                                                      ",{}]],"24":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"25":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge --abort                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"27":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"28":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"29":[["On branch master                                                                                                                       ",{}]],"30":[["nothing to commit, working directory clean                                                                                             ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.001621,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[6.182072,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.076059,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.069937,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.071699,{"cursor":{"x":20}}],[0.116629,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git b                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.168503,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git br                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.043183,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git bra                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.133303,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git bran                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.126271,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git branc                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.08344799999999999,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git branch                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.144263,{"lines":{"0":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"1":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"2":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"3":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"4":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"5":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"6":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"7":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"8":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"9":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"10":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"11":[["        end                                                                                                                            ",{}]],"12":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"13":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"14":[[" end                                                                                                                                   ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[[" def main()                                                                                                                            ",{}]],"17":[["        # Our job with fibonacci is to print the sum of the fibonacci sequence up to                                                   ",{}]],"18":[["        # the tenth item.                                                                                                              ",{}]],"19":[["benjica@",{}],["gunter",{"underline":true}],["> git merge iterative_refactor                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"20":[["Auto-merging fib.rb                                                                                                                    ",{}]],"21":[["CONFLICT (content): Merge conflict in fib.rb                                                                                           ",{}]],"22":[["Automatic merge failed; fix conflicts and then commit the result.                                                                      ",{}]],"23":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"24":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"25":[["benjica@",{}],["gunter",{"underline":true}],["> git merge --abort                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"26":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"27":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"28":[["On branch master                                                                                                                       ",{}]],"29":[["nothing to commit, working directory clean                                                                                             ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> git branch                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.001564,{"lines":{"0":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"1":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"2":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"3":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"4":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"5":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"6":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"7":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"8":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"9":[["        end                                                                                                                            ",{}]],"10":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"11":[["+",{"fg":2}],["       ",{}],["return list",{"fg":2}],["                                                                                                                    ",{}]],"12":[[" end                                                                                                                                   ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[[" def main()                                                                                                                            ",{}]],"15":[["        # Our job with fibonacci is to print the sum of the fibonacci sequence up to                                                   ",{}]],"16":[["        # the tenth item.                                                                                                              ",{}]],"17":[["benjica@",{}],["gunter",{"underline":true}],["> git merge iterative_refactor                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"18":[["Auto-merging fib.rb                                                                                                                    ",{}]],"19":[["CONFLICT (content): Merge conflict in fib.rb                                                                                           ",{}]],"20":[["Automatic merge failed; fix conflicts and then commit the result.                                                                      ",{}]],"21":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"22":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"23":[["benjica@",{}],["gunter",{"underline":true}],["> git merge --abort                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"24":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"25":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"26":[["On branch master                                                                                                                       ",{}]],"27":[["nothing to commit, working directory clean                                                                                             ",{}]],"28":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"29":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> git branch                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["  iterative_refactor                                                                                                                   ",{}]],"32":[["* ",{}],["master",{"fg":2}],["                                                                                                                               ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[1.408099,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.069081,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.09383900000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.07548199999999999,{"cursor":{"x":20}}],[0.127064,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git d                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.09023299999999999,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git di                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.077102,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git dif                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.150162,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.102113,{"cursor":{"x":25}}],[1.075355,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff m                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.142115,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff ma                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.268242,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff master",{}],["..",{"bold":true}],["                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":33}}],[0.575904,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff master..i                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":34}}],[0.153733,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff master..iterative_refactor",{}],[" ",{"bold":true}],["                                                        ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":52}}],[0.393234,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff master..iterative_refactor                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":51}}],[0.002657000000000001,{"lines":{"0":[["diff --git a/fib.rb b/fib.rb",{"bold":true}],["                                                                                                           ",{}]],"1":[["index 10cdcc1..8420878 100644",{"bold":true}],["                                                                                                          ",{}]],"2":[["--- a/fib.rb",{"bold":true}],["                                                                                                                           ",{}]],"3":[["+++ b/fib.rb",{"bold":true}],["                                                                                                                           ",{}]],"4":[["@@ -3,27 +3,39 @@",{"fg":6}],[" def sum(list)                                                                                                        ",{}]],"5":[["        return list.reduce(:+)                                                                                                         ",{}]],"6":[[" end                                                                                                                                   ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["-def r_fibonacci(n)",{"fg":1}],["                                                                                                                    ",{}]],"9":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"10":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"11":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"12":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"13":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"14":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"15":[["        if n <= 1                                                                                                                      ",{}]],"16":[["                return 1                                                                                                               ",{}]],"17":[["        end                                                                                                                            ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"20":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"21":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"22":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"23":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"24":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"27":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"28":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"29":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"30":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"31":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"32":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"33":[[":                                                                                                                                      ",{}]]},"cursor":{"x":1}}],[0.70872,{"lines":{"33":[[" ESC                                                                                                                                   ",{}]]},"cursor":{"x":4}}],[3.5e-05,{"lines":{"0":[["index 10cdcc1..8420878 100644",{"bold":true}],["                                                                                                          ",{}]],"1":[["--- a/fib.rb",{"bold":true}],["                                                                                                                           ",{}]],"2":[["+++ b/fib.rb",{"bold":true}],["                                                                                                                           ",{}]],"3":[["@@ -3,27 +3,39 @@",{"fg":6}],[" def sum(list)                                                                                                        ",{}]],"4":[["        return list.reduce(:+)                                                                                                         ",{}]],"5":[[" end                                                                                                                                   ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["-def r_fibonacci(n)",{"fg":1}],["                                                                                                                    ",{}]],"8":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"9":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"10":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"11":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"12":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"13":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"14":[["        if n <= 1                                                                                                                      ",{}]],"15":[["                return 1                                                                                                               ",{}]],"16":[["        end                                                                                                                            ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"19":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"20":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"21":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"22":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"23":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"26":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"27":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"28":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"29":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"30":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"31":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"32":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"33":[[":                                                                                                                                      ",{}]]},"cursor":{"x":1}}],[0.205975,{"lines":{"33":[[" ESC                                                                                                                                   ",{}]]},"cursor":{"x":4}}],[3.4e-05,{"lines":{"0":[["--- a/fib.rb",{"bold":true}],["                                                                                                                           ",{}]],"1":[["+++ b/fib.rb",{"bold":true}],["                                                                                                                           ",{}]],"2":[["@@ -3,27 +3,39 @@",{"fg":6}],[" def sum(list)                                                                                                        ",{}]],"3":[["        return list.reduce(:+)                                                                                                         ",{}]],"4":[[" end                                                                                                                                   ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["-def r_fibonacci(n)",{"fg":1}],["                                                                                                                    ",{}]],"7":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"8":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"9":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"10":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"11":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"12":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"13":[["        if n <= 1                                                                                                                      ",{}]],"14":[["                return 1                                                                                                               ",{}]],"15":[["        end                                                                                                                            ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"18":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"19":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"20":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"21":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"22":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"25":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"26":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"27":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"28":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"29":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"30":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"31":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"32":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"33":[[":                                                                                                                                      ",{}]]},"cursor":{"x":1}}],[0.160681,{"lines":{"33":[[" ESC                                                                                                                                   ",{}]]},"cursor":{"x":4}}],[3.7e-05,{"lines":{"0":[["+++ b/fib.rb",{"bold":true}],["                                                                                                                           ",{}]],"1":[["@@ -3,27 +3,39 @@",{"fg":6}],[" def sum(list)                                                                                                        ",{}]],"2":[["        return list.reduce(:+)                                                                                                         ",{}]],"3":[[" end                                                                                                                                   ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["-def r_fibonacci(n)",{"fg":1}],["                                                                                                                    ",{}]],"6":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"7":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"8":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"9":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"10":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"11":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"12":[["        if n <= 1                                                                                                                      ",{}]],"13":[["                return 1                                                                                                               ",{}]],"14":[["        end                                                                                                                            ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"17":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"18":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"19":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"20":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"21":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"24":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"25":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"26":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"27":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"28":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"29":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"30":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"31":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"32":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"33":[[":                                                                                                                                      ",{}]]},"cursor":{"x":1}}],[0.122562,{"lines":{"33":[[" ESC                                                                                                                                   ",{}]]},"cursor":{"x":4}}],[3.4e-05,{"lines":{"0":[["@@ -3,27 +3,39 @@",{"fg":6}],[" def sum(list)                                                                                                        ",{}]],"1":[["        return list.reduce(:+)                                                                                                         ",{}]],"2":[[" end                                                                                                                                   ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["-def r_fibonacci(n)",{"fg":1}],["                                                                                                                    ",{}]],"5":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"6":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"7":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"8":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"9":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"10":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"11":[["        if n <= 1                                                                                                                      ",{}]],"12":[["                return 1                                                                                                               ",{}]],"13":[["        end                                                                                                                            ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"16":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"17":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"18":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"19":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"20":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"23":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"24":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"25":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"26":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"27":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"28":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"29":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"30":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"31":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"32":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"33":[[":                                                                                                                                      ",{}]]},"cursor":{"x":1}}],[0.140659,{"lines":{"33":[[" ESC                                                                                                                                   ",{}]]},"cursor":{"x":4}}],[3.5e-05,{"lines":{"0":[["        return list.reduce(:+)                                                                                                         ",{}]],"1":[[" end                                                                                                                                   ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["-def r_fibonacci(n)",{"fg":1}],["                                                                                                                    ",{}]],"4":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"5":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"6":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"7":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"8":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"9":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"10":[["        if n <= 1                                                                                                                      ",{}]],"11":[["                return 1                                                                                                               ",{}]],"12":[["        end                                                                                                                            ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"15":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"16":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"17":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"18":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"19":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"22":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"23":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"24":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"25":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"26":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"27":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"28":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"29":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"30":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"31":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"32":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"33":[[":                                                                                                                                      ",{}]]},"cursor":{"x":1}}],[0.100866,{"lines":{"33":[[" ESC                                                                                                                                   ",{}]]},"cursor":{"x":4}}],[2.5e-05,{"lines":{"0":[[" end                                                                                                                                   ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["-def r_fibonacci(n)",{"fg":1}],["                                                                                                                    ",{}]],"3":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"4":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"5":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"6":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"7":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"8":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"9":[["        if n <= 1                                                                                                                      ",{}]],"10":[["                return 1                                                                                                               ",{}]],"11":[["        end                                                                                                                            ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"14":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"15":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"16":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"17":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"18":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"21":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"22":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"23":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"24":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"25":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"26":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"27":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"28":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"29":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"30":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"31":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"32":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"33":[[":                                                                                                                                      ",{}]]},"cursor":{"x":1}}],[0.114908,{"lines":{"33":[[" ESC                                                                                                                                   ",{}]]},"cursor":{"x":4}}],[4e-05,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["-def r_fibonacci(n)",{"fg":1}],["                                                                                                                    ",{}]],"2":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"3":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"4":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"5":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"6":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"7":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"8":[["        if n <= 1                                                                                                                      ",{}]],"9":[["                return 1                                                                                                               ",{}]],"10":[["        end                                                                                                                            ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"13":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"14":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"15":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"16":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"17":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"20":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"21":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"22":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"23":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"24":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"25":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"26":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"27":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"28":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"29":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"30":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"31":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"32":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"33":[[":                                                                                                                                      ",{}]]},"cursor":{"x":1}}],[0.115842,{"lines":{"0":[["-def r_fibonacci(n)",{"fg":1}],["                                                                                                                    ",{}]],"1":[["-       # return a list of the fibonacci sequence",{"fg":1}],["                                                                                      ",{}]],"2":[["-       ",{"fg":1}],["                                                                                                                               ",{}]],"3":[["+def i_fibonacci_list(n)",{"fg":2}],["                                                                                                               ",{}]],"4":[["+",{"fg":2}],["       ",{}],["# Iterative implementation of fibonacci",{"fg":2}],["                                                                                        ",{}]],"5":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"6":[["+",{"fg":2}],["       ",{}],["# Define base case",{"fg":2}],["                                                                                                             ",{}]],"7":[["        if n <= 1                                                                                                                      ",{}]],"8":[["                return 1                                                                                                               ",{}]],"9":[["        end                                                                                                                            ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"12":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"13":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"14":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"15":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"16":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"19":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"20":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"21":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"22":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"23":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"24":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"25":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"26":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"27":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"28":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"29":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"30":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"31":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"32":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]]}}],[0.137871,{"lines":{"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.0006890000000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[3.672397,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.19821,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.227976,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.322205,{"cursor":{"x":20}}],[0.587069,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git m                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.08136400000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git me                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.181121,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git meg                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.178612,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git mege                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.075387,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git meger                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.338265,{}],[0.389464,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git mege                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.137785,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git meg                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.105488,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git me                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.219774,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.479969,{}],[9.3e-05,{"lines":{"0":[["        if n <= 1                                                                                                                      ",{}]],"1":[["                return 1                                                                                                               ",{}]],"2":[["        end                                                                                                                            ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"5":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"6":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"7":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"8":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"9":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"11":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"12":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"13":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"14":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"15":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"16":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"17":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"18":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"19":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"20":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"21":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"22":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"23":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"24":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"25":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"27":[["merge  -- join two or more development histories together                                                                              ",{}]],"28":[["merge-base  -- find as good a common ancestor as possible for a merge                                                                  ",{}]],"29":[["merge-file   -- run a three-way file merge                                                                                             ",{}]],"30":[["merge-index  -- run merge for files needing merging                                                                                    ",{}]],"31":[["merge-one-file  -- standard helper-program to use with git merge-index                                                                 ",{}]],"32":[["merge-tree  -- show three-way merge without touching index                                                                             ",{}]],"33":[["mergetool  -- run merge conflict resolution tools to resolve merge conflicts                                                           ",{}]]},"cursor":{"y":26}}],[0.438245,{"cursor":{"x":26}}],[1.652417,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.244026,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":28}}],[0.224179,{"cursor":{"x":29}}],[0.827562,{}],[4e-06,{"lines":{"27":[["                                                                                                                                       ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[["                                                                                                                                       ",{}]]}}],[0.410342,{}],[4.62484,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s r                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":30}}],[0.241942,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s re                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":31}}],[0.201121,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s rec                                                                            ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":32}}],[0.192554,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recu                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":33}}],[0.164434,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recur                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":34}}],[0.130211,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recurs                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":35}}],[0.093421,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursi                                                                        ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":36}}],[0.281832,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursio                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":37}}],[0.20258,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":38}}],[0.133613,{"cursor":{"x":39}}],[0.647895,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":40}}],[0.471819,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":41}}],[0.121764,{"cursor":{"x":42}}],[1.064131,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X t                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":43}}],[0.07988199999999999,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X th                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":44}}],[0.195328,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thi                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":45}}],[0.153495,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thie                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":46}}],[0.06307500000000001,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thier                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":47}}],[0.191511,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers                                                            ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":48}}],[9.353895,{"cursor":{"x":49}}],[0.13327,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers i                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":50}}],[0.131741,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers it                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":51}}],[0.115621,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor",{}],[" ",{"bold":true}],["                                        ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":68}}],[164.660056,{"lines":{"26":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":0,"y":27}}],[0.002846999999999999,{"lines":{"27":[["Could not find merge strategy 'recursion'.                                                                                             ",{}]],"28":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"29":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],[">                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":20,"y":29}}],[3.293886,{"lines":{"29":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":71}}],[0.263968,{"cursor":{"x":70}}],[0.112321,{"cursor":{"x":69}}],[0.659555,{"cursor":{"x":68}}],[0.040706,{"cursor":{"x":67}}],[0.040182,{"cursor":{"x":66}}],[0.040246,{"cursor":{"x":65}}],[0.041047,{"cursor":{"x":64}}],[0.039893,{"cursor":{"x":63}}],[0.040435,{"cursor":{"x":62}}],[0.040222,{"cursor":{"x":61}}],[0.040404,{"cursor":{"x":60}}],[0.040376,{"cursor":{"x":59}}],[0.040408,{"cursor":{"x":58}}],[0.039783,{"cursor":{"x":57}}],[0.040117,{"cursor":{"x":56}}],[0.040523,{"cursor":{"x":55}}],[0.040757,{"cursor":{"x":54}}],[0.040211,{"cursor":{"x":53}}],[0.040085,{"cursor":{"x":52}}],[0.040908,{"cursor":{"x":51}}],[0.040757,{"cursor":{"x":50}}],[0.04085,{"cursor":{"x":49}}],[0.039315,{"cursor":{"x":48}}],[0.041104,{"cursor":{"x":47}}],[0.040016,{"cursor":{"x":46}}],[0.040401,{"cursor":{"x":45}}],[0.040313,{"cursor":{"x":44}}],[0.040849,{"cursor":{"x":43}}],[0.187674,{"cursor":{"x":42}}],[0.341188,{"lines":{"29":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursio -X thiers iterative_refactor                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":41}}],[0.148811,{"lines":{"29":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursi -X thiers iterative_refactor                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":40}}],[0.137603,{"lines":{"29":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recurs -X thiers iterative_refactor                                        ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":39}}],[0.146901,{"lines":{"29":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recur -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":38}}],[0.513323,{"lines":{"29":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recurs -X thiers iterative_refactor                                        ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":39}}],[0.093428,{"lines":{"29":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursi -X thiers iterative_refactor                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":40}}],[0.1061,{"lines":{"29":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursiv -X thiers iterative_refactor                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":41}}],[0.10017,{"lines":{"29":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":42}}],[0.192902,{"cursor":{"x":0,"y":30}}],[0.005575999999999999,{"lines":{"30":[["fatal: Unknown option for merge-recursive: -Xthiers                                                                                    ",{}]],"31":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],[">                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22,"y":31}}],[1.903684,{"lines":{"31":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":73}}],[0.331058,{"cursor":{"x":72}}],[0.659963,{"cursor":{"x":71}}],[0.04087,{"cursor":{"x":70}}],[0.04016,{"cursor":{"x":69}}],[0.040754,{"cursor":{"x":68}}],[0.040679,{"cursor":{"x":67}}],[0.040369,{"cursor":{"x":66}}],[0.040577,{"cursor":{"x":65}}],[0.039729,{"cursor":{"x":64}}],[0.040462,{"cursor":{"x":63}}],[0.040318,{"cursor":{"x":62}}],[0.040449,{"cursor":{"x":61}}],[0.040327,{"cursor":{"x":60}}],[0.040376,{"cursor":{"x":59}}],[0.039831,{"cursor":{"x":58}}],[0.040303,{"cursor":{"x":57}}],[0.040637,{"cursor":{"x":56}}],[0.041045,{"cursor":{"x":55}}],[0.041276,{"cursor":{"x":54}}],[0.040121,{"cursor":{"x":53}}],[0.039844,{"cursor":{"x":52}}],[0.040236,{"cursor":{"x":51}}],[0.040469,{"cursor":{"x":50}}],[0.040998,{"cursor":{"x":49}}],[0.040402,{"cursor":{"x":48}}],[0.040666,{"cursor":{"x":47}}],[0.040684,{"cursor":{"x":46}}],[0.040254,{"cursor":{"x":45}}],[0.040298,{"cursor":{"x":44}}],[0.039882,{"cursor":{"x":43}}],[0.040046,{"cursor":{"x":42}}],[0.040219,{"cursor":{"x":41}}],[0.040157,{"cursor":{"x":40}}],[0.040168,{"cursor":{"x":39}}],[0.04018,{"cursor":{"x":38}}],[0.040176,{"cursor":{"x":37}}],[0.039933,{"cursor":{"x":36}}],[0.040688,{"cursor":{"x":35}}],[0.595558,{"lines":{"31":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -srecursive -X thiers iterative_refactor                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":34}}],[0.216613,{"lines":{"31":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":35}}],[0.524494,{"cursor":{"x":36}}],[0.659632,{"cursor":{"x":37}}],[0.040303,{"cursor":{"x":38}}],[0.040403,{"cursor":{"x":39}}],[0.041238,{"cursor":{"x":40}}],[0.040377,{"cursor":{"x":41}}],[0.040476,{"cursor":{"x":42}}],[0.039689,{"cursor":{"x":43}}],[0.039905,{"cursor":{"x":44}}],[0.040158,{"cursor":{"x":45}}],[0.040998,{"cursor":{"x":46}}],[0.040336,{"cursor":{"x":47}}],[0.040758,{"cursor":{"x":48}}],[0.652358,{"lines":{"31":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -Xthiers iterative_refactor                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":47}}],[0.253203,{"lines":{"31":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":48}}],[0.396078,{"cursor":{"x":0,"y":32}}],[0.007613,{"lines":{"0":[["                return 1                                                                                                               ",{}]],"1":[["        end                                                                                                                            ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"4":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"5":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"6":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"7":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"8":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"11":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"12":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"13":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"14":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"15":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"16":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"17":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"18":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"19":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"20":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"21":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"22":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"23":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"24":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"25":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"26":[["Could not find merge strategy 'recursion'.                                                                                             ",{}]],"27":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"28":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"29":[["fatal: Unknown option for merge-recursive: -Xthiers                                                                                    ",{}]],"30":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["Could not find merge strategy '=recursive'.                                                                                            ",{}]],"32":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"33":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],[">                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":20,"y":33}}],[1.501217,{"lines":{"33":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":71}}],[0.198823,{"cursor":{"x":70}}],[0.660892,{"cursor":{"x":69}}],[0.041105,{"cursor":{"x":68}}],[0.040499,{"cursor":{"x":67}}],[0.040333,{"cursor":{"x":66}}],[0.039616,{"cursor":{"x":65}}],[0.040208,{"cursor":{"x":64}}],[0.040203,{"cursor":{"x":63}}],[0.040914,{"cursor":{"x":62}}],[0.040261,{"cursor":{"x":61}}],[0.040334,{"cursor":{"x":60}}],[0.039608,{"cursor":{"x":59}}],[0.040281,{"cursor":{"x":58}}],[0.040463,{"cursor":{"x":57}}],[0.040642,{"cursor":{"x":56}}],[0.040389,{"cursor":{"x":55}}],[0.040266,{"cursor":{"x":54}}],[0.039686,{"cursor":{"x":53}}],[0.040194,{"cursor":{"x":52}}],[0.040214,{"cursor":{"x":51}}],[0.040244,{"cursor":{"x":50}}],[0.040252,{"cursor":{"x":49}}],[0.040626,{"cursor":{"x":48}}],[0.040339,{"cursor":{"x":47}}],[0.040348,{"cursor":{"x":46}}],[0.039996,{"cursor":{"x":45}}],[0.040114,{"cursor":{"x":44}}],[0.040377,{"cursor":{"x":43}}],[0.039987,{"cursor":{"x":42}}],[0.04018,{"cursor":{"x":41}}],[0.040214,{"cursor":{"x":40}}],[0.039887,{"cursor":{"x":39}}],[0.040415,{"cursor":{"x":38}}],[0.040118,{"cursor":{"x":37}}],[0.040265,{"cursor":{"x":36}}],[0.039562,{"cursor":{"x":35}}],[0.040339,{"cursor":{"x":34}}],[0.040196,{"cursor":{"x":33}}],[0.574771,{"lines":{"33":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -srecursive -X=thiers iterative_refactor                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":32}}],[0.15767,{"lines":{"33":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X=thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":33}}],[0.234759,{"lines":{"0":[["        end                                                                                                                            ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"3":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"4":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"5":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"6":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"7":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"10":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"11":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"12":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"13":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"14":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"15":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"16":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"17":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"18":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"19":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"20":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"21":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"22":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"23":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"24":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"25":[["Could not find merge strategy 'recursion'.                                                                                             ",{}]],"26":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"27":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"28":[["fatal: Unknown option for merge-recursive: -Xthiers                                                                                    ",{}]],"29":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"30":[["Could not find merge strategy '=recursive'.                                                                                            ",{}]],"31":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"32":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X=thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.004239,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"2":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"3":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"4":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"5":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"6":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"9":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"10":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"11":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"12":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"13":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"14":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"15":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"16":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"17":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"18":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"19":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"20":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"21":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"22":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"23":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"24":[["Could not find merge strategy 'recursion'.                                                                                             ",{}]],"25":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"26":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"27":[["fatal: Unknown option for merge-recursive: -Xthiers                                                                                    ",{}]],"28":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"29":[["Could not find merge strategy '=recursive'.                                                                                            ",{}]],"30":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"31":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X=thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["fatal: Unknown option for merge-recursive: -X=thiers                                                                                   ",{}]],"33":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],[">                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[1.231781,{"lines":{"33":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":73}}],[0.759023,{"lines":{"33":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]}}],[0.89034,{"lines":{"33":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]}}],[0.286453,{"lines":{"33":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]}}],[0.6757339999999999,{"lines":{"33":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]}}],[0.203208,{"lines":{"33":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]}}],[0.554689,{"cursor":{"x":72}}],[0.661089,{"cursor":{"x":71}}],[0.040079,{"cursor":{"x":70}}],[0.040268,{"cursor":{"x":69}}],[0.039738,{"cursor":{"x":68}}],[0.040083,{"cursor":{"x":67}}],[0.04049,{"cursor":{"x":66}}],[0.040254,{"cursor":{"x":65}}],[0.03989,{"cursor":{"x":64}}],[0.040155,{"cursor":{"x":63}}],[0.040264,{"cursor":{"x":62}}],[0.040084,{"cursor":{"x":61}}],[0.040506,{"cursor":{"x":60}}],[0.039951,{"cursor":{"x":59}}],[0.040065,{"cursor":{"x":58}}],[0.040143,{"cursor":{"x":57}}],[0.040353,{"cursor":{"x":56}}],[0.040349,{"cursor":{"x":55}}],[0.04116,{"cursor":{"x":54}}],[0.040047,{"cursor":{"x":53}}],[0.28429,{"cursor":{"x":52}}],[0.314351,{"lines":{"33":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thirs iterative_refactor                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":51}}],[0.116839,{"lines":{"33":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thrs iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":50}}],[0.112696,{"lines":{"33":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thers iterative_refactor                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":51}}],[0.093001,{"lines":{"33":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=therrs iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":52}}],[0.347714,{"lines":{"33":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thers iterative_refactor                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":51}}],[0.164871,{"lines":{"33":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=theirs iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":52}}],[1.296944,{"cursor":{"x":51}}],[0.134959,{"cursor":{"x":50}}],[0.125819,{"cursor":{"x":49}}],[0.120502,{"cursor":{"x":48}}],[0.347084,{"lines":{"33":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -Xtheirs iterative_refactor                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":47}}],[0.153009,{"lines":{"33":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X theirs iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":48}}],[0.222127,{"cursor":{"x":47}}],[0.162695,{"cursor":{"x":46}}],[0.128325,{"cursor":{"x":45}}],[0.137591,{"cursor":{"x":44}}],[0.153472,{"cursor":{"x":43}}],[0.120906,{"cursor":{"x":42}}],[0.092112,{"cursor":{"x":41}}],[0.101063,{"cursor":{"x":40}}],[0.115336,{"cursor":{"x":39}}],[0.115928,{"cursor":{"x":38}}],[0.088618,{"cursor":{"x":37}}],[0.106945,{"cursor":{"x":36}}],[0.319412,{"cursor":{"x":35}}],[0.267078,{"lines":{"33":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -srecursive -X theirs iterative_refactor                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":34}}],[0.209051,{"lines":{"33":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":35}}],[0.325433,{"lines":{"0":[["-       return fibonacci(n-1) + fibonacci(n-2)",{"fg":1}],["                                                                                         ",{}]],"1":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"2":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"3":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"4":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"5":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"8":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"9":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"10":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"11":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"12":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"13":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"14":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"15":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"16":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"17":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"18":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"19":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"20":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"21":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"22":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"23":[["Could not find merge strategy 'recursion'.                                                                                             ",{}]],"24":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"25":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"26":[["fatal: Unknown option for merge-recursive: -Xthiers                                                                                    ",{}]],"27":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"28":[["Could not find merge strategy '=recursive'.                                                                                            ",{}]],"29":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"30":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X=thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["fatal: Unknown option for merge-recursive: -X=thiers                                                                                   ",{}]],"32":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.004327,{"lines":{"0":[["-end",{"fg":1}],["                                                                                                                                   ",{}]],"1":[["+",{"fg":2}],["       ",{}],["# Init placeholders",{"fg":2}],["                                                                                                            ",{}]],"2":[["+",{"fg":2}],["       ",{}],["list = []",{"fg":2}],["                                                                                                                      ",{}]],"3":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"4":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"7":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"8":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"9":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"10":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"11":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"12":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"13":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"14":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"15":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"16":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"17":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"18":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"19":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"20":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"21":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"22":[["Could not find merge strategy 'recursion'.                                                                                             ",{}]],"23":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"24":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"25":[["fatal: Unknown option for merge-recursive: -Xthiers                                                                                    ",{}]],"26":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"27":[["Could not find merge strategy '=recursive'.                                                                                            ",{}]],"28":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"29":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X=thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"30":[["fatal: Unknown option for merge-recursive: -X=thiers                                                                                   ",{}]],"31":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["Auto-merging fib.rb                                                                                                                    ",{}]]}}],[0.183077,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["                                                                                                                                       ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["                                                                                                                                       ",{}]]}}],[0.013559,{"lines":{"0":[["  ",{"fg":14,"bg":16}],["  1 ",{"fg":237,"bg":16}],["Merge branch 'iterative_refactor'",{"fg":254,"bg":16,"bold":true}],["                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  ",{"fg":14,"bg":16}],["  2 ",{"fg":237,"bg":16}],["                                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["# Please enter a commit message to explain why this merge is necessary,",{"fg":245,"bg":16}],["                                                  ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  ",{"fg":14,"bg":16}],["  4 ",{"fg":237,"bg":16}],["# especially if it merges an updated upstream into a topic branch.",{"fg":245,"bg":16}],["                                                       ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  ",{"fg":14,"bg":16}],["  5 ",{"fg":237,"bg":16}],["#",{"fg":245,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  ",{"fg":14,"bg":16}],["  6 ",{"fg":237,"bg":16}],["# Lines starting with '#' will be ignored, and an empty message aborts",{"fg":245,"bg":16}],["                                                   ",{"fg":254,"bg":16}],["        ",{}]],"6":[["  ",{"fg":14,"bg":16}],["  7 ",{"fg":237,"bg":16}],["# the commit.",{"fg":245,"bg":16}],["                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"7":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"8":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"9":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"10":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"11":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"12":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"13":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"14":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"15":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"16":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"17":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"18":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"19":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"20":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"21":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"22":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"23":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"24":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"25":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"26":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"27":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"28":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"29":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"30":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"31":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"32":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"33":[["\"/tmp/git-fibonacci/.git/MERGE_MSG\" 7L, 261C                                                                 1,1           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":6,"y":0}}],[20.978472,{}],[0.336881,{"lines":{"33":[["\"/tmp/git-fibonacci/.git/MERGE_MSG\" 7L, 261C                                                                 2,0-1         All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":1}}],[0.137688,{"lines":{"33":[["\"/tmp/git-fibonacci/.git/MERGE_MSG\" 7L, 261C                                                                 3,1           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":2}}],[0.44045,{"lines":{"33":[[":                                                                                                                             ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":1,"y":33}}],[0.188101,{"lines":{"33":[[":x                                                                                                                            ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":2}}],[0.222353,{"cursor":{"x":0}}],[0.009374,{"lines":{"0":[["+",{"fg":2}],["       ",{}],["a = 0",{"fg":2}],["                                                                                                                          ",{}]],"1":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"4":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"5":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"6":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"7":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"8":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"9":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"10":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"11":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"12":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"13":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"14":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"15":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"16":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"17":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"18":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"19":[["Could not find merge strategy 'recursion'.                                                                                             ",{}]],"20":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"21":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"22":[["fatal: Unknown option for merge-recursive: -Xthiers                                                                                    ",{}]],"23":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"24":[["Could not find merge strategy '=recursive'.                                                                                            ",{}]],"25":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"26":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X=thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"27":[["fatal: Unknown option for merge-recursive: -X=thiers                                                                                   ",{}]],"28":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"29":[["Auto-merging fib.rb                                                                                                                    ",{}]],"30":[["Merge made by the 'recursive' strategy.",{"fg":254,"bg":16}],["                                                                                                ",{}]],"31":[[" fib.rb | 32 ",{"fg":254,"bg":16}],["++++++++++++++++++++++",{"fg":2,"bg":16}],["----------",{"fg":1}],["                                                                                          ",{"fg":254,"bg":16}]],"32":[[" 1 file changed, 22 insertions(+), 10 deletions(-)                                                                                     ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[135.417703,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.112224,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.08759400000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.105561,{"cursor":{"x":20}}],[0.617596,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git r                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.035981,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git re                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.205978,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git res                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.157506,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git rese                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.252083,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset",{}],[" ",{"bold":true}],["                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.472774,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset -                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.15568,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":28}}],[0.156684,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --h                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":29}}],[0.09205199999999999,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --ha                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":30}}],[0.253275,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard",{}],[" ",{"bold":true}],["                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":33}}],[0.480036,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard                                                                            ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]}}],[29.109635,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard H                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":34}}],[0.086132,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard He                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":35}}],[0.204249,{}],[0.558476,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard H                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":34}}],[0.231054,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD",{}],[" ",{"bold":true}],["                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":38}}],[0.495198,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":37}}],[0.290178,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":38}}],[53.153627,{"lines":{"0":[["+",{"fg":2}],["       ",{}],["b = 1",{"fg":2}],["                                                                                                                          ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"3":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"4":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"5":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"6":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"7":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"8":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"9":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"10":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"11":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"12":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"13":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"14":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"15":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"16":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"17":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"18":[["Could not find merge strategy 'recursion'.                                                                                             ",{}]],"19":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"20":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"21":[["fatal: Unknown option for merge-recursive: -Xthiers                                                                                    ",{}]],"22":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"23":[["Could not find merge strategy '=recursive'.                                                                                            ",{}]],"24":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"25":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X=thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"26":[["fatal: Unknown option for merge-recursive: -X=thiers                                                                                   ",{}]],"27":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"28":[["Auto-merging fib.rb                                                                                                                    ",{}]],"29":[["Merge made by the 'recursive' strategy.",{"fg":254,"bg":16}],["                                                                                                ",{}]],"30":[[" fib.rb | 32 ",{"fg":254,"bg":16}],["++++++++++++++++++++++",{"fg":2,"bg":16}],["----------",{"fg":1}],["                                                                                          ",{"fg":254,"bg":16}]],"31":[[" 1 file changed, 22 insertions(+), 10 deletions(-)                                                                                     ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.006361,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"2":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"3":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"4":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"5":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"6":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"7":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"8":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"9":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"10":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"11":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"12":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"13":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"14":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"15":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"16":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"17":[["Could not find merge strategy 'recursion'.                                                                                             ",{}]],"18":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"19":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"20":[["fatal: Unknown option for merge-recursive: -Xthiers                                                                                    ",{}]],"21":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"22":[["Could not find merge strategy '=recursive'.                                                                                            ",{}]],"23":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"24":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X=thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"25":[["fatal: Unknown option for merge-recursive: -X=thiers                                                                                   ",{}]],"26":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"27":[["Auto-merging fib.rb                                                                                                                    ",{}]],"28":[["Merge made by the 'recursive' strategy.",{"fg":254,"bg":16}],["                                                                                                ",{}]],"29":[[" fib.rb | 32 ",{"fg":254,"bg":16}],["++++++++++++++++++++++",{"fg":2,"bg":16}],["----------",{"fg":1}],["                                                                                          ",{"fg":254,"bg":16}]],"30":[[" 1 file changed, 22 insertions(+), 10 deletions(-)                                                                                     ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["HEAD is now at e1ef63d Updated Recursive Function Names                                                                                ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[2.473301,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> v                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.050868,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.298356,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.094754,{"cursor":{"x":20}}],[0.283436,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim f                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.06611599999999999,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim fi                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.100349,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb",{}],[" ",{"bold":true}],["                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.30377,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[3e-06,{"lines":{"0":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"1":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"2":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"3":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"4":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"5":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"6":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"7":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"8":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"9":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"10":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"11":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"12":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"13":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"14":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"15":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"16":[["Could not find merge strategy 'recursion'.                                                                                             ",{}]],"17":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"18":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"19":[["fatal: Unknown option for merge-recursive: -Xthiers                                                                                    ",{}]],"20":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"21":[["Could not find merge strategy '=recursive'.                                                                                            ",{}]],"22":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"23":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X=thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"24":[["fatal: Unknown option for merge-recursive: -X=thiers                                                                                   ",{}]],"25":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"26":[["Auto-merging fib.rb                                                                                                                    ",{}]],"27":[["Merge made by the 'recursive' strategy.",{"fg":254,"bg":16}],["                                                                                                ",{}]],"28":[[" fib.rb | 32 ",{"fg":254,"bg":16}],["++++++++++++++++++++++",{"fg":2,"bg":16}],["----------",{"fg":1}],["                                                                                          ",{"fg":254,"bg":16}]],"29":[[" 1 file changed, 22 insertions(+), 10 deletions(-)                                                                                     ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["HEAD is now at e1ef63d Updated Recursive Function Names                                                                                ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.131208,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["                                                                                                                                       ",{}]]}}],[0.00046,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                                            ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":18,"visible":false}}],[0.042741,{"lines":{"0":[["  1 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["sum",{"fg":110,"bg":16}],["(list)                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  2 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# This is a functional call that iteratively tabulates a given array",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  3 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list.reduce(",{"fg":254,"bg":16}],[":+",{"fg":148,"bg":16}],[")                                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  6 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci",{"fg":110,"bg":16}],["(n)                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"6":[["  7 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# return a list of the fibonacci sequence",{"fg":245,"bg":16}],["                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"7":[["  8 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"8":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 10 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                       ",{}]]},"cursor":{"x":16,"y":9}}],[0.005732,{"lines":{"9":[[" 10 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 11 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 12 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 13 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" fibonacci(n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[") + fibonacci(n-",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],[")                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 14 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 15 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 16 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["r_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 17 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Map over natural numbers and compute fibonacci up to n",{"fg":245,"bg":16}],["                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 18 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" (",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["..n-",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").map ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["x",{"fg":167,"bg":16}],["|                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 19 ",{"fg":237,"bg":16}],["    fibonacci(x)                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 20 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 21 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 22 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 23 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 24 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                             ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 25 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 26 ",{"fg":237,"bg":16}],["  puts sum(fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 27 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 28 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 29 ",{"fg":237,"bg":16}],["main()                                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"29":[["~                                                                                                                              ",{"fg":237,"bg":16}],["        ",{}]],"30":[["~                                                                                                                              ",{"fg":237,"bg":16}],["        ",{}]],"31":[["~                                                                                                                              ",{"fg":237,"bg":16}],["        ",{}]],"32":[["~                                                                                                                              ",{"fg":237,"bg":16}],["        ",{}]],"33":[["\"fib.rb\" 29L, 537C                                                                                           1,1           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":0,"visible":true}}],[1.492219,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           2,1-2         All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":1}}],[0.17405,{"lines":{"33":[["\"fib.rb\" 29L, 537C                                                                                           3,1-2         All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":2}}],[0.532309,{"lines":{"33":[[":                                                                                                                             ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":1,"y":33}}],[0.171654,{"lines":{"33":[[":q                                                                                                                            ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":2}}],[0.126503,{"cursor":{"x":0,"visible":false}}],[0.00236,{"lines":{"0":[["-def r_fibonacci_list(n)",{"fg":1}],["                                                                                                               ",{}]],"1":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"2":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"3":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"4":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"5":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"6":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"7":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"8":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"9":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"10":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"11":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"12":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"13":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"14":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"15":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"16":[["Could not find merge strategy 'recursion'.                                                                                             ",{}]],"17":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"18":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"19":[["fatal: Unknown option for merge-recursive: -Xthiers                                                                                    ",{}]],"20":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"21":[["Could not find merge strategy '=recursive'.                                                                                            ",{}]],"22":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"23":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X=thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"24":[["fatal: Unknown option for merge-recursive: -X=thiers                                                                                   ",{}]],"25":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"26":[["Auto-merging fib.rb                                                                                                                    ",{}]],"27":[["Merge made by the 'recursive' strategy.",{"fg":254,"bg":16}],["                                                                                                ",{}]],"28":[[" fib.rb | 32 ",{"fg":254,"bg":16}],["++++++++++++++++++++++",{"fg":2,"bg":16}],["----------",{"fg":1}],["                                                                                          ",{"fg":254,"bg":16}]],"29":[[" 1 file changed, 22 insertions(+), 10 deletions(-)                                                                                     ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["HEAD is now at e1ef63d Updated Recursive Function Names                                                                                ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16,"visible":true}}],[37.472354,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.24573,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":38}}],[0.274057,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":67}}],[3.995057,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":38}}],[0.648346,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":37}}],[0.660537,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEA                                                                        ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":36}}],[0.03986,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HE                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":35}}],[0.039209,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard H                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":34}}],[0.041336,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard                                                                            ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":33}}],[0.040279,{"cursor":{"x":32}}],[0.040345,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --har                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":31}}],[0.040336,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --ha                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":30}}],[0.040206,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --h                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":29}}],[0.040159,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":28}}],[0.040408,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset -                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.040025,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.039413,{"cursor":{"x":25}}],[0.040788,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git rese                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.040411,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git res                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.040292,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git re                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.04035,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git r                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.041049,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":20}}],[0.040397,{"cursor":{"x":19}}],[0.039555,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.040205,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.039965,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[0.04006,{}],[0.189352,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> m                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.119375,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> ma                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.097483,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.133243,{"cursor":{"x":20}}],[0.127008,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man g                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.035874,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man gi                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.143602,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.198261,{"cursor":{"x":24}}],[0.228352,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git m                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.09345000000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git me                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.07153,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git mer                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.167846,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git merg                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":28}}],[0.215114,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git mer                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.396,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git me                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.055949,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git m                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.289244,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.113488,{"cursor":{"x":23}}],[0.399917,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.192735,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-g                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.401511,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.271594,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-e                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.06726500000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-er                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.312378,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-e                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.10066,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.183202,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-m                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.090446,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-me                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.06503200000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-mer                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.206642,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merg                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":28}}],[0.082658,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> man git-merge                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":29}}],[123.014257,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":67}}],[1.427545,{"cursor":{"x":68}}],[1.041779,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor -                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":69}}],[0.161975,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor --                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":70}}],[0.186882,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor --n                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":71}}],[0.064723,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor --no                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":72}}],[0.16016,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor --no-                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":73}}],[0.421838,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor --no-c                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":74}}],[0.184198,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor --no-commit",{}],[" ",{"bold":true}],["                            ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":80}}],[52.744735,{"lines":{"0":[["-       # Map over natural numbers and compute fibonacci up to n",{"fg":1}],["                                                                       ",{}]],"1":[["-       return (0..n-1).map do |x| ",{"fg":1}],["                                                                                                    ",{}]],"2":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"3":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"4":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"5":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"6":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"7":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"8":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"9":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"10":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"11":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"12":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"13":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"14":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"15":[["Could not find merge strategy 'recursion'.                                                                                             ",{}]],"16":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"17":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"18":[["fatal: Unknown option for merge-recursive: -Xthiers                                                                                    ",{}]],"19":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"20":[["Could not find merge strategy '=recursive'.                                                                                            ",{}]],"21":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"22":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X=thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"23":[["fatal: Unknown option for merge-recursive: -X=thiers                                                                                   ",{}]],"24":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"25":[["Auto-merging fib.rb                                                                                                                    ",{}]],"26":[["Merge made by the 'recursive' strategy.",{"fg":254,"bg":16}],["                                                                                                ",{}]],"27":[[" fib.rb | 32 ",{"fg":254,"bg":16}],["++++++++++++++++++++++",{"fg":2,"bg":16}],["----------",{"fg":1}],["                                                                                          ",{"fg":254,"bg":16}]],"28":[[" 1 file changed, 22 insertions(+), 10 deletions(-)                                                                                     ",{}]],"29":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"30":[["HEAD is now at e1ef63d Updated Recursive Function Names                                                                                ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor --no-commit                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.002233,{"lines":{"0":[["-               fibonacci(x) ",{"fg":1}],["                                                                                                          ",{}]],"1":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"2":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"3":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"4":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"5":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"6":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"7":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"8":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"9":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"10":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"11":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"12":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"13":[["Could not find merge strategy 'recursion'.                                                                                             ",{}]],"14":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"15":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"16":[["fatal: Unknown option for merge-recursive: -Xthiers                                                                                    ",{}]],"17":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"18":[["Could not find merge strategy '=recursive'.                                                                                            ",{}]],"19":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"20":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X=thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"21":[["fatal: Unknown option for merge-recursive: -X=thiers                                                                                   ",{}]],"22":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"23":[["Auto-merging fib.rb                                                                                                                    ",{}]],"24":[["Merge made by the 'recursive' strategy.",{"fg":254,"bg":16}],["                                                                                                ",{}]],"25":[[" fib.rb | 32 ",{"fg":254,"bg":16}],["++++++++++++++++++++++",{"fg":2,"bg":16}],["----------",{"fg":1}],["                                                                                          ",{"fg":254,"bg":16}]],"26":[[" 1 file changed, 22 insertions(+), 10 deletions(-)                                                                                     ",{}]],"27":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"28":[["HEAD is now at e1ef63d Updated Recursive Function Names                                                                                ",{}]],"29":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor --no-commit                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["Auto-merging fib.rb                                                                                                                    ",{}]],"32":[["Automatic merge went well; stopped before committing as requested                                                                      ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[12.799089,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.050823,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.119786,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.066147,{"cursor":{"x":20}}],[0.16727,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git s                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.408453,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git st                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.102708,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git sta                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.309245,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git stat                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.14055,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git statu                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.211711,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.293486,{"lines":{"0":[["+",{"fg":2}],["       ",{}],["# Equivlent to for loop from 2 to n",{"fg":2}],["                                                                                            ",{}]],"1":[["+",{"fg":2}],["       ",{}],["(2..n+1).each do |i|",{"fg":2}],["                                                                                                           ",{}]],"2":[["+",{"fg":2}],["               ",{}],["# Crete new value",{"fg":2}],["                                                                                                      ",{}]],"3":[["+",{"fg":2}],["               ",{}],["sum = a + b",{"fg":2}],["                                                                                                            ",{}]],"4":[["+",{"fg":2}],["               ",{"bg":1}],["                                                                                                                       ",{}]],"5":[["+",{"fg":2}],["               ",{}],["# Update last two items",{"fg":2}],["                                                                                                ",{}]],"6":[["+",{"fg":2}],["               ",{}],["b = a",{"fg":2}],["                                                                                                                  ",{}]],"7":[["+",{"fg":2}],["               ",{}],["a = sum",{"fg":2}],["                                                                                                                ",{}]],"8":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"9":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"10":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"11":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"12":[["Could not find merge strategy 'recursion'.                                                                                             ",{}]],"13":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"14":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"15":[["fatal: Unknown option for merge-recursive: -Xthiers                                                                                    ",{}]],"16":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"17":[["Could not find merge strategy '=recursive'.                                                                                            ",{}]],"18":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"19":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X=thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"20":[["fatal: Unknown option for merge-recursive: -X=thiers                                                                                   ",{}]],"21":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"22":[["Auto-merging fib.rb                                                                                                                    ",{}]],"23":[["Merge made by the 'recursive' strategy.",{"fg":254,"bg":16}],["                                                                                                ",{}]],"24":[[" fib.rb | 32 ",{"fg":254,"bg":16}],["++++++++++++++++++++++",{"fg":2,"bg":16}],["----------",{"fg":1}],["                                                                                          ",{"fg":254,"bg":16}]],"25":[[" 1 file changed, 22 insertions(+), 10 deletions(-)                                                                                     ",{}]],"26":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"27":[["HEAD is now at e1ef63d Updated Recursive Function Names                                                                                ",{}]],"28":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"29":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor --no-commit                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"30":[["Auto-merging fib.rb                                                                                                                    ",{}]],"31":[["Automatic merge went well; stopped before committing as requested                                                                      ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.002515,{"lines":{"0":[["+",{"fg":2}],["                                                                                                                                      ",{}]],"1":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"2":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"3":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"4":[["Could not find merge strategy 'recursion'.                                                                                             ",{}]],"5":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"6":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"7":[["fatal: Unknown option for merge-recursive: -Xthiers                                                                                    ",{}]],"8":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"9":[["Could not find merge strategy '=recursive'.                                                                                            ",{}]],"10":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"11":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X=thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"12":[["fatal: Unknown option for merge-recursive: -X=thiers                                                                                   ",{}]],"13":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"14":[["Auto-merging fib.rb                                                                                                                    ",{}]],"15":[["Merge made by the 'recursive' strategy.",{"fg":254,"bg":16}],["                                                                                                ",{}]],"16":[[" fib.rb | 32 ",{"fg":254,"bg":16}],["++++++++++++++++++++++",{"fg":2,"bg":16}],["----------",{"fg":1}],["                                                                                          ",{"fg":254,"bg":16}]],"17":[[" 1 file changed, 22 insertions(+), 10 deletions(-)                                                                                     ",{}]],"18":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"19":[["HEAD is now at e1ef63d Updated Recursive Function Names                                                                                ",{}]],"20":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"21":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor --no-commit                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"23":[["Automatic merge went well; stopped before committing as requested                                                                      ",{}]],"24":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"25":[["On branch master                                                                                                                       ",{}]],"26":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"27":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["Changes to be committed:                                                                                                               ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[13.393416,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> v                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.11545,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.122695,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.085352,{"cursor":{"x":20}}],[0.318903,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim f                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.13141,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim fi                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.134098,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb",{}],[" ",{"bold":true}],["                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.436215,{"lines":{"0":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"1":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"2":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"3":[["Could not find merge strategy 'recursion'.                                                                                             ",{}]],"4":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"5":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"6":[["fatal: Unknown option for merge-recursive: -Xthiers                                                                                    ",{}]],"7":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"8":[["Could not find merge strategy '=recursive'.                                                                                            ",{}]],"9":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"10":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X=thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"11":[["fatal: Unknown option for merge-recursive: -X=thiers                                                                                   ",{}]],"12":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"13":[["Auto-merging fib.rb                                                                                                                    ",{}]],"14":[["Merge made by the 'recursive' strategy.",{"fg":254,"bg":16}],["                                                                                                ",{}]],"15":[[" fib.rb | 32 ",{"fg":254,"bg":16}],["++++++++++++++++++++++",{"fg":2,"bg":16}],["----------",{"fg":1}],["                                                                                          ",{"fg":254,"bg":16}]],"16":[[" 1 file changed, 22 insertions(+), 10 deletions(-)                                                                                     ",{}]],"17":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"18":[["HEAD is now at e1ef63d Updated Recursive Function Names                                                                                ",{}]],"19":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"20":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor --no-commit                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"21":[["Auto-merging fib.rb                                                                                                                    ",{}]],"22":[["Automatic merge went well; stopped before committing as requested                                                                      ",{}]],"23":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"24":[["On branch master                                                                                                                       ",{}]],"25":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"26":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["Changes to be committed:                                                                                                               ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.169058,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["                                                                                                                                       ",{}]],"28":[["                                                                                                                                       ",{}]],"30":[["                                                                                                                                       ",{}]],"32":[["                                                                                                                                       ",{}]]}}],[0.000381,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                                            ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":18,"visible":false}}],[0.042867,{"lines":{"0":[["  1 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["sum",{"fg":110,"bg":16}],["(list)                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  2 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# This is a functional call that iteratively tabulates a given array",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  3 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list.reduce(",{"fg":254,"bg":16}],[":+",{"fg":148,"bg":16}],[")                                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  6 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"6":[["  7 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"7":[["  8 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"8":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 10 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                    ",{"fg":254,"bg":16}],["                                                                                    ",{}]]},"cursor":{"x":51,"y":9}}],[0.006621,{"lines":{"9":[[" 10 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 11 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 15 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 16 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 17 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 18 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 19 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 20 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 21 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 22 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 24 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 25 ",{"fg":237,"bg":16}],["    b = a                                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 26 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 27 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 28 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 29 ",{"fg":237,"bg":16}],["    list << sum                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"30":[[" 31 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"31":[[" 32 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"32":[[" 33 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"33":[["\"fib.rb\" 41L, 639C                                                                                           1,1           Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":0,"visible":true}}],[0.514961,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           2,1-2         Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":1}}],[0.18054,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           3,1-2         Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":2}}],[0.170871,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           4,1           Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":3}}],[0.186354,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           5,0-1         Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":4}}],[0.202387,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           6,1           Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":5}}],[0.24984,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           7,1-2         Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":6}}],[0.660819,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           8,0-1         Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":7}}],[0.040267,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           9,1-2         Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":8}}],[0.04035,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           10,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":9}}],[0.040289,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           11,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":10}}],[0.040596,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           12,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":11}}],[0.039984,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           13,0-1        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":12}}],[0.040721,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           14,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":13}}],[0.039782,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           15,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":14}}],[0.040077,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           16,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":15}}],[0.039949,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           17,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":16}}],[0.039994,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           18,0-1        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":17}}],[0.040163,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           19,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":18}}],[0.040554,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           20,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":19}}],[0.039768,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           21,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":20}}],[0.040175,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           22,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":21}}],[0.03975,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           23,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":22}}],[0.040614,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           24,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":23}}],[0.039759,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           25,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":24}}],[0.03964,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           26,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":25}}],[0.039929,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           27,0-1        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":26}}],[0.040894,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           28,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":27}}],[0.04032,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           29,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":28}}],[0.040172,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           30,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":29}}],[0.039921,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           31,0-1        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":30}}],[0.040996,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           32,1-2        Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":31}}],[0.040736,{"lines":{"33":[["\"fib.rb\" 41L, 639C                                                                                           33,1          Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":32}}],[0.040131,{"lines":{"0":[["  2 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# This is a functional call that iteratively tabulates a given array",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  3 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list.reduce(",{"fg":254,"bg":16}],[":+",{"fg":148,"bg":16}],[")                                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  6 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  7 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"6":[["  8 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"7":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 10 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 11 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 15 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 16 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 17 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 18 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 19 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 20 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 21 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 22 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 24 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 25 ",{"fg":237,"bg":16}],["    b = a                                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 26 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 27 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 28 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 29 ",{"fg":237,"bg":16}],["    list << sum                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 31 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"30":[[" 32 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"31":[[" 33 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"32":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             34,0-1        12%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.04012,{"lines":{"0":[["  3 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list.reduce(",{"fg":254,"bg":16}],[":+",{"fg":148,"bg":16}],[")                                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  6 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  7 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  8 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"6":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 10 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 11 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 15 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 16 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 17 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 18 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 19 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 20 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 21 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 22 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 24 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 25 ",{"fg":237,"bg":16}],["    b = a                                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 26 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 27 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 28 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 29 ",{"fg":237,"bg":16}],["    list << sum                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 31 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 32 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"30":[[" 33 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"31":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"32":[[" 35 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"33":[["                                                                                                             35,1          25%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.040572,{"lines":{"0":[["  4 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  6 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  7 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  8 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 10 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 11 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 15 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 16 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 17 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 18 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 19 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 20 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 21 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 22 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 24 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 25 ",{"fg":237,"bg":16}],["    b = a                                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 26 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 27 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 28 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 29 ",{"fg":237,"bg":16}],["    list << sum                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 31 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 32 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 33 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"30":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"31":[[" 35 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"32":[[" 36 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"33":[["                                                                                                             36,1-2        37%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5}}],[0.039977,{"lines":{"0":[["  5 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  6 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  7 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  8 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 10 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 11 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 15 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 16 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 17 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 18 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 19 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 20 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 21 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 22 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 24 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 25 ",{"fg":237,"bg":16}],["    b = a                                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 26 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 27 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 28 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 29 ",{"fg":237,"bg":16}],["    list << sum                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 31 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 32 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 33 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"29":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"30":[[" 35 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"31":[[" 36 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"32":[[" 37 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"33":[["                                                                                                             37,1-2        50%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.042629,{"lines":{"0":[["  6 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["i_fibonacci_list",{"fg":110,"bg":16}],["(n)                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  7 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  8 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 10 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 11 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 15 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 16 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 17 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 18 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 19 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 20 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 21 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 22 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 24 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 25 ",{"fg":237,"bg":16}],["    b = a                                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 26 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 27 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 28 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 29 ",{"fg":237,"bg":16}],["    list << sum                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 31 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 32 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 33 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"28":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"29":[[" 35 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"30":[[" 36 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"31":[[" 37 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"32":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"33":[["                                                                                                             38,1-2        62%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.039007,{"lines":{"0":[["  7 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Iterative implementation of fibonacci",{"fg":245,"bg":16}],["                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  8 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 10 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 11 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 15 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 16 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 17 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 18 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 19 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 20 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 21 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 22 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 24 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 25 ",{"fg":237,"bg":16}],["    b = a                                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 26 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 27 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 28 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 29 ",{"fg":237,"bg":16}],["    list << sum                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 31 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 32 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 33 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"27":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"28":[[" 35 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"29":[[" 36 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"30":[[" 37 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"31":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"32":[[" 39 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"33":[["                                                                                                             39,1          75%",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4}}],[0.040141,{"lines":{"0":[["  8 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 10 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 11 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 15 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 16 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 17 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 18 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 19 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 20 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 21 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 22 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 24 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 25 ",{"fg":237,"bg":16}],["    b = a                                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 26 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 27 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 28 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 29 ",{"fg":237,"bg":16}],["    list << sum                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 31 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 32 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 33 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"26":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"27":[[" 35 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"28":[[" 36 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"29":[[" 37 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"30":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"31":[[" 39 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"32":[[" 40 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             40,0-1        87%",{"fg":254,"bg":16}],["         ",{}]]}}],[0.040404,{"lines":{"0":[["  9 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Define base case",{"fg":245,"bg":16}],["                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"1":[[" 10 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["if",{"fg":176,"bg":16}],[" n <= ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"2":[[" 11 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"3":[[" 12 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"4":[[" 13 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"5":[[" 14 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Init placeholders",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"6":[[" 15 ",{"fg":237,"bg":16}],["  list = []                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"7":[[" 16 ",{"fg":237,"bg":16}],["  a = ",{"fg":254,"bg":16}],["0",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"8":[[" 17 ",{"fg":237,"bg":16}],["  b = ",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],["                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"9":[[" 18 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"10":[[" 19 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Equivlent to for loop from 2 to n",{"fg":245,"bg":16}],["                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"11":[[" 20 ",{"fg":237,"bg":16}],["  (",{"fg":254,"bg":16}],["2",{"fg":172,"bg":16}],["..n+",{"fg":254,"bg":16}],["1",{"fg":172,"bg":16}],[").each ",{"fg":254,"bg":16}],["do",{"fg":176,"bg":16}],[" |",{"fg":254,"bg":16}],["i",{"fg":167,"bg":16}],["|                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"12":[[" 21 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Crete new value",{"fg":245,"bg":16}],["                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"13":[[" 22 ",{"fg":237,"bg":16}],["    sum = a + b                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"14":[[" 23 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"15":[[" 24 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Update last two items",{"fg":245,"bg":16}],["                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"16":[[" 25 ",{"fg":237,"bg":16}],["    b = a                                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"17":[[" 26 ",{"fg":237,"bg":16}],["    a = sum                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"18":[[" 27 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"19":[[" 28 ",{"fg":237,"bg":16}],["    ",{"fg":254,"bg":16}],["# Append new value to list",{"fg":245,"bg":16}],["                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"20":[[" 29 ",{"fg":237,"bg":16}],["    list << sum                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"21":[[" 30 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"22":[[" 31 ",{"fg":237,"bg":16}],["                                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"23":[[" 32 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["return",{"fg":176,"bg":16}],[" list                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"24":[[" 33 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"25":[[" 34 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"26":[[" 35 ",{"fg":237,"bg":16}],["def",{"fg":176,"bg":16}],[" ",{"fg":254,"bg":16}],["main",{"fg":110,"bg":16}],["()                                                                                                                         ",{"fg":254,"bg":16}]],"27":[[" 36 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# Our job with fibonacci is to print the sum of the fibonacci sequence up to",{"fg":245,"bg":16}],["                                                     ",{"fg":254,"bg":16}]],"28":[[" 37 ",{"fg":237,"bg":16}],["  ",{"fg":254,"bg":16}],["# the tenth item.",{"fg":245,"bg":16}],["                                                                                                                ",{"fg":254,"bg":16}]],"29":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                              ",{"fg":254,"bg":16}]],"30":[[" 39 ",{"fg":237,"bg":16}],["end",{"fg":176,"bg":16}],["                                                                                                                                ",{"fg":254,"bg":16}]],"31":[[" 40 ",{"fg":237,"bg":16}],["                                                                                                                                   ",{"fg":254,"bg":16}]],"32":[[" 41 ",{"fg":237,"bg":16}],["main()                                                                                                                             ",{"fg":254,"bg":16}]],"33":[["                                                                                                             41,1          Bot",{"fg":254,"bg":16}],["         ",{}]]}}],[0.040365,{}],[0.039805,{}],[0.039565,{}],[0.039857,{}],[0.040017,{}],[0.041042,{}],[0.04074,{}],[0.040127,{}],[0.04104,{}],[0.040415,{}],[0.192895,{"lines":{"33":[["                                                                                                             40,0-1        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":31}}],[0.180804,{"lines":{"33":[["                                                                                                             39,1          Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":30}}],[0.151678,{"lines":{"33":[["                                                                                                             38,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":29}}],[0.147197,{"lines":{"33":[["                                                                                                             37,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":28}}],[0.261637,{"lines":{"33":[["                                                                                                             36,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":27}}],[0.1906,{"lines":{"33":[["                                                                                                             35,1          Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":26}}],[48.597257,{"lines":{"33":[["                                                                                                             36,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":5,"y":27}}],[0.16652,{"lines":{"33":[["                                                                                                             37,1-2        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":28}}],[0.160106,{"lines":{"33":[["                                                                                                             37,2-3        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":6}}],[0.136602,{"lines":{"33":[["                                                                                                             38,2-3        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"y":29}}],[0.161376,{"lines":{"33":[["                                                                                                             38,3-4        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":7}}],[0.009971000000000001,{"lines":{"33":[["                                                                                                             39,3          Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":6,"y":30}}],[0.417227,{"lines":{"33":[["                                                                                                             38,3-4        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":7,"y":29}}],[0.127949,{"lines":{"33":[["                                                                                                             38,4-5        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":8}}],[0.143742,{"lines":{"33":[["                                                                                                             38,5-6        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":9}}],[0.115549,{"lines":{"33":[["                                                                                                             38,6-7        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":10}}],[0.118024,{"lines":{"33":[["                                                                                                             38,7-8        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":11}}],[0.122504,{"lines":{"33":[["                                                                                                             38,8-9        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":12}}],[0.432253,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 38,8-9        Bot",{"fg":254,"bg":16}],["         ",{}]]}}],[0.292469,{"lines":{"29":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"T",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                             ",{"fg":254,"bg":16}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 38,9-10       Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":13}}],[0.127517,{"lines":{"29":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"Th",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                            ",{"fg":254,"bg":16}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 38,10-11      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":14}}],[0.095073,{"lines":{"29":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"The",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                           ",{"fg":254,"bg":16}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 38,11-12      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":15}}],[0.081132,{"lines":{"29":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"The ",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                          ",{"fg":254,"bg":16}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 38,12-13      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":16}}],[0.39067,{"lines":{"29":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"The s",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                         ",{"fg":254,"bg":16}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 38,13-14      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":17}}],[0.139524,{"lines":{"29":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"The su",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                        ",{"fg":254,"bg":16}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 38,14-15      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":18}}],[0.186931,{"lines":{"29":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"The sum",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                       ",{"fg":254,"bg":16}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 38,15-16      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":19}}],[0.079306,{"lines":{"29":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"The sum ",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                      ",{"fg":254,"bg":16}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 38,16-17      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":20}}],[0.170064,{"lines":{"29":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"The sum i",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                     ",{"fg":254,"bg":16}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 38,17-18      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":21}}],[0.09254800000000001,{"lines":{"29":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"The sum is",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                    ",{"fg":254,"bg":16}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 38,18-19      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":22}}],[0.114941,{"lines":{"29":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"The sum is ",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                   ",{"fg":254,"bg":16}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 38,19-20      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":23}}],[1.057751,{"lines":{"33":[["                                                                                                                              ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":22}}],[0.229233,{"cursor":{"visible":false}}],[0.001321,{"lines":{"33":[["                                                                                                             38,19-20      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":23,"visible":true}}],[0.148957,{"lines":{"29":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"The sum is ",{"fg":148,"bg":16}],["#",{"fg":172,"bg":16}],["{",{"fg":172,"bg":237}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":237}],["\"",{"fg":148,"bg":16}],["                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             38,20-21      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":24}}],[0.177563,{"lines":{"29":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"The sum is ",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             38,19-20      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":23}}],[0.141146,{"lines":{"33":[["                                                                                                             38,18-19      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":22}}],[0.202966,{"lines":{"33":[["                                                                                                             38,17-18      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":21}}],[0.24688,{"lines":{"33":[["                                                                                                             38,18-19      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":22}}],[0.210143,{"lines":{"33":[["                                                                                                             38,19-20      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":23}}],[0.327924,{"lines":{"29":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"The sum is ",{"fg":148,"bg":16}],["#",{"fg":172,"bg":16}],["{",{"fg":172,"bg":237}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":237}],["\"",{"fg":148,"bg":16}],["                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             38,20-21      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":24}}],[0.144928,{"lines":{"29":[[" 38 ",{"fg":237,"bg":16}],["  puts ",{"fg":254,"bg":16}],["\"The sum is ",{"fg":148,"bg":16}],["#{",{"fg":172,"bg":16}],["sum(i_fibonacci_list(",{"fg":254,"bg":16}],["10",{"fg":172,"bg":16}],["))",{"fg":254,"bg":16}],["}",{"fg":172,"bg":16}],["\"",{"fg":148,"bg":16}],["                                                                                   ",{"fg":254,"bg":16}]],"33":[["                                                                                                             38,21-22      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":25}}],[0.130499,{"lines":{"33":[["                                                                                                             38,22-23      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":26}}],[0.357102,{"lines":{"33":[[":                                                                                                                             ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":1,"y":33,"visible":false}}],[4.6e-05,{"cursor":{"visible":true}}],[0.181808,{"lines":{"33":[[":w                                                                                                                            ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":2}}],[5.1e-05,{}],[0.384871,{"cursor":{"x":0}}],[0.000642,{"lines":{"33":[["\"fib.rb\" 41L, 650C written                                                                                                    ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":26,"visible":false}}],[0.07979,{"cursor":{"x":126}}],[6e-06,{"lines":{"33":[["\"fib.rb\" 41L, 650C written                                                                                   38,22-23      Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":26,"y":29,"visible":true}}],[0.708085,{"lines":{"33":[["\"fib.rb\" 41L, 650C written                                                                                   39,3          Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":6,"y":30}}],[0.165279,{"lines":{"33":[["\"fib.rb\" 41L, 650C written                                                                                   40,0-1        Bot",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":4,"y":31}}],[16.741233,{"lines":{"33":[[":                                                                                                                             ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":1,"y":33}}],[0.259814,{"lines":{"33":[[":x                                                                                                                            ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":2}}],[0.516381,{"cursor":{"x":0,"visible":false}}],[0.003065,{"lines":{"0":[["+",{"fg":2}],["               ",{}],["# Append new value to list",{"fg":2}],["                                                                                             ",{}]],"1":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"2":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"3":[["Could not find merge strategy 'recursion'.                                                                                             ",{}]],"4":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"5":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"6":[["fatal: Unknown option for merge-recursive: -Xthiers                                                                                    ",{}]],"7":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"8":[["Could not find merge strategy '=recursive'.                                                                                            ",{}]],"9":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"10":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X=thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"11":[["fatal: Unknown option for merge-recursive: -X=thiers                                                                                   ",{}]],"12":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"13":[["Auto-merging fib.rb                                                                                                                    ",{}]],"14":[["Merge made by the 'recursive' strategy.",{"fg":254,"bg":16}],["                                                                                                ",{}]],"15":[[" fib.rb | 32 ",{"fg":254,"bg":16}],["++++++++++++++++++++++",{"fg":2,"bg":16}],["----------",{"fg":1}],["                                                                                          ",{"fg":254,"bg":16}]],"16":[[" 1 file changed, 22 insertions(+), 10 deletions(-)                                                                                     ",{}]],"17":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"18":[["HEAD is now at e1ef63d Updated Recursive Function Names                                                                                ",{}]],"19":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"20":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor --no-commit                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"21":[["Auto-merging fib.rb                                                                                                                    ",{}]],"22":[["Automatic merge went well; stopped before committing as requested                                                                      ",{}]],"23":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"24":[["On branch master                                                                                                                       ",{}]],"25":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"26":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["Changes to be committed:                                                                                                               ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16,"visible":true}}],[1.563198,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.098233,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.072468,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.071228,{"cursor":{"x":20}}],[0.19027,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git s                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.339541,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git st                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.11138,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git stu                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.601476,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git st                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.08169899999999999,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git sta                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.293045,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git stat                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.15301,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git statu                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.119159,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.749945,{"lines":{"0":[["+",{"fg":2}],["               ",{}],["list << sum",{"fg":2}],["                                                                                                            ",{}]],"1":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursion -X thiers iterative_refactor                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"2":[["Could not find merge strategy 'recursion'.                                                                                             ",{}]],"3":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"4":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"5":[["fatal: Unknown option for merge-recursive: -Xthiers                                                                                    ",{}]],"6":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s=recursive -X=thiers iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"7":[["Could not find merge strategy '=recursive'.                                                                                            ",{}]],"8":[["Available strategies are: octopus ours recursive resolve subtree.                                                                      ",{}]],"9":[["[1] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X=thiers iterative_refactor                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"10":[["fatal: Unknown option for merge-recursive: -X=thiers                                                                                   ",{}]],"11":[["[128] ",{"bold":true}],["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"12":[["Auto-merging fib.rb                                                                                                                    ",{}]],"13":[["Merge made by the 'recursive' strategy.",{"fg":254,"bg":16}],["                                                                                                ",{}]],"14":[[" fib.rb | 32 ",{"fg":254,"bg":16}],["++++++++++++++++++++++",{"fg":2,"bg":16}],["----------",{"fg":1}],["                                                                                          ",{"fg":254,"bg":16}]],"15":[[" 1 file changed, 22 insertions(+), 10 deletions(-)                                                                                     ",{}]],"16":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"17":[["HEAD is now at e1ef63d Updated Recursive Function Names                                                                                ",{}]],"18":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"19":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor --no-commit                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"20":[["Auto-merging fib.rb                                                                                                                    ",{}]],"21":[["Automatic merge went well; stopped before committing as requested                                                                      ",{}]],"22":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"23":[["On branch master                                                                                                                       ",{}]],"24":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"25":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["Changes to be committed:                                                                                                               ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.001869,{"lines":{"0":[[" fib.rb | 32 ",{"fg":254,"bg":16}],["++++++++++++++++++++++",{"fg":2,"bg":16}],["----------",{"fg":1}],["                                                                                          ",{"fg":254,"bg":16}]],"1":[[" 1 file changed, 22 insertions(+), 10 deletions(-)                                                                                     ",{}]],"2":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"3":[["HEAD is now at e1ef63d Updated Recursive Function Names                                                                                ",{}]],"4":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"5":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor --no-commit                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"6":[["Auto-merging fib.rb                                                                                                                    ",{}]],"7":[["Automatic merge went well; stopped before committing as requested                                                                      ",{}]],"8":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"9":[["On branch master                                                                                                                       ",{}]],"10":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"11":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["Changes to be committed:                                                                                                               ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"18":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"19":[["On branch master                                                                                                                       ",{}]],"20":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"21":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["Changes to be committed:                                                                                                               ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"27":[["Changes not staged for commit:                                                                                                         ",{}]],"28":[["  (use \"git add <file>...\" to update what will be committed)                                                                           ",{}]],"29":[["  (use \"git checkout -- <file>...\" to discard changes in working directory)                                                            ",{}]],"31":[["        ",{}],["modified:   fib.rb",{"fg":1}],["                                                                                                             ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[42.300622,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.06338100000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.5888409999999999,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.09198099999999999,{"cursor":{"x":20}}],[0.127682,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git d                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.09249499999999999,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git di                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.104755,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git dif                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.112782,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git diff                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.08209,{"cursor":{"x":25}}],[0.419625,{}],[5.4e-05,{"lines":{"0":[[" 1 file changed, 22 insertions(+), 10 deletions(-)                                                                                     ",{}]],"1":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"2":[["HEAD is now at e1ef63d Updated Recursive Function Names                                                                                ",{}]],"3":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"4":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor --no-commit                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"5":[["Auto-merging fib.rb                                                                                                                    ",{}]],"6":[["Automatic merge went well; stopped before committing as requested                                                                      ",{}]],"7":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"8":[["On branch master                                                                                                                       ",{}]],"9":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"10":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["Changes to be committed:                                                                                                               ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"17":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"18":[["On branch master                                                                                                                       ",{}]],"19":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"20":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["Changes to be committed:                                                                                                               ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["Changes not staged for commit:                                                                                                         ",{}]],"27":[["  (use \"git add <file>...\" to update what will be committed)                                                                           ",{}]],"28":[["  (use \"git checkout -- <file>...\" to discard changes in working directory)                                                            ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["        ",{}],["modified:   fib.rb",{"fg":1}],["                                                                                                             ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> git diff                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["fib.rb              HEAD                iterative_refactor  master              MERGE_HEAD          ORIG_HEAD                          ",{}]]},"cursor":{"y":32}}],[0.274774,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> git diff i                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.12603,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> git diff in                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.144314,{}],[5e-06,{"lines":{"33":[["                                                                                                                                       ",{}]]}}],[0.2063,{}],[0.334081,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> git diff i                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.133937,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> git diff                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.108853,{}],[0.000545,{"lines":{"33":[["fib.rb              HEAD                iterative_refactor  master              MERGE_HEAD          ORIG_HEAD                          ",{}]]}}],[2.768229,{"cursor":{"x":24}}],[0.15258,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> git dif                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.110364,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> git di                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.20957,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> git d                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.120703,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":20}}],[0.121512,{"cursor":{"x":19}}],[0.123483,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.096667,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.12914,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[0.153349,{}],[102.088086,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.109662,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.060159,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.101479,{"cursor":{"x":20}}],[0.116211,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> git a                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.113349,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> git ad                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.149139,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> git add                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.139459,{"cursor":{"x":24}}],[0.104118,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> git add fib.rb",{}],[" ",{"bold":true}],["                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":31}}],[1.706961,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> git add fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0,"y":33}}],[0.001547,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[49.18002,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> f                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.080618,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> fi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.097659,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> fib                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.08597200000000001,{"cursor":{"x":20}}],[0.428194,{"cursor":{"x":19}}],[0.111348,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> fi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.194115,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> f                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.351697,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> fr                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.379508,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> f                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.182787,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[0.315223,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> r                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.108017,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> ru                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.121111,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> rub                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.079544,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> ruby                                                                                        ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":20}}],[0.081694,{"cursor":{"x":21}}],[0.121665,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> ruby f                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.077241,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> ruby fi                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.106521,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> ruby fib.rb",{}],[" ",{"bold":true}],["                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":28}}],[0.364141,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> ruby fib.rb                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[4e-06,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"1":[["HEAD is now at e1ef63d Updated Recursive Function Names                                                                                ",{}]],"2":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"3":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor --no-commit                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"4":[["Auto-merging fib.rb                                                                                                                    ",{}]],"5":[["Automatic merge went well; stopped before committing as requested                                                                      ",{}]],"6":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"7":[["On branch master                                                                                                                       ",{}]],"8":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"9":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["Changes to be committed:                                                                                                               ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"16":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"17":[["On branch master                                                                                                                       ",{}]],"18":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"19":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["Changes to be committed:                                                                                                               ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["Changes not staged for commit:                                                                                                         ",{}]],"26":[["  (use \"git add <file>...\" to update what will be committed)                                                                           ",{}]],"27":[["  (use \"git checkout -- <file>...\" to discard changes in working directory)                                                            ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["        ",{}],["modified:   fib.rb",{"fg":1}],["                                                                                                             ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> git add fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> ruby fib.rb                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.025397,{"lines":{"33":[["The sum is 143                                                                                                                         ",{}]]},"cursor":{"x":14}}],[0.001474,{"lines":{"0":[["HEAD is now at e1ef63d Updated Recursive Function Names                                                                                ",{}]],"1":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"2":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor --no-commit                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"3":[["Auto-merging fib.rb                                                                                                                    ",{}]],"4":[["Automatic merge went well; stopped before committing as requested                                                                      ",{}]],"5":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"6":[["On branch master                                                                                                                       ",{}]],"7":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"8":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["Changes to be committed:                                                                                                               ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"15":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"16":[["On branch master                                                                                                                       ",{}]],"17":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"18":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["Changes to be committed:                                                                                                               ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["Changes not staged for commit:                                                                                                         ",{}]],"25":[["  (use \"git add <file>...\" to update what will be committed)                                                                           ",{}]],"26":[["  (use \"git checkout -- <file>...\" to discard changes in working directory)                                                            ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["        ",{}],["modified:   fib.rb",{"fg":1}],["                                                                                                             ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> git add fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> ruby fib.rb                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["The sum is 143                                                                                                                         ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[54.327739,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.126286,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.102403,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.09535399999999999,{"cursor":{"x":20}}],[0.2722,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git s                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.192895,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git st                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.111904,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git sta                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.349609,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git stat                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.125,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git statu                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.143023,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.202054,{"lines":{"0":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"1":[["benjica@",{}],["gunter",{"underline":true}],["> git merge -s recursive -X theirs iterative_refactor --no-commit                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"2":[["Auto-merging fib.rb                                                                                                                    ",{}]],"3":[["Automatic merge went well; stopped before committing as requested                                                                      ",{}]],"4":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"5":[["On branch master                                                                                                                       ",{}]],"6":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"7":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["Changes to be committed:                                                                                                               ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"14":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"15":[["On branch master                                                                                                                       ",{}]],"16":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"17":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["Changes to be committed:                                                                                                               ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["Changes not staged for commit:                                                                                                         ",{}]],"24":[["  (use \"git add <file>...\" to update what will be committed)                                                                           ",{}]],"25":[["  (use \"git checkout -- <file>...\" to discard changes in working directory)                                                            ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["        ",{}],["modified:   fib.rb",{"fg":1}],["                                                                                                             ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["benjica@",{}],["gunter",{"underline":true}],["> git add fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> ruby fib.rb                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["The sum is 143                                                                                                                         ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.003277,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["Changes to be committed:                                                                                                               ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"6":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"7":[["On branch master                                                                                                                       ",{}]],"8":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"9":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"11":[["Changes to be committed:                                                                                                               ",{}]],"13":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["Changes not staged for commit:                                                                                                         ",{}]],"16":[["  (use \"git add <file>...\" to update what will be committed)                                                                           ",{}]],"17":[["  (use \"git checkout -- <file>...\" to discard changes in working directory)                                                            ",{}]],"19":[["        ",{}],["modified:   fib.rb",{"fg":1}],["                                                                                                             ",{}]],"21":[["benjica@",{}],["gunter",{"underline":true}],["> git add fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"22":[["benjica@",{}],["gunter",{"underline":true}],["> ruby fib.rb                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"23":[["The sum is 143                                                                                                                         ",{}]],"24":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"25":[["On branch master                                                                                                                       ",{}]],"26":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"27":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"29":[["Changes to be committed:                                                                                                               ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[11.396819,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.153803,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.104911,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.06327099999999999,{"cursor":{"x":20}}],[0.199666,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git c                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.041936,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git co                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.068026,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git com                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.120738,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git comm                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.106574,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git commit                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[1.909672,{"lines":{"0":[["Changes to be committed:                                                                                                               ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"5":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"6":[["On branch master                                                                                                                       ",{}]],"7":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"8":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["Changes to be committed:                                                                                                               ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["Changes not staged for commit:                                                                                                         ",{}]],"15":[["  (use \"git add <file>...\" to update what will be committed)                                                                           ",{}]],"16":[["  (use \"git checkout -- <file>...\" to discard changes in working directory)                                                            ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["        ",{}],["modified:   fib.rb",{"fg":1}],["                                                                                                             ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["benjica@",{}],["gunter",{"underline":true}],["> git add fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"21":[["benjica@",{}],["gunter",{"underline":true}],["> ruby fib.rb                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"22":[["The sum is 143                                                                                                                         ",{}]],"23":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"24":[["On branch master                                                                                                                       ",{}]],"25":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"26":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["Changes to be committed:                                                                                                               ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> git commit                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.149049,{"lines":{"0":[["                                                                                                                                       ",{}]],"2":[["                                                                                                                                       ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["                                                                                                                                       ",{}]],"10":[["                                                                                                                                       ",{}]],"12":[["                                                                                                                                       ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["                                                                                                                                       ",{}]],"18":[["                                                                                                                                       ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["                                                                                                                                       ",{}]],"28":[["                                                                                                                                       ",{}]],"30":[["                                                                                                                                       ",{}]],"32":[["                                                                                                                                       ",{}]]}}],[0.013973,{"lines":{"0":[["  ",{"fg":14,"bg":16}],["  1 ",{"fg":237,"bg":16}],["Merge branch 'iterative_refactor'",{"fg":254,"bg":16,"bold":true}],["                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"1":[["  ",{"fg":14,"bg":16}],["  2 ",{"fg":237,"bg":16}],["#",{"fg":245,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["# It looks like you may be committing a merge.",{"fg":245,"bg":16}],["                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  ",{"fg":14,"bg":16}],["  4 ",{"fg":237,"bg":16}],["# If this is not correct, please remove the file",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  ",{"fg":14,"bg":16}],["  5 ",{"fg":237,"bg":16}],["#       .git/MERGE_HEAD",{"fg":245,"bg":16}],["                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  ",{"fg":14,"bg":16}],["  6 ",{"fg":237,"bg":16}],["# and try again.",{"fg":245,"bg":16}],["                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"6":[["  ",{"fg":14,"bg":16}],["  7 ",{"fg":237,"bg":16}],["                                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"7":[["  ",{"fg":14,"bg":16}],["  8 ",{"fg":237,"bg":16}],["                                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"8":[["  ",{"fg":14,"bg":16}],["  9 ",{"fg":237,"bg":16}],["# Please enter the commit message for your changes. Lines starting",{"fg":245,"bg":16}],["                                                       ",{"fg":254,"bg":16}],["        ",{}]],"9":[["  ",{"fg":14,"bg":16}],[" 10 ",{"fg":237,"bg":16}],["# with '#' will be ignored, and an empty message aborts the commit.",{"fg":245,"bg":16}],["                                                      ",{"fg":254,"bg":16}],["        ",{}]],"10":[["  ",{"fg":14,"bg":16}],[" 11 ",{"fg":237,"bg":16}],["# On branch ",{"fg":245,"bg":16}],["master                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"11":[["  ",{"fg":14,"bg":16}],[" 12 ",{"fg":237,"bg":16}],["# All conflicts fixed but you are still merging.",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"12":[["  ",{"fg":14,"bg":16}],[" 13 ",{"fg":237,"bg":16}],["#",{"fg":245,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"13":[["  ",{"fg":14,"bg":16}],[" 14 ",{"fg":237,"bg":16}],["# ",{"fg":245,"bg":16}],["Changes to be committed:",{"fg":176,"bg":16}],["                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"14":[["  ",{"fg":14,"bg":16}],[" 15 ",{"fg":237,"bg":16}],["#       ",{"fg":245,"bg":16}],["modified",{"fg":110,"bg":16}],[": ",{"fg":245,"bg":16}],["  fib.rb",{"fg":172,"bg":16}],["                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"15":[["  ",{"fg":14,"bg":16}],[" 16 ",{"fg":237,"bg":16}],["#",{"fg":245,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"16":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"17":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"18":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"19":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"20":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"21":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"22":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"23":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"24":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"25":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"26":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"27":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"28":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"29":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"30":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"31":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"32":[["  ",{"fg":14,"bg":16}],["~                                                                                                                            ",{"fg":237,"bg":16}],["        ",{}]],"33":[["\"/tmp/git-fibonacci/.git/COMMIT_EDITMSG\" 16L, 424C                                                           1,1           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":6,"y":0}}],[38.951571,{"lines":{"1":[["  ",{"fg":14,"bg":16}],["  2 ",{"fg":237,"bg":16}],["                                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["#",{"fg":245,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  ",{"fg":14,"bg":16}],["  4 ",{"fg":237,"bg":16}],["# It looks like you may be committing a merge.",{"fg":245,"bg":16}],["                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  ",{"fg":14,"bg":16}],["  5 ",{"fg":237,"bg":16}],["# If this is not correct, please remove the file",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  ",{"fg":14,"bg":16}],["  6 ",{"fg":237,"bg":16}],["#       .git/MERGE_HEAD",{"fg":245,"bg":16}],["                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"6":[["  ",{"fg":14,"bg":16}],["  7 ",{"fg":237,"bg":16}],["# and try again.",{"fg":245,"bg":16}],["                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"8":[["  ",{"fg":14,"bg":16}],["  9 ",{"fg":237,"bg":16}],["                                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"9":[["  ",{"fg":14,"bg":16}],[" 10 ",{"fg":237,"bg":16}],["# Please enter the commit message for your changes. Lines starting",{"fg":245,"bg":16}],["                                                       ",{"fg":254,"bg":16}],["        ",{}]],"10":[["  ",{"fg":14,"bg":16}],[" 11 ",{"fg":237,"bg":16}],["# with '#' will be ignored, and an empty message aborts the commit.",{"fg":245,"bg":16}],["                                                      ",{"fg":254,"bg":16}],["        ",{}]],"11":[["  ",{"fg":14,"bg":16}],[" 12 ",{"fg":237,"bg":16}],["# On branch ",{"fg":245,"bg":16}],["master                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"12":[["  ",{"fg":14,"bg":16}],[" 13 ",{"fg":237,"bg":16}],["# All conflicts fixed but you are still merging.",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"13":[["  ",{"fg":14,"bg":16}],[" 14 ",{"fg":237,"bg":16}],["#",{"fg":245,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"14":[["  ",{"fg":14,"bg":16}],[" 15 ",{"fg":237,"bg":16}],["# ",{"fg":245,"bg":16}],["Changes to be committed:",{"fg":176,"bg":16}],["                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"15":[["  ",{"fg":14,"bg":16}],[" 16 ",{"fg":237,"bg":16}],["#       ",{"fg":245,"bg":16}],["modified",{"fg":110,"bg":16}],[": ",{"fg":245,"bg":16}],["  fib.rb",{"fg":172,"bg":16}],["                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"16":[["  ",{"fg":14,"bg":16}],[" 17 ",{"fg":237,"bg":16}],["#",{"fg":245,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 2,1           Top",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":127,"y":16,"visible":false}}],[0.000543,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 2,1           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":6,"y":1,"visible":true}}],[0.371913,{"lines":{"1":[["  ",{"fg":14,"bg":16}],["  2 ",{"fg":237,"bg":16}],[" ",{"fg":15,"bg":9}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 2,2           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":7}}],[0.179006,{"lines":{"1":[["  ",{"fg":14,"bg":16}],["  2 ",{"fg":237,"bg":16}],[" I",{"fg":15,"bg":9}],["                                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 2,3           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":8}}],[0.299835,{"lines":{"1":[["  ",{"fg":14,"bg":16}],["  2 ",{"fg":237,"bg":16}],[" ",{"fg":15,"bg":9}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 2,2           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":7}}],[0.113597,{"lines":{"1":[["  ",{"fg":14,"bg":16}],["  2 ",{"fg":237,"bg":16}],["                                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 2,1           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":6}}],[0.230576,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["                                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"3":[["  ",{"fg":14,"bg":16}],["  4 ",{"fg":237,"bg":16}],["#",{"fg":245,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  ",{"fg":14,"bg":16}],["  5 ",{"fg":237,"bg":16}],["# It looks like you may be committing a merge.",{"fg":245,"bg":16}],["                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  ",{"fg":14,"bg":16}],["  6 ",{"fg":237,"bg":16}],["# If this is not correct, please remove the file",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"6":[["  ",{"fg":14,"bg":16}],["  7 ",{"fg":237,"bg":16}],["#       .git/MERGE_HEAD",{"fg":245,"bg":16}],["                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"7":[["  ",{"fg":14,"bg":16}],["  8 ",{"fg":237,"bg":16}],["# and try again.",{"fg":245,"bg":16}],["                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"9":[["  ",{"fg":14,"bg":16}],[" 10 ",{"fg":237,"bg":16}],["                                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"10":[["  ",{"fg":14,"bg":16}],[" 11 ",{"fg":237,"bg":16}],["# Please enter the commit message for your changes. Lines starting",{"fg":245,"bg":16}],["                                                       ",{"fg":254,"bg":16}],["        ",{}]],"11":[["  ",{"fg":14,"bg":16}],[" 12 ",{"fg":237,"bg":16}],["# with '#' will be ignored, and an empty message aborts the commit.",{"fg":245,"bg":16}],["                                                      ",{"fg":254,"bg":16}],["        ",{}]],"12":[["  ",{"fg":14,"bg":16}],[" 13 ",{"fg":237,"bg":16}],["# On branch ",{"fg":245,"bg":16}],["master                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"13":[["  ",{"fg":14,"bg":16}],[" 14 ",{"fg":237,"bg":16}],["# All conflicts fixed but you are still merging.",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"14":[["  ",{"fg":14,"bg":16}],[" 15 ",{"fg":237,"bg":16}],["#",{"fg":245,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"15":[["  ",{"fg":14,"bg":16}],[" 16 ",{"fg":237,"bg":16}],["# ",{"fg":245,"bg":16}],["Changes to be committed:",{"fg":176,"bg":16}],["                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"16":[["  ",{"fg":14,"bg":16}],[" 17 ",{"fg":237,"bg":16}],["#       ",{"fg":245,"bg":16}],["modified",{"fg":110,"bg":16}],[": ",{"fg":245,"bg":16}],["  fib.rb",{"fg":172,"bg":16}],["                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"17":[["  ",{"fg":14,"bg":16}],[" 18 ",{"fg":237,"bg":16}],["#",{"fg":245,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]]},"cursor":{"x":127,"y":17,"visible":false}}],[0.000871,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,1           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":6,"y":2,"visible":true}}],[0.221673,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,2           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":7}}],[0.07717300000000001,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,3           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":8}}],[0.109876,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I m                                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,4           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":9}}],[0.052934,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I ma                                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,5           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":10}}],[0.143428,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I mad                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,6           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":11}}],[0.123179,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made                                                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,7           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":12}}],[0.086771,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,8           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":13}}],[0.08354300000000001,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made t                                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,9           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":14}}],[0.040168,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made th                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,10          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":15}}],[0.056192,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,11          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":16}}],[0.07044300000000001,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,12          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":17}}],[0.046453,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the p                                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,13          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":18}}],[0.073088,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the pr                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,14          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":19}}],[0.06696299999999999,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the pri                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,15          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":20}}],[0.255517,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the prit                                                                                                          ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,16          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":21}}],[0.100552,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the pritn                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,17          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":22}}],[0.07682,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,18          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":23}}],[0.111557,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the pritn m                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,19          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":24}}],[0.078135,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the pritn mo                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,20          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":25}}],[0.070155,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the pritn mor                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,21          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":26}}],[0.06541,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the pritn more                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,22          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":27}}],[0.104524,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,23          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":28}}],[0.19256,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,22          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":27}}],[0.140318,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the pritn mor                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,21          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":26}}],[0.106511,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the pritn mo                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,20          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":25}}],[0.125483,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the pritn m                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,19          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":24}}],[0.087933,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the pritn                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,18          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":23}}],[0.12279,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,17          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":22}}],[0.09402000000000001,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the prit                                                                                                          ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,16          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":21}}],[0.093346,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the pri                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,15          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":20}}],[0.631291,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the prit                                                                                                          ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,16          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":21}}],[0.377338,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the pri                                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,15          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":20}}],[0.142716,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the prin                                                                                                          ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,16          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":21}}],[0.108681,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,17          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":22}}],[0.105639,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,18          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":23}}],[0.535623,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print t                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,19          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":24}}],[0.301837,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,18          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":23}}],[0.07538599999999999,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print s                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,19          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":24}}],[0.121421,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print st                                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,20          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":25}}],[0.060151,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print sta                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,21          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":26}}],[0.098582,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print stat                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,22          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":27}}],[0.09646100000000001,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print state                                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,23          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":28}}],[0.08615299999999999,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statem                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,24          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":29}}],[0.138013,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print stateme                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,25          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":30}}],[0.084481,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statemen                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,26          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":31}}],[0.064288,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,27          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":32}}],[0.07049,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,28          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":33}}],[0.116254,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement f                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,29          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":34}}],[0.055379,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement fo                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,30          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":35}}],[0.39774,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement f                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,29          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":34}}],[0.294031,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,28          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":33}}],[0.179342,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement m                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,29          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":34}}],[0.07978300000000001,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement mo                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,30          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":35}}],[0.048768,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement mor                                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,31          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":36}}],[0.051292,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more                                                                                          ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,32          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":37}}],[0.082451,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,33          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":38}}],[0.121165,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more e                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,34          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":39}}],[0.173782,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more ev                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,35          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":40}}],[0.381156,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more e                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,34          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":39}}],[0.037296,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more ef                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,35          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":40}}],[0.16967,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more eff                                                                                      ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,36          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":41}}],[0.071522,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effe                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,37          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":42}}],[0.208927,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effec                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,38          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":43}}],[0.175639,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effect                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,39          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":44}}],[0.06460100000000001,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effecti                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,40          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":45}}],[0.09772599999999999,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effectiv                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,41          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":46}}],[0.112897,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,42          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":47}}],[0.146684,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,43          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":48}}],[0.077595,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective a                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,44          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":49}}],[0.1121,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective an                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,45          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":50}}],[0.046426,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,46          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":51}}],[0.08393299999999999,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,47          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":52}}],[0.184276,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and u                                                                          ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,48          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":53}}],[0.079524,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and us                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,49          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":54}}],[0.116044,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and use                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,50          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":55}}],[0.121616,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,51          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":56}}],[0.079517,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,52          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":57}}],[0.124125,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used t                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,53          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":58}}],[0.070141,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used te                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,54          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":59}}],[0.090258,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,55          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":60}}],[0.390764,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,54          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":59}}],[0.120783,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used t                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,53          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":58}}],[0.111497,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used th                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,54          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":59}}],[0.096249,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,55          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":60}}],[0.041831,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,56          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":61}}],[0.055575,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the i                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,57          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":62}}],[0.195507,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the it                                                                ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,58          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":63}}],[0.09968,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the ite                                                               ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,59          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":64}}],[0.051013,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iter                                                              ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,60          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":65}}],[0.214747,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the itert                                                             ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,61          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":66}}],[0.001553,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the itertr                                                            ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,62          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":67}}],[0.042948,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the itertri                                                           ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,63          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":68}}],[0.247976,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the itertrie                                                          ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,64          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":69}}],[0.252608,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the itertri                                                           ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,63          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":68}}],[0.11443,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the itertr                                                            ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,62          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":67}}],[0.245954,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the itert                                                             ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,61          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":66}}],[0.22987,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iter                                                              ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,60          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":65}}],[0.08709500000000001,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the itera                                                             ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,61          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":66}}],[0.230793,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iterat                                                            ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,62          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":67}}],[0.081201,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iterati                                                           ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,63          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":68}}],[0.097076,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iterativ                                                          ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,64          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":69}}],[0.095874,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iterative                                                         ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,65          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":70}}],[0.053602,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,66          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":71}}],[0.117751,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iterative i                                                       ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,67          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":72}}],[0.163417,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iterative im                                                      ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,68          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":73}}],[0.072099,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iterative imp                                                     ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,69          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":74}}],[0.148148,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iterative impl                                                    ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,70          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":75}}],[0.073645,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iterative imple                                                   ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,71          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":76}}],[0.064055,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iterative implem                                                  ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,72          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":77}}],[0.104866,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iterative impleme                                                 ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,73          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":78}}],[0.07383099999999999,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iterative implemen                                                ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,74          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":79}}],[0.132306,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iterative implement                                               ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,75          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":80}}],[0.068658,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iterative implementa                                              ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,76          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":81}}],[0.092365,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iterative implementat                                             ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,77          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":82}}],[0.034267,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iterative implementati                                            ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,78          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":83}}],[0.09412,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iterative implementatio                                           ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,79          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":84}}],[0.122895,{"lines":{"2":[["  ",{"fg":14,"bg":16}],["  3 ",{"fg":237,"bg":16}],["I made the print statement more effective and used the iterative implementation                                          ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,80          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":85}}],[0.723618,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 3,81          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":86}}],[0.156138,{"lines":{"3":[["  ",{"fg":14,"bg":16}],["  4 ",{"fg":237,"bg":16}],["o                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"4":[["  ",{"fg":14,"bg":16}],["  5 ",{"fg":237,"bg":16}],["#",{"fg":245,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  ",{"fg":14,"bg":16}],["  6 ",{"fg":237,"bg":16}],["# It looks like you may be committing a merge.",{"fg":245,"bg":16}],["                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"6":[["  ",{"fg":14,"bg":16}],["  7 ",{"fg":237,"bg":16}],["# If this is not correct, please remove the file",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"7":[["  ",{"fg":14,"bg":16}],["  8 ",{"fg":237,"bg":16}],["#       .git/MERGE_HEAD",{"fg":245,"bg":16}],["                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"8":[["  ",{"fg":14,"bg":16}],["  9 ",{"fg":237,"bg":16}],["# and try again.",{"fg":245,"bg":16}],["                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"10":[["  ",{"fg":14,"bg":16}],[" 11 ",{"fg":237,"bg":16}],["                                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"11":[["  ",{"fg":14,"bg":16}],[" 12 ",{"fg":237,"bg":16}],["# Please enter the commit message for your changes. Lines starting",{"fg":245,"bg":16}],["                                                       ",{"fg":254,"bg":16}],["        ",{}]],"12":[["  ",{"fg":14,"bg":16}],[" 13 ",{"fg":237,"bg":16}],["# with '#' will be ignored, and an empty message aborts the commit.",{"fg":245,"bg":16}],["                                                      ",{"fg":254,"bg":16}],["        ",{}]],"13":[["  ",{"fg":14,"bg":16}],[" 14 ",{"fg":237,"bg":16}],["# On branch ",{"fg":245,"bg":16}],["master                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"14":[["  ",{"fg":14,"bg":16}],[" 15 ",{"fg":237,"bg":16}],["# All conflicts fixed but you are still merging.",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"15":[["  ",{"fg":14,"bg":16}],[" 16 ",{"fg":237,"bg":16}],["#",{"fg":245,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"16":[["  ",{"fg":14,"bg":16}],[" 17 ",{"fg":237,"bg":16}],["# ",{"fg":245,"bg":16}],["Changes to be committed:",{"fg":176,"bg":16}],["                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"17":[["  ",{"fg":14,"bg":16}],[" 18 ",{"fg":237,"bg":16}],["#       ",{"fg":245,"bg":16}],["modified",{"fg":110,"bg":16}],[": ",{"fg":245,"bg":16}],["  fib.rb",{"fg":172,"bg":16}],["                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"18":[["  ",{"fg":14,"bg":16}],[" 19 ",{"fg":237,"bg":16}],["#",{"fg":245,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]]},"cursor":{"x":127,"y":18,"visible":false}}],[0.000754,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 4,2           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":7,"y":3,"visible":true}}],[0.133426,{"lines":{"3":[["  ",{"fg":14,"bg":16}],["  4 ",{"fg":237,"bg":16}],["of                                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 4,3           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":8}}],[0.184148,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 4,4           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":9}}],[0.291308,{"lines":{"3":[["  ",{"fg":14,"bg":16}],["  4 ",{"fg":237,"bg":16}],["of f                                                                                                                     ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 4,5           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":10}}],[0.052891,{"lines":{"3":[["  ",{"fg":14,"bg":16}],["  4 ",{"fg":237,"bg":16}],["of fi                                                                                                                    ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 4,6           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":11}}],[0.102034,{"lines":{"3":[["  ",{"fg":14,"bg":16}],["  4 ",{"fg":237,"bg":16}],["of fib                                                                                                                   ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 4,7           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":12}}],[0.07783900000000001,{"lines":{"3":[["  ",{"fg":14,"bg":16}],["  4 ",{"fg":237,"bg":16}],["of fibo                                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 4,8           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":13}}],[0.103811,{"lines":{"3":[["  ",{"fg":14,"bg":16}],["  4 ",{"fg":237,"bg":16}],["of fibon                                                                                                                 ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 4,9           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":14}}],[0.08466,{"lines":{"3":[["  ",{"fg":14,"bg":16}],["  4 ",{"fg":237,"bg":16}],["of fibona                                                                                                                ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 4,10          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":15}}],[0.140713,{"lines":{"3":[["  ",{"fg":14,"bg":16}],["  4 ",{"fg":237,"bg":16}],["of fibonac                                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 4,11          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":16}}],[0.132484,{"lines":{"3":[["  ",{"fg":14,"bg":16}],["  4 ",{"fg":237,"bg":16}],["of fibonacc                                                                                                              ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 4,12          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":17}}],[0.098075,{"lines":{"3":[["  ",{"fg":14,"bg":16}],["  4 ",{"fg":237,"bg":16}],["of fibonacci                                                                                                             ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 4,13          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":18}}],[0.182553,{"lines":{"3":[["  ",{"fg":14,"bg":16}],["  4 ",{"fg":237,"bg":16}],["of fibonacci.                                                                                                            ",{"fg":254,"bg":16}],["        ",{}]],"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 4,14          All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":19}}],[0.349537,{"lines":{"4":[["  ",{"fg":14,"bg":16}],["  5 ",{"fg":237,"bg":16}],["                                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"5":[["  ",{"fg":14,"bg":16}],["  6 ",{"fg":237,"bg":16}],["#",{"fg":245,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"6":[["  ",{"fg":14,"bg":16}],["  7 ",{"fg":237,"bg":16}],["# It looks like you may be committing a merge.",{"fg":245,"bg":16}],["                                                                           ",{"fg":254,"bg":16}],["        ",{}]],"7":[["  ",{"fg":14,"bg":16}],["  8 ",{"fg":237,"bg":16}],["# If this is not correct, please remove the file",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"8":[["  ",{"fg":14,"bg":16}],["  9 ",{"fg":237,"bg":16}],["#       .git/MERGE_HEAD",{"fg":245,"bg":16}],["                                                                                                  ",{"fg":254,"bg":16}],["        ",{}]],"9":[["  ",{"fg":14,"bg":16}],[" 10 ",{"fg":237,"bg":16}],["# and try again.",{"fg":245,"bg":16}],["                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"11":[["  ",{"fg":14,"bg":16}],[" 12 ",{"fg":237,"bg":16}],["                                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"12":[["  ",{"fg":14,"bg":16}],[" 13 ",{"fg":237,"bg":16}],["# Please enter the commit message for your changes. Lines starting",{"fg":245,"bg":16}],["                                                       ",{"fg":254,"bg":16}],["        ",{}]],"13":[["  ",{"fg":14,"bg":16}],[" 14 ",{"fg":237,"bg":16}],["# with '#' will be ignored, and an empty message aborts the commit.",{"fg":245,"bg":16}],["                                                      ",{"fg":254,"bg":16}],["        ",{}]],"14":[["  ",{"fg":14,"bg":16}],[" 15 ",{"fg":237,"bg":16}],["# On branch ",{"fg":245,"bg":16}],["master                                                                                                       ",{"fg":254,"bg":16}],["        ",{}]],"15":[["  ",{"fg":14,"bg":16}],[" 16 ",{"fg":237,"bg":16}],["# All conflicts fixed but you are still merging.",{"fg":245,"bg":16}],["                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"16":[["  ",{"fg":14,"bg":16}],[" 17 ",{"fg":237,"bg":16}],["#",{"fg":245,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]],"17":[["  ",{"fg":14,"bg":16}],[" 18 ",{"fg":237,"bg":16}],["# ",{"fg":245,"bg":16}],["Changes to be committed:",{"fg":176,"bg":16}],["                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"18":[["  ",{"fg":14,"bg":16}],[" 19 ",{"fg":237,"bg":16}],["#       ",{"fg":245,"bg":16}],["modified",{"fg":110,"bg":16}],[": ",{"fg":245,"bg":16}],["  fib.rb",{"fg":172,"bg":16}],["                                                                                               ",{"fg":254,"bg":16}],["        ",{}]],"19":[["  ",{"fg":14,"bg":16}],[" 20 ",{"fg":237,"bg":16}],["#",{"fg":245,"bg":16}],["                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]]},"cursor":{"x":127,"y":19,"visible":false}}],[0.000717,{"lines":{"33":[["-- INSERT --",{"fg":148,"bg":16,"bold":true}],["                                                                                                 5,1           All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":6,"y":4,"visible":true}}],[0.808248,{"lines":{"4":[["  ",{"fg":14,"bg":16}],["  5 ",{"fg":237,"bg":16}],[":                                                                                                                        ",{"fg":254,"bg":16}],["        ",{}]]}}],[1.001206,{"lines":{"4":[["  ",{"fg":14,"bg":16}],["  5 ",{"fg":237,"bg":16}],["                                                                                                                         ",{"fg":254,"bg":16}],["        ",{}]],"33":[[":                                                                                                                             ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":1,"y":33}}],[0.615235,{"lines":{"33":[["                                                                                                             5,0-1         All",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":6,"y":4}}],[0.230873,{"lines":{"33":[[":                                                                                                                             ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":1,"y":33}}],[0.226209,{"lines":{"33":[[":x                                                                                                                            ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":2}}],[0.429181,{"lines":{"33":[["\".git/COMMIT_EDITMSG\" 20L, 520C written                                                                                       ",{"fg":254,"bg":16}],["         ",{}]]},"cursor":{"x":39,"visible":false}}],[0.007284,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"4":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"5":[["On branch master                                                                                                                       ",{}]],"6":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"7":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["Changes to be committed:                                                                                                               ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["Changes not staged for commit:                                                                                                         ",{}]],"14":[["  (use \"git add <file>...\" to update what will be committed)                                                                           ",{}]],"15":[["  (use \"git checkout -- <file>...\" to discard changes in working directory)                                                            ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["        ",{}],["modified:   fib.rb",{"fg":1}],["                                                                                                             ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["benjica@",{}],["gunter",{"underline":true}],["> git add fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"20":[["benjica@",{}],["gunter",{"underline":true}],["> ruby fib.rb                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"21":[["The sum is 143                                                                                                                         ",{}]],"22":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"23":[["On branch master                                                                                                                       ",{}]],"24":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"25":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["Changes to be committed:                                                                                                               ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> git commit                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["[master 9ac0e47] Merge branch 'iterative_refactor'                                                                                     ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16,"visible":true}}],[2.41458,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.09325700000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.098496,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.101745,{"cursor":{"x":20}}],[0.41107,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git l                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.144662,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git lo                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.079517,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.231967,{"lines":{"0":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["benjica@",{}],["gunter",{"underline":true}],["> vim fib.rb                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"3":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"4":[["On branch master                                                                                                                       ",{}]],"5":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"6":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["Changes to be committed:                                                                                                               ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["Changes not staged for commit:                                                                                                         ",{}]],"13":[["  (use \"git add <file>...\" to update what will be committed)                                                                           ",{}]],"14":[["  (use \"git checkout -- <file>...\" to discard changes in working directory)                                                            ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["        ",{}],["modified:   fib.rb",{"fg":1}],["                                                                                                             ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["benjica@",{}],["gunter",{"underline":true}],["> git add fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"19":[["benjica@",{}],["gunter",{"underline":true}],["> ruby fib.rb                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"20":[["The sum is 143                                                                                                                         ",{}]],"21":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"22":[["On branch master                                                                                                                       ",{}]],"23":[["All conflicts fixed but you are still merging.                                                                                         ",{}]],"24":[["  (use \"git commit\" to conclude merge)                                                                                                 ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["Changes to be committed:                                                                                                               ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["        ",{}],["modified:   fib.rb",{"fg":2}],["                                                                                                             ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> git commit                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["[master 9ac0e47] Merge branch 'iterative_refactor'                                                                                     ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> git log                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.004959999999999999,{"lines":{"0":[["commit 9ac0e47adbc87a2ca9a911a9e906d9ae54f1f512",{"fg":3}],["                                                                                        ",{}]],"1":[["Merge: e1ef63d 5e3245c                                                                                                                 ",{}]],"2":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"3":[["Date:   Thu Mar 12 11:46:50 2015 -0600                                                                                                 ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["    Merge branch 'iterative_refactor'                                                                                                  ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["    I made the print statement more effective and used the iterative implementation                                                    ",{}]],"8":[["    of fibonacci.                                                                                                                      ",{}]],"10":[["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                        ",{}]],"11":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"12":[["Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                                  ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["    Updated Recursive Function Names                                                                                                   ",{}]],"16":[["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                        ",{}]],"17":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"18":[["Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                                  ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["    Updated Function Names                                                                                                             ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                        ",{}]],"23":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"24":[["Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                                  ",{}]],"26":[["    Add Print of Summation of Sequence                                                                                                 ",{}]],"28":[["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                        ",{}]],"29":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"30":[["Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                                  ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["    Create a Fibonacci Sequence                                                                                                        ",{}]],"33":[[":                                                                                                                                      ",{}]]},"cursor":{"x":1}}],[1.345267,{"lines":{"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.0008319999999999999,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[0.170034,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.435439,{"cursor":{"x":24}}],[0.45727,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log -                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.504348,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.189269,{}],[0.001094,{"lines":{"0":[["Merge: e1ef63d 5e3245c                                                                                                                 ",{}]],"1":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"2":[["Date:   Thu Mar 12 11:46:50 2015 -0600                                                                                                 ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["    Merge branch 'iterative_refactor'                                                                                                  ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["    I made the print statement more effective and used the iterative implementation                                                    ",{}]],"7":[["    of fibonacci.                                                                                                                      ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                        ",{}]],"10":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"11":[["Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                                  ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["    Updated Recursive Function Names                                                                                                   ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                        ",{}]],"16":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"17":[["Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                                  ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["    Updated Function Names                                                                                                             ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                        ",{}]],"22":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"23":[["Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                                  ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["    Add Print of Summation of Sequence                                                                                                 ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                        ",{}]],"28":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"29":[["Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                                  ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["    Create a Fibonacci Sequence                                                                                                        ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> git log --                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["zsh: do you wish to see all 414 possibilities (138 lines)?                                                                             ",{}]]},"cursor":{"x":59}}],[0.324375,{"lines":{"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":26,"y":32}}],[0.155942,{}],[0.001041,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> git log --abbrev",{}],["=",{"bold":true}],["                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":33}}],[0.348982,{"lines":{"32":[["benjica@",{}],["gunter",{"underline":true}],["> git log --abbrev                                                                            ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":32}}],[0.005293000000000001,{"lines":{"0":[["commit 9ac0e47adbc87a2ca9a911a9e906d9ae54f1f512",{"fg":3}],["                                                                                        ",{}]],"1":[["Merge: e1ef63d 5e3245c                                                                                                                 ",{}]],"2":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"3":[["Date:   Thu Mar 12 11:46:50 2015 -0600                                                                                                 ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["    Merge branch 'iterative_refactor'                                                                                                  ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["    I made the print statement more effective and used the iterative implementation                                                    ",{}]],"8":[["    of fibonacci.                                                                                                                      ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                        ",{}]],"11":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"12":[["Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                                  ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["    Updated Recursive Function Names                                                                                                   ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                        ",{}]],"17":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"18":[["Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                                  ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["    Updated Function Names                                                                                                             ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                        ",{}]],"23":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"24":[["Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                                  ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["    Add Print of Summation of Sequence                                                                                                 ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                        ",{}]],"29":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"30":[["Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                                  ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["    Create a Fibonacci Sequence                                                                                                        ",{}]],"33":[[":                                                                                                                                      ",{}]]},"cursor":{"x":1,"y":33}}],[0.914253,{}],[0.514563,{"lines":{"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.000345,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[0.241582,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --abbrev                                                                            ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":32}}],[0.391515,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --abbre                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":31}}],[0.141909,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --abbr                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":30}}],[0.3091,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --abb                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":29}}],[0.208941,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --ab                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":28}}],[0.142206,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --a                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.133769,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.209924,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --g                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.140401,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --gr                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":28}}],[0.099299,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --gra                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":29}}],[0.214946,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --graph",{}],[" ",{"bold":true}],["                                                                            ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":32}}],[0.60061,{"lines":{"0":[["Merge: e1ef63d 5e3245c                                                                                                                 ",{}]],"1":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"2":[["Date:   Thu Mar 12 11:46:50 2015 -0600                                                                                                 ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["    Merge branch 'iterative_refactor'                                                                                                  ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["    I made the print statement more effective and used the iterative implementation                                                    ",{}]],"7":[["    of fibonacci.                                                                                                                      ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                        ",{}]],"10":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"11":[["Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                                  ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["    Updated Recursive Function Names                                                                                                   ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                        ",{}]],"16":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"17":[["Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                                  ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["    Updated Function Names                                                                                                             ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                        ",{}]],"22":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"23":[["Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                                  ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["    Add Print of Summation of Sequence                                                                                                 ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                        ",{}]],"28":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"29":[["Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                                  ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["    Create a Fibonacci Sequence                                                                                                        ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> git log --graph                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.005436,{"lines":{"0":[["*   ",{}],["commit 9ac0e47adbc87a2ca9a911a9e906d9ae54f1f512",{"fg":3}],["                                                                                    ",{}]],"1":[["|",{"fg":1}],["\\",{"fg":2}],["  Merge: e1ef63d 5e3245c                                                                                                             ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 12 11:46:50 2015 -0600                                                                                             ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Merge branch 'iterative_refactor'                                                                                              ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     I made the print statement more effective and used the iterative implementation                                                ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     of fibonacci.                                                                                                                  ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"10":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"16":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"18":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"19":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"20":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"21":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"22":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"23":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"24":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"25":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"26":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"27":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"28":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"33":[[":                                                                                                                                      ",{}]]},"cursor":{"x":1}}],[1.819552,{"lines":{"0":[["|",{"fg":1}],["\\",{"fg":2}],["  Merge: e1ef63d 5e3245c                                                                                                             ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 12 11:46:50 2015 -0600                                                                                             ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Merge branch 'iterative_refactor'                                                                                              ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     I made the print statement more effective and used the iterative implementation                                                ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     of fibonacci.                                                                                                                  ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"9":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"15":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"18":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"19":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"20":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"21":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"22":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"23":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"24":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"25":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"26":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"27":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]]}}],[0.326844,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 12 11:46:50 2015 -0600                                                                                             ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Merge branch 'iterative_refactor'                                                                                              ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     I made the print statement more effective and used the iterative implementation                                                ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     of fibonacci.                                                                                                                  ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"8":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"14":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"18":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"19":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"20":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"21":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"22":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"23":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"24":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"25":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"26":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"32":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]]}}],[0.125407,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 12 11:46:50 2015 -0600                                                                                             ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Merge branch 'iterative_refactor'                                                                                              ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     I made the print statement more effective and used the iterative implementation                                                ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     of fibonacci.                                                                                                                  ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"7":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"13":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"18":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"19":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"20":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"21":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"22":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"23":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"24":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"25":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"31":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]]}}],[0.103568,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Merge branch 'iterative_refactor'                                                                                              ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     I made the print statement more effective and used the iterative implementation                                                ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     of fibonacci.                                                                                                                  ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"6":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"12":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"18":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"19":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"20":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"21":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"22":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"23":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"24":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"30":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]]}}],[0.259391,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Merge branch 'iterative_refactor'                                                                                              ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     I made the print statement more effective and used the iterative implementation                                                ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     of fibonacci.                                                                                                                  ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"5":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"11":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"17":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"18":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"19":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"20":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"21":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"22":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"23":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"29":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]]}}],[0.125101,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     I made the print statement more effective and used the iterative implementation                                                ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     of fibonacci.                                                                                                                  ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"4":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"10":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"16":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"18":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"19":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"20":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"21":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"22":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"28":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]]}}],[0.120527,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     I made the print statement more effective and used the iterative implementation                                                ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     of fibonacci.                                                                                                                  ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"3":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"9":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"15":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"18":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"19":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"20":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"21":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"27":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]]}}],[0.173307,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     of fibonacci.                                                                                                                  ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"2":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"8":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"14":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"18":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"19":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"20":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"26":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"32":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]]}}],[0.130189,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"1":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"7":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"13":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"18":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"19":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"25":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"31":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]]}}],[0.120347,{"lines":{"0":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"6":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"12":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"18":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"19":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"24":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"30":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                              ",{}]]}}],[0.115528,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"5":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"11":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"17":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"18":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"19":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"23":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"29":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                              ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]]}}],[0.164195,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"4":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"10":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"16":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"17":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"18":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"19":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"22":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"28":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                              ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Create a Fibonacci Sequence                                                                                                    ",{}]]}}],[0.148057,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"3":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"9":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"15":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"16":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"17":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"18":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"19":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"21":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"27":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                              ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Create a Fibonacci Sequence                                                                                                    ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]]}}],[0.128622,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"2":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"8":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"14":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"15":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"16":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"17":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"18":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"19":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"20":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"26":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                              ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Create a Fibonacci Sequence                                                                                                    ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"32":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit 8f01ee3d65532c24b97b2138a88793979f9b281e",{"fg":3}],["                                                                                    ",{}]]}}],[0.12081,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"1":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"7":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"13":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"14":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"15":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"16":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"17":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"18":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"19":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"25":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                              ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Create a Fibonacci Sequence                                                                                                    ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"31":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit 8f01ee3d65532c24b97b2138a88793979f9b281e",{"fg":3}],["                                                                                    ",{}]],"32":[["|/",{"fg":2}],["  Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]]}}],[0.116539,{"lines":{"0":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"6":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"12":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"13":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"14":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"15":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"16":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"17":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"18":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"19":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"24":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                              ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Create a Fibonacci Sequence                                                                                                    ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"30":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit 8f01ee3d65532c24b97b2138a88793979f9b281e",{"fg":3}],["                                                                                    ",{}]],"31":[["|/",{"fg":2}],["  Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"32":[["|",{"fg":2}],["   Date:   Thu Mar 5 08:40:31 2015 -0700                                                                                              ",{}]]}}],[0.101674,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"5":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"11":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"12":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"13":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"14":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"15":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"16":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"17":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"18":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"19":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"23":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                              ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Create a Fibonacci Sequence                                                                                                    ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"29":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit 8f01ee3d65532c24b97b2138a88793979f9b281e",{"fg":3}],["                                                                                    ",{}]],"30":[["|/",{"fg":2}],["  Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"31":[["|",{"fg":2}],["   Date:   Thu Mar 5 08:40:31 2015 -0700                                                                                              ",{}]],"32":[["|",{"fg":2}],["                                                                                                                                      ",{}]]}}],[0.115312,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"4":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"10":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"11":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"12":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"13":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"14":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"15":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"16":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"17":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"18":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"19":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"22":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                              ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Create a Fibonacci Sequence                                                                                                    ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"28":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit 8f01ee3d65532c24b97b2138a88793979f9b281e",{"fg":3}],["                                                                                    ",{}]],"29":[["|/",{"fg":2}],["  Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"30":[["|",{"fg":2}],["   Date:   Thu Mar 5 08:40:31 2015 -0700                                                                                              ",{}]],"31":[["|",{"fg":2}],["                                                                                                                                      ",{}]],"32":[["|",{"fg":2}],["       Recursive Fibonacci Definition                                                                                                 ",{}]]}}],[0.494318,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"5":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"11":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"12":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"13":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"14":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"15":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"16":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"17":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"18":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"19":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"23":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                              ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Create a Fibonacci Sequence                                                                                                    ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"29":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit 8f01ee3d65532c24b97b2138a88793979f9b281e",{"fg":3}],["                                                                                    ",{}]],"30":[["|/",{"fg":2}],["  Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"31":[["|",{"fg":2}],["   Date:   Thu Mar 5 08:40:31 2015 -0700                                                                                              ",{}]],"32":[["|",{"fg":2}],["                                                                                                                                      ",{}]]}}],[0.234403,{"lines":{"0":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"6":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"12":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"13":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"14":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"15":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"16":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"17":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"18":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"19":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"24":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                              ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Create a Fibonacci Sequence                                                                                                    ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"30":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit 8f01ee3d65532c24b97b2138a88793979f9b281e",{"fg":3}],["                                                                                    ",{}]],"31":[["|/",{"fg":2}],["  Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"32":[["|",{"fg":2}],["   Date:   Thu Mar 5 08:40:31 2015 -0700                                                                                              ",{}]]}}],[0.202497,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"1":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"7":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"13":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"14":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"15":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"16":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"17":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"18":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"19":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"25":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                              ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Create a Fibonacci Sequence                                                                                                    ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"31":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit 8f01ee3d65532c24b97b2138a88793979f9b281e",{"fg":3}],["                                                                                    ",{}]],"32":[["|/",{"fg":2}],["  Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]]}}],[0.179238,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"2":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"8":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"14":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"15":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"16":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"17":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"18":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"19":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"20":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"26":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                              ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Create a Fibonacci Sequence                                                                                                    ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"32":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit 8f01ee3d65532c24b97b2138a88793979f9b281e",{"fg":3}],["                                                                                    ",{}]]}}],[0.167363,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"3":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"9":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"15":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"16":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"17":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"18":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"19":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"21":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"27":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                              ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Create a Fibonacci Sequence                                                                                                    ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]]}}],[0.165746,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"4":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"10":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"16":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"17":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"18":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"19":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"22":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"28":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                              ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Create a Fibonacci Sequence                                                                                                    ",{}]]}}],[0.143615,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"5":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"11":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"17":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"18":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"19":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"23":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"29":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                              ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]]}}],[0.13335,{"lines":{"0":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"6":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"12":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"18":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"19":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"24":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"30":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:41:19 2015 -0700                                                                                              ",{}]]}}],[0.659903,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"1":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"7":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"13":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"18":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"19":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"25":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"31":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]]}}],[0.040316,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     of fibonacci.                                                                                                                  ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"2":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"8":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"14":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"18":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"19":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"20":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"26":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"32":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],["                                                                                    ",{}]]}}],[0.040654,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     I made the print statement more effective and used the iterative implementation                                                ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     of fibonacci.                                                                                                                  ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"3":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"9":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"15":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"18":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"19":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"20":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"21":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"22":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"27":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]]}}],[0.040405,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     I made the print statement more effective and used the iterative implementation                                                ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     of fibonacci.                                                                                                                  ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"4":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"10":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"16":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"18":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"19":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"20":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"21":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"22":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"23":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"28":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Add Print of Summation of Sequence                                                                                             ",{}]]}}],[0.040167,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Merge branch 'iterative_refactor'                                                                                              ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     I made the print statement more effective and used the iterative implementation                                                ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     of fibonacci.                                                                                                                  ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"5":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"11":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"17":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"18":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"19":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"20":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"21":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"22":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"23":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"24":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"29":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]]}}],[0.040501,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Merge branch 'iterative_refactor'                                                                                              ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     I made the print statement more effective and used the iterative implementation                                                ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     of fibonacci.                                                                                                                  ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"6":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"12":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"18":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"19":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"20":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"21":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"22":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"23":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"24":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"25":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"30":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:42:29 2015 -0700                                                                                              ",{}]]}}],[0.039709,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 12 11:46:50 2015 -0600                                                                                             ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Merge branch 'iterative_refactor'                                                                                              ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     I made the print statement more effective and used the iterative implementation                                                ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     of fibonacci.                                                                                                                  ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"7":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"13":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"18":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"19":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"20":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"21":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"22":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"23":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"24":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"25":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"26":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"31":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]]}}],[0.040394,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 12 11:46:50 2015 -0600                                                                                             ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Merge branch 'iterative_refactor'                                                                                              ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     I made the print statement more effective and used the iterative implementation                                                ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     of fibonacci.                                                                                                                  ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"8":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"14":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"18":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"19":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"20":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"21":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"22":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"23":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"24":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"25":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"26":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"27":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"32":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],["                                                                                    ",{}]]}}],[0.040891,{"lines":{"0":[["|",{"fg":1}],["\\",{"fg":2}],["  Merge: e1ef63d 5e3245c                                                                                                             ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 12 11:46:50 2015 -0600                                                                                             ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Merge branch 'iterative_refactor'                                                                                              ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     I made the print statement more effective and used the iterative implementation                                                ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     of fibonacci.                                                                                                                  ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"9":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"15":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"18":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"19":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"20":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"21":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"22":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"23":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"24":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"25":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"26":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"27":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"28":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]]}}],[0.039641,{"lines":{"0":[["*   ",{}],["commit 9ac0e47adbc87a2ca9a911a9e906d9ae54f1f512",{"fg":3}],["                                                                                    ",{}]],"1":[["|",{"fg":1}],["\\",{"fg":2}],["  Merge: e1ef63d 5e3245c                                                                                                             ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 12 11:46:50 2015 -0600                                                                                             ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Merge branch 'iterative_refactor'                                                                                              ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     I made the print statement more effective and used the iterative implementation                                                ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     of fibonacci.                                                                                                                  ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"10":[["|",{"fg":1}],[" * ",{}],["commit 5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],["                                                                                    ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"16":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"17":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"18":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"19":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"20":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"21":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"22":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"23":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"24":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"25":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"26":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"27":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"28":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"29":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"30":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"31":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"32":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]]}}],[0.040582,{}],[0.040675,{}],[0.040392,{}],[0.040393,{}],[0.039972,{}],[0.03968,{}],[0.040754,{}],[0.040467,{}],[0.04032,{}],[0.039941,{}],[0.040293,{}],[119.825513,{"lines":{"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.000479,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[0.888826,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --graph                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":31}}],[0.170522,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --abbrev                                                                            ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":32}}],[0.457083,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.351738,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git commit                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.150798,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]}}],[0.248924,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> ruby fib.rb                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.221072,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git add fib.rb                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":30}}],[3.096382,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> ruby fib.rb                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.143542,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git status                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.117927,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git commit                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]}}],[0.120649,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.128214,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --abbrev                                                                            ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":32}}],[0.130832,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --graph                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":31}}],[0.135212,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[0.602625,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.09365800000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.104725,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.046099,{"cursor":{"x":20}}],[0.066593,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git l                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.15783,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git lo                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.098001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git lon                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.174707,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git lone                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.312665,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git lon                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.113655,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git long                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.132412,{}],[0.384453,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git lon                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.122611,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git lo                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.07074900000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.09041299999999999,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log",{}],[" ",{"bold":true}],["                                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.08236400000000001,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]}}],[1.79742,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log -                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.130704,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.191363,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --p                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.122071,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --pr                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":28}}],[0.125537,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --pretty",{}],["=",{"bold":true}],["                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":33}}],[0.259307,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --pretty=o                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":34}}],[0.23572,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --pretty=oneline",{}],[" ",{"bold":true}],["                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":41}}],[0.330649,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log --pretty=oneline                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":40}}],[0.003632,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"5":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"11":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"16":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"17":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"18":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"19":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"21":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"22":[["benjica@",{}],["gunter",{"underline":true}],["> git log --pretty=oneline                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"23":[["9ac0e47adbc87a2ca9a911a9e906d9ae54f1f512",{"fg":3}],[" Merge branch 'iterative_refactor'                                                             ",{}]],"24":[["e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],[" Updated Recursive Function Names                                                              ",{}]],"25":[["5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],[" Updated Function Names                                                                        ",{}]],"26":[["d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],[" Add Print of Summation of Sequence                                                            ",{}]],"27":[["b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],[" Create a Fibonacci Sequence                                                                   ",{}]],"28":[["1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],[" Print the sum of the list                                                                     ",{}]],"29":[["cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],[" Implment Iterative Version of  Fibonacci List                                                 ",{}]],"30":[["8f01ee3d65532c24b97b2138a88793979f9b281e",{"fg":3}],[" Recursive Fibonacci Definition                                                                ",{}]],"31":[["6724d2fedfd2ccd17feb24215ca531955ef530ca",{"fg":3}],[" Initial Program Definition                                                                    ",{}]],"32":[["9e24883bbcf0dc3d304c5a3a6bd606bfc931281b",{"fg":3}],[" Initial Commit                                                                                ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[15.401303,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.126501,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.331724,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.113081,{"cursor":{"x":20}}],[0.091673,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git r                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.08948,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git re                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.245169,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git res                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.22196,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset",{}],[" ",{"bold":true}],["                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.322035,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset -                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.133788,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":28}}],[0.131173,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --h                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":29}}],[0.326522,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard",{}],[" ",{"bold":true}],["                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":33}}],[2.858451,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard H                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":34}}],[0.244673,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD",{}],[" ",{"bold":true}],["                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":38}}],[0.496933,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":37}}],[0.463511,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD`                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":38}}],[0.631148,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":37}}],[0.403857,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":38}}],[25.018651,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~3                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":39}}],[46.447128,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD~                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":38}}],[0.142232,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":37}}],[0.126921,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEA                                                                        ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":36}}],[0.116309,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HE                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":35}}],[0.126486,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard H                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":34}}],[0.133917,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard                                                                            ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":33}}],[0.170343,{"cursor":{"x":32}}],[0.6448430000000001,{"cursor":{"x":33}}],[46.019125,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard 9                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":34}}],[0.702358,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard 93                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":35}}],[0.4947,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard 9                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":34}}],[0.275639,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard 9E                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":35}}],[0.597743,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard 9                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":34}}],[0.432925,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard 9e                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":35}}],[0.942349,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard 9e2                                                                        ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":36}}],[1.651632,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard 9e23                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":37}}],[0.764409,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard 9e2                                                                        ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":36}}],[0.191622,{}],[0.323516,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard 9e24                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":37}}],[0.510231,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard 9e248                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":38}}],[0.170267,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard 9e2488                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":39}}],[5.905702,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:02 2015 -0700                                                                                              ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"4":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"10":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"15":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"16":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"17":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"18":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"19":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"20":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"21":[["benjica@",{}],["gunter",{"underline":true}],["> git log --pretty=oneline                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"22":[["9ac0e47adbc87a2ca9a911a9e906d9ae54f1f512",{"fg":3}],[" Merge branch 'iterative_refactor'                                                             ",{}]],"23":[["e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],[" Updated Recursive Function Names                                                              ",{}]],"24":[["5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],[" Updated Function Names                                                                        ",{}]],"25":[["d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],[" Add Print of Summation of Sequence                                                            ",{}]],"26":[["b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],[" Create a Fibonacci Sequence                                                                   ",{}]],"27":[["1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],[" Print the sum of the list                                                                     ",{}]],"28":[["cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],[" Implment Iterative Version of  Fibonacci List                                                 ",{}]],"29":[["8f01ee3d65532c24b97b2138a88793979f9b281e",{"fg":3}],[" Recursive Fibonacci Definition                                                                ",{}]],"30":[["6724d2fedfd2ccd17feb24215ca531955ef530ca",{"fg":3}],[" Initial Program Definition                                                                    ",{}]],"31":[["9e24883bbcf0dc3d304c5a3a6bd606bfc931281b",{"fg":3}],[" Initial Commit                                                                                ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard 9e2488                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.007788,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"3":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"9":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"14":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"15":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"16":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"17":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"18":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"19":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"20":[["benjica@",{}],["gunter",{"underline":true}],["> git log --pretty=oneline                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"21":[["9ac0e47adbc87a2ca9a911a9e906d9ae54f1f512",{"fg":3}],[" Merge branch 'iterative_refactor'                                                             ",{}]],"22":[["e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],[" Updated Recursive Function Names                                                              ",{}]],"23":[["5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],[" Updated Function Names                                                                        ",{}]],"24":[["d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],[" Add Print of Summation of Sequence                                                            ",{}]],"25":[["b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],[" Create a Fibonacci Sequence                                                                   ",{}]],"26":[["1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],[" Print the sum of the list                                                                     ",{}]],"27":[["cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],[" Implment Iterative Version of  Fibonacci List                                                 ",{}]],"28":[["8f01ee3d65532c24b97b2138a88793979f9b281e",{"fg":3}],[" Recursive Fibonacci Definition                                                                ",{}]],"29":[["6724d2fedfd2ccd17feb24215ca531955ef530ca",{"fg":3}],[" Initial Program Definition                                                                    ",{}]],"30":[["9e24883bbcf0dc3d304c5a3a6bd606bfc931281b",{"fg":3}],[" Initial Commit                                                                                ",{}]],"31":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard 9e2488                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"32":[["HEAD is now at 9e24883 Initial Commit                                                                                                  ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[18.875093,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.043557,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.161383,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.127409,{"cursor":{"x":20}}],[0.103345,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git l                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.15407,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git lo                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.080085,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git log                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.125445,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Updated Function Names                                                                                                         ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"2":[["|",{"fg":1}],[" * ",{}],["commit 1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],["                                                                                    ",{}]],"3":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:52:57 2015 -0700                                                                                              ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"8":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"9":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"10":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"11":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"12":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"13":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"14":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"15":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"16":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"17":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"18":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"19":[["benjica@",{}],["gunter",{"underline":true}],["> git log --pretty=oneline                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"20":[["9ac0e47adbc87a2ca9a911a9e906d9ae54f1f512",{"fg":3}],[" Merge branch 'iterative_refactor'                                                             ",{}]],"21":[["e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],[" Updated Recursive Function Names                                                              ",{}]],"22":[["5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],[" Updated Function Names                                                                        ",{}]],"23":[["d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],[" Add Print of Summation of Sequence                                                            ",{}]],"24":[["b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],[" Create a Fibonacci Sequence                                                                   ",{}]],"25":[["1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],[" Print the sum of the list                                                                     ",{}]],"26":[["cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],[" Implment Iterative Version of  Fibonacci List                                                 ",{}]],"27":[["8f01ee3d65532c24b97b2138a88793979f9b281e",{"fg":3}],[" Recursive Fibonacci Definition                                                                ",{}]],"28":[["6724d2fedfd2ccd17feb24215ca531955ef530ca",{"fg":3}],[" Initial Program Definition                                                                    ",{}]],"29":[["9e24883bbcf0dc3d304c5a3a6bd606bfc931281b",{"fg":3}],[" Initial Commit                                                                                ",{}]],"30":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard 9e2488                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"31":[["HEAD is now at 9e24883 Initial Commit                                                                                                  ",{}]],"32":[["benjica@",{}],["gunter",{"underline":true}],["> git log                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0}}],[0.007456999999999999,{"lines":{"0":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"1":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Print the sum of the list                                                                                                      ",{}]],"2":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"3":[["|",{"fg":1}],[" * ",{}],["commit cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],["                                                                                    ",{}]],"4":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"5":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:50:22 2015 -0700                                                                                              ",{}]],"6":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"7":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["     Implment Iterative Version of  Fibonacci List                                                                                  ",{}]],"8":[["|",{"fg":1}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"9":[["* ",{}],["|",{"fg":2}],[" ",{}],["commit e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],["                                                                                    ",{}]],"10":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Author: Benjamin Campbell <benji@benjica.com>                                                                                      ",{}]],"11":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],[" Date:   Thu Mar 5 08:59:28 2015 -0700                                                                                              ",{}]],"12":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["                                                                                                                                    ",{}]],"13":[["|",{"fg":2}],[" ",{}],["|",{"fg":2}],["     Updated Recursive Function Names                                                                                               ",{}]],"14":[["benjica@",{}],["gunter",{"underline":true}],["> git log --pretty=oneline                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"15":[["9ac0e47adbc87a2ca9a911a9e906d9ae54f1f512",{"fg":3}],[" Merge branch 'iterative_refactor'                                                             ",{}]],"16":[["e1ef63de26398cbc32025d9588057c7eb9901099",{"fg":3}],[" Updated Recursive Function Names                                                              ",{}]],"17":[["5e3245cf7dc84894491c63c4b184055b345e0ac7",{"fg":3}],[" Updated Function Names                                                                        ",{}]],"18":[["d0e33b296197358602cf4dc4909d33dec0270ee1",{"fg":3}],[" Add Print of Summation of Sequence                                                            ",{}]],"19":[["b254e4a86bcbaead2a5ac82d58e141a279bd29d0",{"fg":3}],[" Create a Fibonacci Sequence                                                                   ",{}]],"20":[["1b3f41623d2007900ee860b6037ca32a6a62dc2b",{"fg":3}],[" Print the sum of the list                                                                     ",{}]],"21":[["cc9e6f47a5738ef656083ce585cbebd1b2b3378c",{"fg":3}],[" Implment Iterative Version of  Fibonacci List                                                 ",{}]],"22":[["8f01ee3d65532c24b97b2138a88793979f9b281e",{"fg":3}],[" Recursive Fibonacci Definition                                                                ",{}]],"23":[["6724d2fedfd2ccd17feb24215ca531955ef530ca",{"fg":3}],[" Initial Program Definition                                                                    ",{}]],"24":[["9e24883bbcf0dc3d304c5a3a6bd606bfc931281b",{"fg":3}],[" Initial Commit                                                                                ",{}]],"25":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard 9e2488                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"26":[["HEAD is now at 9e24883 Initial Commit                                                                                                  ",{}]],"27":[["benjica@",{}],["gunter",{"underline":true}],["> git log                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"28":[["commit 9e24883bbcf0dc3d304c5a3a6bd606bfc931281b",{"fg":3}],["                                                                                        ",{}]],"29":[["Author: Benjamin Campbell <benji@benjica.com>                                                                                          ",{}]],"30":[["Date:   Thu Mar 5 07:53:25 2015 -0700                                                                                                  ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["    Initial Commit                                                                                                                     ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[10.41172,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.138577,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.11515,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.083041,{"cursor":{"x":20}}],[0.217762,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git r                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.079692,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git re                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.126872,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git ref                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.143066,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reflog",{}],[" ",{"bold":true}],["                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.54525,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git reflog                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.00957,{"lines":{"0":[["Date:   Thu Mar 5 07:53:25 2015 -0700                                                                                                  ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["    Initial Commit                                                                                                                     ",{}]],"3":[["benjica@",{}],["gunter",{"underline":true}],["> git reflog                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"4":[["9e24883",{"fg":3}],[" HEAD@{0}: reset: moving to 9e2488                                                                                              ",{}]],"5":[["9ac0e47",{"fg":3}],[" HEAD@{1}: commit (merge): Merge branch 'iterative_refactor'                                                                    ",{}]],"6":[["e1ef63d",{"fg":3}],[" HEAD@{2}: reset: moving to HEAD~                                                                                               ",{}]],"7":[["de1e9fc",{"fg":3}],[" HEAD@{3}: merge iterative_refactor: Merge made by the 'recursive' strategy.                                                    ",{}]],"8":[["e1ef63d",{"fg":3}],[" HEAD@{4}: checkout: moving from iterative_refactor to master                                                                   ",{}]],"9":[["5e3245c",{"fg":3}],[" HEAD@{5}: checkout: moving from master to iterative_refactor                                                                   ",{}]],"10":[["e1ef63d",{"fg":3}],[" HEAD@{6}: commit: Updated Recursive Function Names                                                                             ",{}]],"11":[["d0e33b2",{"fg":3}],[" HEAD@{7}: checkout: moving from iterative_refactor to master                                                                   ",{}]],"12":[["5e3245c",{"fg":3}],[" HEAD@{8}: commit: Updated Function Names                                                                                       ",{}]],"13":[["1b3f416",{"fg":3}],[" HEAD@{9}: checkout: moving from master to iterative_refactor                                                                   ",{}]],"14":[["d0e33b2",{"fg":3}],[" HEAD@{10}: rebase -i (finish): returning to refs/heads/master                                                                  ",{}]],"15":[["d0e33b2",{"fg":3}],[" HEAD@{11}: rebase -i (pick): Add Print of Summation of Sequence                                                                ",{}]],"16":[["b254e4a",{"fg":3}],[" HEAD@{12}: rebase -i (squash): Create a Fibonacci Sequence                                                                     ",{}]],"17":[["84a9b65",{"fg":3}],[" HEAD@{13}: rebase -i (start): checkout HEAD~3                                                                                  ",{}]],"18":[["07bb65b",{"fg":3}],[" HEAD@{14}: commit: Corrected range of list                                                                                     ",{}]],"19":[["69baed7",{"fg":3}],[" HEAD@{15}: checkout: moving from iterative_refactor to master                                                                  ",{}]],"20":[["1b3f416",{"fg":3}],[" HEAD@{16}: commit: Print the sum of the list                                                                                   ",{}]],"21":[["cc9e6f4",{"fg":3}],[" HEAD@{17}: commit (amend): Implment Iterative Version of Fibonacci List                                                        ",{}]],"22":[["690124f",{"fg":3}],[" HEAD@{18}: commit: Implment Iterative Version of Fibonacci List                                                                ",{}]],"23":[["6724d2f",{"fg":3}],[" HEAD@{19}: checkout: moving from iterative_refactor to iterative_refactor                                                      ",{}]],"24":[["6724d2f",{"fg":3}],[" HEAD@{20}: checkout: moving from iterative_refactor to iterative_refactor                                                      ",{}]],"25":[["6724d2f",{"fg":3}],[" HEAD@{21}: checkout: moving from iterative_refactor to iterative_refactor                                                      ",{}]],"26":[["6724d2f",{"fg":3}],[" HEAD@{22}: checkout: moving from master to iterative_refactor                                                                  ",{}]],"27":[["69baed7",{"fg":3}],[" HEAD@{23}: commit: Add Print of Summation of Sequence                                                                          ",{}]],"28":[["84a9b65",{"fg":3}],[" HEAD@{24}: commit: Create a Fibonacci Sequence                                                                                 ",{}]],"29":[["8f01ee3",{"fg":3}],[" HEAD@{25}: commit: Recursive Fibonacci Definition                                                                              ",{}]],"30":[["6724d2f",{"fg":3}],[" HEAD@{26}: commit (amend): Initial Program Definition                                                                          ",{}]],"31":[["5b681c9",{"fg":3}],[" HEAD@{27}: commit: Initial Program Definition                                                                                  ",{}]],"32":[["9e24883",{"fg":3}],[" HEAD@{28}: commit (initial): Initial Commit                                                                                    ",{}]],"33":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[134.9971,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> g                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.130645,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> gi                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.032983,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.148836,{"cursor":{"x":20}}],[0.133791,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git r                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.058505,{"lines":{"33":[["benjica@",{}],["gunter",{"underline":true}],["> git re                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.186841,{}],[0.000143,{"lines":{"0":[["d0e33b2",{"fg":3}],[" HEAD@{10}: rebase -i (finish): returning to refs/heads/master                                                                  ",{}]],"1":[["d0e33b2",{"fg":3}],[" HEAD@{11}: rebase -i (pick): Add Print of Summation of Sequence                                                                ",{}]],"2":[["b254e4a",{"fg":3}],[" HEAD@{12}: rebase -i (squash): Create a Fibonacci Sequence                                                                     ",{}]],"3":[["84a9b65",{"fg":3}],[" HEAD@{13}: rebase -i (start): checkout HEAD~3                                                                                  ",{}]],"4":[["07bb65b",{"fg":3}],[" HEAD@{14}: commit: Corrected range of list                                                                                     ",{}]],"5":[["69baed7",{"fg":3}],[" HEAD@{15}: checkout: moving from iterative_refactor to master                                                                  ",{}]],"6":[["1b3f416",{"fg":3}],[" HEAD@{16}: commit: Print the sum of the list                                                                                   ",{}]],"7":[["cc9e6f4",{"fg":3}],[" HEAD@{17}: commit (amend): Implment Iterative Version of Fibonacci List                                                        ",{}]],"8":[["690124f",{"fg":3}],[" HEAD@{18}: commit: Implment Iterative Version of Fibonacci List                                                                ",{}]],"9":[["6724d2f",{"fg":3}],[" HEAD@{19}: checkout: moving from iterative_refactor to iterative_refactor                                                      ",{}]],"10":[["6724d2f",{"fg":3}],[" HEAD@{20}: checkout: moving from iterative_refactor to iterative_refactor                                                      ",{}]],"11":[["6724d2f",{"fg":3}],[" HEAD@{21}: checkout: moving from iterative_refactor to iterative_refactor                                                      ",{}]],"12":[["6724d2f",{"fg":3}],[" HEAD@{22}: checkout: moving from master to iterative_refactor                                                                  ",{}]],"13":[["69baed7",{"fg":3}],[" HEAD@{23}: commit: Add Print of Summation of Sequence                                                                          ",{}]],"14":[["84a9b65",{"fg":3}],[" HEAD@{24}: commit: Create a Fibonacci Sequence                                                                                 ",{}]],"15":[["8f01ee3",{"fg":3}],[" HEAD@{25}: commit: Recursive Fibonacci Definition                                                                              ",{}]],"16":[["6724d2f",{"fg":3}],[" HEAD@{26}: commit (amend): Initial Program Definition                                                                          ",{}]],"17":[["5b681c9",{"fg":3}],[" HEAD@{27}: commit: Initial Program Definition                                                                                  ",{}]],"18":[["9e24883",{"fg":3}],[" HEAD@{28}: commit (initial): Initial Commit                                                                                    ",{}]],"19":[["benjica@",{}],["gunter",{"underline":true}],["> git re                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"20":[["read-tree  -- read tree information into directory index                                                                               ",{}]],"21":[["rebase  -- forward-port local commits to the updated upstream head                                                                     ",{}]],"22":[["receive-pack  -- receive what is pushed into repository                                                                                ",{}]],"23":[["reflog   -- manage reflog information                                                                                                  ",{}]],"24":[["relink   -- hardlink common objects in local repositories                                                                              ",{}]],"25":[["remote   -- manage set of tracked repositories                                                                                         ",{}]],"26":[["repack   -- pack unpacked objects in a repository                                                                                      ",{}]],"27":[["replace  -- create, list, delete refs to replace objects                                                                               ",{}]],"28":[["request-pull  -- generate summary of pending changes                                                                                   ",{}]],"29":[["rerere     -- reuse recorded resolution of conflicted merges                                                                           ",{}]],"30":[["reset   -- reset current HEAD to specified state                                                                                       ",{}]],"31":[["rev-list  -- list commit object in reverse chronological order                                                                         ",{}]],"32":[["rev-parse  -- pick out and massage parameters for other git commands                                                                   ",{}]],"33":[["revert  -- revert existing commits                                                                                                     ",{}]]},"cursor":{"y":19}}],[0.608769,{"lines":{"19":[["benjica@",{}],["gunter",{"underline":true}],["> git res                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.166178,{"lines":{"19":[["benjica@",{}],["gunter",{"underline":true}],["> git reset",{}],[" ",{"bold":true}],["                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.388012,{"lines":{"19":[["benjica@",{}],["gunter",{"underline":true}],["> git reset -                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.135921,{"lines":{"19":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":28}}],[0.136095,{"lines":{"19":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --h                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":29}}],[0.049389,{"lines":{"19":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --ha                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":30}}],[0.115573,{"lines":{"19":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --har                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":31}}],[0.149113,{"lines":{"19":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard",{}],[" ",{"bold":true}],["                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":33}}],[0.368498,{"lines":{"19":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard H                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":34}}],[0.387426,{"lines":{"19":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD",{}],[" ",{"bold":true}],["                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":38}}],[0.525108,{"lines":{"19":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":37}}],[0.581137,{"lines":{"19":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD@                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":38}}],[0.308444,{"lines":{"19":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD@{                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":39}}],[0.504258,{"lines":{"19":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD@{1                                                                    ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":40}}],[0.6321329999999999,{"lines":{"19":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD@{1}                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":41}}],[0.265049,{"lines":{"20":[["                                                                                                                                       ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0,"y":20}}],[0.005942,{"lines":{"20":[["HEAD is now at 9ac0e47 Merge branch 'iterative_refactor'                                                                               ",{}]],"21":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16,"y":21}}],[271.519453,{"lines":{"21":[["benjica@",{}],["gunter",{"underline":true}],["> m                                                                                           ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":17}}],[0.075507,{"lines":{"21":[["benjica@",{}],["gunter",{"underline":true}],["> ma                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[0.112033,{"lines":{"21":[["benjica@",{}],["gunter",{"underline":true}],["> man                                                                                         ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":19}}],[0.131695,{"cursor":{"x":20}}],[0.805768,{"lines":{"21":[["benjica@",{}],["gunter",{"underline":true}],["> man g                                                                                       ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":21}}],[0.041768,{"lines":{"21":[["benjica@",{}],["gunter",{"underline":true}],["> man gi                                                                                      ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":22}}],[0.330433,{}],[0.000371,{"lines":{"22":[["zsh: do you wish to see all 190 possibilities (48 lines)?                                                                              ",{}]]},"cursor":{"x":58,"y":22}}],[0.677722,{"lines":{"22":[["                                                                                                                                       ",{}]]},"cursor":{"x":16,"y":21}}],[5e-06,{"cursor":{"x":22}}],[0.374218,{"lines":{"21":[["benjica@",{}],["gunter",{"underline":true}],["> man git                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.156134,{"cursor":{"x":24}}],[0.141715,{"lines":{"21":[["benjica@",{}],["gunter",{"underline":true}],["> man git c                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":25}}],[0.040502,{"lines":{"21":[["benjica@",{}],["gunter",{"underline":true}],["> man git co                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":26}}],[0.107523,{"lines":{"21":[["benjica@",{}],["gunter",{"underline":true}],["> man git con                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":27}}],[0.090861,{"lines":{"21":[["benjica@",{}],["gunter",{"underline":true}],["> man git conf                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":28}}],[0.110391,{"lines":{"21":[["benjica@",{}],["gunter",{"underline":true}],["> man git confi                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":29}}],[0.137803,{"lines":{"21":[["benjica@",{}],["gunter",{"underline":true}],["> man git config                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":30}}],[1.142553,{"cursor":{"x":29}}],[0.16607,{"cursor":{"x":28}}],[0.11532,{"cursor":{"x":27}}],[0.126837,{"cursor":{"x":26}}],[0.172497,{"cursor":{"x":25}}],[0.349645,{"cursor":{"x":24}}],[0.729116,{"lines":{"21":[["benjica@",{}],["gunter",{"underline":true}],["> man gitconfig                                                                               ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":23}}],[0.253906,{"lines":{"21":[["benjica@",{}],["gunter",{"underline":true}],["> man git-config                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":24}}],[0.211373,{"cursor":{"x":0,"y":22}}],[0.05218,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["                                                                                                                                       ",{}]]}}],[0.023511,{"lines":{"19":[["GIT-CONFIG(1)                                            Git Manual                                           GIT-CONFIG(1)            ",{}]],"21":[["NAME",{"bold":true}],["                                                                                                                                   ",{}]],"22":[["       git-config - Get and set repository or global options                                                                           ",{}]],"24":[["SYNOPSIS",{"bold":true}],["                                                                                                                               ",{}]],"25":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] [type] [-z|--null] name [value [value_regex]]                                                        ",{}]],"26":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] [type] --add name value                                                                              ",{}]],"27":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] [type] --replace-all name value [value_regex]                                                        ",{}]],"28":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] [type] [-z|--null] --get name [value_regex]                                                          ",{}]],"29":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] [type] [-z|--null] --get-all name [value_regex]                                                      ",{}]],"30":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] [type] [-z|--null] --get-regexp name_regex [value_regex]                                             ",{}]],"31":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] [type] [-z|--null] --get-urlmatch name URL                                                           ",{}]],"32":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] --unset name [value_regex]                                                                           ",{}]],"33":[["       ",{}],["gi",{"underline":true}],["                                                                                                                              ",{}]]},"cursor":{"x":9,"y":33}}],[0.000333,{"lines":{"0":[["GIT-CONFIG(1)                                            Git Manual                                           GIT-CONFIG(1)            ",{}]],"2":[["NAME",{"bold":true}],["                                                                                                                                   ",{}]],"3":[["       git-config - Get and set repository or global options                                                                           ",{}]],"5":[["SYNOPSIS",{"bold":true}],["                                                                                                                               ",{}]],"6":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] [type] [-z|--null] name [value [value_regex]]                                                        ",{}]],"7":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] [type] --add name value                                                                              ",{}]],"8":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] [type] --replace-all name value [value_regex]                                                        ",{}]],"9":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] [type] [-z|--null] --get name [value_regex]                                                          ",{}]],"10":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] [type] [-z|--null] --get-all name [value_regex]                                                      ",{}]],"11":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] [type] [-z|--null] --get-regexp name_regex [value_regex]                                             ",{}]],"12":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] [type] [-z|--null] --get-urlmatch name URL                                                           ",{}]],"13":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] --unset name [value_regex]                                                                           ",{}]],"14":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] --unset-all name [value_regex]                                                                       ",{}]],"15":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] --rename-section old_name new_name                                                                   ",{}]],"16":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] --remove-section name                                                                                ",{}]],"17":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] [-z|--null] -l | --list                                                                              ",{}]],"18":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] --get-color name [default]                                                                           ",{}]],"19":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] --get-colorbool name [stdout-is-tty]                                                                 ",{}]],"20":[["       ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" [<file-option>] -e | --edit                                                                                          ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["DESCRIPTION",{"bold":true}],["                                                                                                                            ",{}]],"23":[["       You can query/set/replace/unset options with this command. The name is actually the section and the key separated by            ",{}]],"24":[["       a dot, and the value will be escaped.                                                                                           ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       Multiple lines can be added to an option by using the ",{}],["--add",{"underline":true}],[" option. If you want to update or unset an option which              ",{}]],"27":[["       can occur on multiple lines, a POSIX regexp ",{}],["value_regex",{"bold":true}],[" needs to be given. Only the existing values that match the              ",{}]],"28":[["       regexp are updated or unset. If you want to handle the lines that do ",{}],["not",{"bold":true}],[" match the regex, just prepend a single                 ",{}]],"29":[["       exclamation mark in front (see also the section called “EXAMPLES”).                                                             ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       The type specifier can be either ",{}],["--int",{"underline":true}],[" or ",{}],["--bool",{"underline":true}],[", to make ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" ensure that the variable(s) are of the given               ",{}]],"32":[["       type and convert the value to the canonical form (simple decimal number for int, a \"true\" or \"false\" string for                 ",{}]],"33":[[" Manual page git-config(1) line 1 (press h for help or q to quit)                                                                      ",{}]]},"cursor":{"x":65}}],[1.558863,{"lines":{"33":[["/                                                                                                                                      ",{}]]},"cursor":{"x":1}}],[0.634657,{"lines":{"33":[["/l                                                                                                                                     ",{}]]},"cursor":{"x":2}}],[0.07814599999999999,{"lines":{"33":[["/li                                                                                                                                    ",{}]]},"cursor":{"x":3}}],[0.146447,{"lines":{"33":[["/lin                                                                                                                                   ",{}]]},"cursor":{"x":4}}],[0.072565,{"lines":{"33":[["/line                                                                                                                                  ",{}]]},"cursor":{"x":5}}],[1.723371,{"lines":{"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":43,"y":15}}],[7.6e-05,{"lines":{"0":[["       Multiple lines can be added to an option by using the ",{}],["--add",{"underline":true}],[" option. If you want to update or unset an option which              ",{}]],"1":[["       can occur on multiple lines, a POSIX regexp ",{}],["value_regex",{"bold":true}],[" needs to be given. Only the existing values that match the              ",{}]],"2":[["       regexp are updated or unset. If you want to handle the lines that do ",{}],["not",{"bold":true}],[" match the regex, just prepend a single                 ",{}]],"3":[["       exclamation mark in front (see also the section called “EXAMPLES”).                                                             ",{}]],"5":[["       The type specifier can be either ",{}],["--int",{"underline":true}],[" or ",{}],["--bool",{"underline":true}],[", to make ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" ensure that the variable(s) are of the given               ",{}]],"6":[["       type and convert the value to the canonical form (simple decimal number for int, a \"true\" or \"false\" string for                 ",{}]],"7":[["       bool), or ",{}],["--path",{"underline":true}],[", which does some path expansion (see ",{}],["--path",{"underline":true}],[" below). If no type specifier is passed, no checks or               ",{}]],"8":[["       transformations are performed on the value.                                                                                     ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       When reading, the values are read from the system, global and repository local configuration files by default, and              ",{}]],"11":[["       options ",{}],["--system",{"underline":true}],[", ",{}],["--global",{"underline":true}],[", ",{}],["--local",{"underline":true}],[" and ",{}],["--file",{"underline":true}],[" ",{}],["<filename>",{"underline":true}],[" can be used to tell the command to read from only that                ",{}]],"12":[["       location (see the section called “FILES”).                                                                                      ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       When writing, the new value is written to the repository local configuration file by default, and options ",{}],["--system",{"underline":true}],[",             ",{}]],"15":[["       ",{}],["--global",{"underline":true}],[", ",{}],["--file",{"underline":true}],[" ",{}],["<filename>",{"underline":true}],[" can be used to tell the command to write to that location (you can say ",{}],["--local",{"underline":true}],[" but that             ",{}]],"16":[["       is the default).                                                                                                                ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       This command will fail with non-zero status upon error. Some exit codes are:                                                    ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["        1. The config file is invalid (ret=3),                                                                                         ",{}]],"22":[["        2. can not write to the config file (ret=4),                                                                                   ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["        3. no section or name was provided (ret=2),                                                                                    ",{}]],"26":[["        4. the section or key is invalid (ret=1),                                                                                      ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["        5. you try to unset an option which does not exist (ret=5),                                                                    ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["        6. you try to unset/set an option for which multiple lines match (ret=5), or                                                   ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["        7. you try to use an invalid regexp (ret=6).                                                                                   ",{}]],"33":[[" Manual page git-config(1) line 30 (press h for help or q to quit)                                                                     ",{}]]},"cursor":{"x":66,"y":33}}],[1.597928,{"lines":{"0":[["       can occur on multiple lines, a POSIX regexp ",{}],["value_regex",{"bold":true}],[" needs to be given. Only the existing values that match the              ",{}]],"1":[["       regexp are updated or unset. If you want to handle the lines that do ",{}],["not",{"bold":true}],[" match the regex, just prepend a single                 ",{}]],"2":[["       exclamation mark in front (see also the section called “EXAMPLES”).                                                             ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       The type specifier can be either ",{}],["--int",{"underline":true}],[" or ",{}],["--bool",{"underline":true}],[", to make ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" ensure that the variable(s) are of the given               ",{}]],"5":[["       type and convert the value to the canonical form (simple decimal number for int, a \"true\" or \"false\" string for                 ",{}]],"6":[["       bool), or ",{}],["--path",{"underline":true}],[", which does some path expansion (see ",{}],["--path",{"underline":true}],[" below). If no type specifier is passed, no checks or               ",{}]],"7":[["       transformations are performed on the value.                                                                                     ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       When reading, the values are read from the system, global and repository local configuration files by default, and              ",{}]],"10":[["       options ",{}],["--system",{"underline":true}],[", ",{}],["--global",{"underline":true}],[", ",{}],["--local",{"underline":true}],[" and ",{}],["--file",{"underline":true}],[" ",{}],["<filename>",{"underline":true}],[" can be used to tell the command to read from only that                ",{}]],"11":[["       location (see the section called “FILES”).                                                                                      ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       When writing, the new value is written to the repository local configuration file by default, and options ",{}],["--system",{"underline":true}],[",             ",{}]],"14":[["       ",{}],["--global",{"underline":true}],[", ",{}],["--file",{"underline":true}],[" ",{}],["<filename>",{"underline":true}],[" can be used to tell the command to write to that location (you can say ",{}],["--local",{"underline":true}],[" but that             ",{}]],"15":[["       is the default).                                                                                                                ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       This command will fail with non-zero status upon error. Some exit codes are:                                                    ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["        1. The config file is invalid (ret=3),                                                                                         ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["        2. can not write to the config file (ret=4),                                                                                   ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["        3. no section or name was provided (ret=2),                                                                                    ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["        4. the section or key is invalid (ret=1),                                                                                      ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["        5. you try to unset an option which does not exist (ret=5),                                                                    ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["        6. you try to unset/set an option for which multiple lines match (ret=5), or                                                   ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["        7. you try to use an invalid regexp (ret=6).                                                                                   ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-config(1) line 31 (press h for help or q to quit)                                                                     ",{}]]}}],[0.35577,{"lines":{"0":[["       regexp are updated or unset. If you want to handle the lines that do ",{}],["not",{"bold":true}],[" match the regex, just prepend a single                 ",{}]],"1":[["       exclamation mark in front (see also the section called “EXAMPLES”).                                                             ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       The type specifier can be either ",{}],["--int",{"underline":true}],[" or ",{}],["--bool",{"underline":true}],[", to make ",{}],["git",{"underline":true}],[" ",{}],["config",{"underline":true}],[" ensure that the variable(s) are of the given               ",{}]],"4":[["       type and convert the value to the canonical form (simple decimal number for int, a \"true\" or \"false\" string for                 ",{}]],"5":[["       bool), or ",{}],["--path",{"underline":true}],[", which does some path expansion (see ",{}],["--path",{"underline":true}],[" below). If no type specifier is passed, no checks or               ",{}]],"6":[["       transformations are performed on the value.                                                                                     ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       When reading, the values are read from the system, global and repository local configuration files by default, and              ",{}]],"9":[["       options ",{}],["--system",{"underline":true}],[", ",{}],["--global",{"underline":true}],[", ",{}],["--local",{"underline":true}],[" and ",{}],["--file",{"underline":true}],[" ",{}],["<filename>",{"underline":true}],[" can be used to tell the command to read from only that                ",{}]],"10":[["       location (see the section called “FILES”).                                                                                      ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       When writing, the new value is written to the repository local configuration file by default, and options ",{}],["--system",{"underline":true}],[",             ",{}]],"13":[["       ",{}],["--global",{"underline":true}],[", ",{}],["--file",{"underline":true}],[" ",{}],["<filename>",{"underline":true}],[" can be used to tell the command to write to that location (you can say ",{}],["--local",{"underline":true}],[" but that             ",{}]],"14":[["       is the default).                                                                                                                ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       This command will fail with non-zero status upon error. Some exit codes are:                                                    ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["        1. The config file is invalid (ret=3),                                                                                         ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["        2. can not write to the config file (ret=4),                                                                                   ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["        3. no section or name was provided (ret=2),                                                                                    ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["        4. the section or key is invalid (ret=1),                                                                                      ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["        5. you try to unset an option which does not exist (ret=5),                                                                    ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["        6. you try to unset/set an option for which multiple lines match (ret=5), or                                                   ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["        7. you try to use an invalid regexp (ret=6).                                                                                   ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       On success, the command returns the exit code 0.                                                                                ",{}]],"33":[[" Manual page git-config(1) line 32 (press h for help or q to quit)                                                                     ",{}]]}}],[0.33771,{"lines":{"0":[["        6. you try to unset/set an option for which multiple lines match (ret=5), or                                                   ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["        7. you try to use an invalid regexp (ret=6).                                                                                   ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       On success, the command returns the exit code 0.                                                                                ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"7":[["       --replace-all                                                                                                                   ",{}]],"8":[["           Default behavior is to replace at most one line. This replaces all lines matching the key (and optionally the               ",{}]],"9":[["           value_regex).                                                                                                               ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       --add                                                                                                                           ",{}]],"12":[["           Adds a new line to the option without altering any existing values. This is the same as providing ",{}],["^$",{"underline":true}],[" as the                 ",{}]],"13":[["           value_regex in ",{}],["--replace-all",{"bold":true}],[".                                                                                               ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       --get                                                                                                                           ",{}]],"16":[["           Get the value for a given key (optionally filtered by a regex matching the value). Returns error code 1 if the              ",{}]],"17":[["           key was not found and the last value if multiple key values were found.                                                     ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       --get-all                                                                                                                       ",{}]],"20":[["           Like get, but does not fail if the number of values for the key is not exactly one.                                         ",{}]],"22":[["       --get-regexp                                                                                                                    ",{}]],"23":[["           Like --get-all, but interprets the name as a regular expression and writes out the key names. Regular expression            ",{}]],"24":[["           matching is currently case-sensitive and done against a canonicalized version of the key in which section and               ",{}]],"25":[["           variable names are lowercased, but subsection names are not.                                                                ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       --get-urlmatch name URL                                                                                                         ",{}]],"28":[["           When given a two-part name section.key, the value for section.<url>.key whose <url> part matches the best to the            ",{}]],"29":[["           given URL is returned (if no such key exists, the value for section.key is used as a fallback). When given just             ",{}]],"30":[["           the section as name, do so for all the keys in the section and list them.                                                   ",{}]],"32":[["       --global                                                                                                                        ",{}]],"33":[[" Manual page git-config(1) line 60 (press h for help or q to quit)                                                                     ",{}]]}}],[0.213846,{"lines":{"33":[["/                                                                                                                                      ",{}]]},"cursor":{"x":1}}],[1.182425,{"lines":{"33":[["/e                                                                                                                                     ",{}]]},"cursor":{"x":2}}],[0.10116,{"lines":{"33":[["/en                                                                                                                                    ",{}]]},"cursor":{"x":3}}],[0.092238,{"lines":{"33":[["/end                                                                                                                                   ",{}]]},"cursor":{"x":4}}],[0.11008,{"lines":{"33":[["/endi                                                                                                                                  ",{}]]},"cursor":{"x":5}}],[0.09959999999999999,{"lines":{"33":[["/endin                                                                                                                                 ",{}]]},"cursor":{"x":6}}],[0.10515,{"lines":{"33":[["/ending                                                                                                                                ",{}]]},"cursor":{"x":7}}],[0.155637,{"lines":{"33":[["/endings                                                                                                                               ",{}]]},"cursor":{"x":8}}],[0.077177,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["        7. you try to use an invalid regexp (ret=6).                                                                                   ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       On success, the command returns the exit code 0.                                                                                ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["OPTIONS",{"bold":true}],["                                                                                                                                ",{}]],"6":[["       --replace-all                                                                                                                   ",{}]],"7":[["           Default behavior is to replace at most one line. This replaces all lines matching the key (and optionally the               ",{}]],"8":[["           value_regex).                                                                                                               ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       --add                                                                                                                           ",{}]],"11":[["           Adds a new line to the option without altering any existing values. This is the same as providing ",{}],["^$",{"underline":true}],[" as the                 ",{}]],"12":[["           value_regex in ",{}],["--replace-all",{"bold":true}],[".                                                                                               ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       --get                                                                                                                           ",{}]],"15":[["           Get the value for a given key (optionally filtered by a regex matching the value). Returns error code 1 if the              ",{}]],"16":[["           key was not found and the last value if multiple key values were found.                                                     ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       --get-all                                                                                                                       ",{}]],"19":[["           Like get, but does not fail if the number of values for the key is not exactly one.                                         ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       --get-regexp                                                                                                                    ",{}]],"22":[["           Like --get-all, but interprets the name as a regular expression and writes out the key names. Regular expression            ",{}]],"23":[["           matching is currently case-sensitive and done against a canonicalized version of the key in which section and               ",{}]],"24":[["           variable names are lowercased, but subsection names are not.                                                                ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       --get-urlmatch name URL                                                                                                         ",{}]],"27":[["           When given a two-part name section.key, the value for section.<url>.key whose <url> part matches the best to the            ",{}]],"28":[["           given URL is returned (if no such key exists, the value for section.key is used as a fallback). When given just             ",{}]],"29":[["           the section as name, do so for all the keys in the section and list them.                                                   ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       --global                                                                                                                        ",{}]],"32":[["...skipping...                                                                                                                         ",{}]],"33":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings                                    ",{}]]},"cursor":{"x":100}}],[5.7e-05,{"lines":{"0":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"1":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"2":[["           can corrupt data.                                                                                                           ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"5":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"6":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"9":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"10":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"11":[["           corrupts data.                                                                                                              ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"14":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"15":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"16":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"17":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"18":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       core.autocrlf                                                                                                                   ",{}]],"21":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"22":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"23":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"24":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"25":[["           conversion is performed.                                                                                                    ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       core.symlinks                                                                                                                   ",{}]],"28":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"29":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"30":[["           support symbolic links.                                                                                                     ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"33":[[" Manual page git-config(1) line 554 (press h for help or q to quit)                                                                    ",{}]]},"cursor":{"x":67}}],[1.004856,{"lines":{"33":[["/                                                                                                                                      ",{}]]},"cursor":{"x":1}}],[0.822968,{"lines":{"33":[["/e                                                                                                                                     ",{}]]},"cursor":{"x":2}}],[0.097694,{"lines":{"33":[["/eo                                                                                                                                    ",{}]]},"cursor":{"x":3}}],[0.181449,{"lines":{"33":[["/eol                                                                                                                                   ",{}]]},"cursor":{"x":4}}],[0.206242,{"lines":{"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":68,"y":9}}],[8.500000000000001e-05,{"lines":{"0":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"1":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"2":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"3":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"4":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       core.autocrlf                                                                                                                   ",{}]],"7":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"8":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"9":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"10":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"11":[["           conversion is performed.                                                                                                    ",{}]],"13":[["       core.symlinks                                                                                                                   ",{}]],"14":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"15":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"16":[["           support symbolic links.                                                                                                     ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"19":[["           when the repository is created.                                                                                             ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       core.gitProxy                                                                                                                   ",{}]],"22":[["           A \"proxy command\" to execute (as ",{}],["command",{"underline":true}],[" ",{}],["host",{"underline":true}],[" ",{}],["port",{"underline":true}],[") instead of establishing direct connection to the remote                 ",{}]],"23":[["           server when using the Git protocol for fetching. If the variable value is in the \"COMMAND for DOMAIN\" format,               ",{}]],"24":[["           the command is applied only on hostnames ending with the specified domain string. This variable may be set                  ",{}]],"25":[["           multiple times and is matched in the given order; the first match wins.                                                     ",{}]],"27":[["           Can be overridden by the ",{}],["GIT_PROXY_COMMAND",{"underline":true}],[" environment variable (which always applies universally, without the              ",{}]],"28":[["           special \"for\" handling).                                                                                                    ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           The special string ",{}],["none",{"bold":true}],[" can be used as the proxy command to specify that no proxy be used for a given domain                ",{}]],"31":[["           pattern. This is useful for excluding servers inside a firewall from proxy use, while defaulting to a common                ",{}]],"32":[["           proxy for external domains.                                                                                                 ",{}]],"33":[[" Manual page git-config(1) line 568 (press h for help or q to quit)                                                                    ",{}]]},"cursor":{"x":67,"y":33}}],[0.927542,{"lines":{"0":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"1":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"2":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"3":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"4":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"5":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       core.autocrlf                                                                                                                   ",{}]],"8":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"9":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"10":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"11":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"12":[["           conversion is performed.                                                                                                    ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       core.symlinks                                                                                                                   ",{}]],"15":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"16":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"17":[["           support symbolic links.                                                                                                     ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"20":[["           when the repository is created.                                                                                             ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       core.gitProxy                                                                                                                   ",{}]],"23":[["           A \"proxy command\" to execute (as ",{}],["command",{"underline":true}],[" ",{}],["host",{"underline":true}],[" ",{}],["port",{"underline":true}],[") instead of establishing direct connection to the remote                 ",{}]],"24":[["           server when using the Git protocol for fetching. If the variable value is in the \"COMMAND for DOMAIN\" format,               ",{}]],"25":[["           the command is applied only on hostnames ending with the specified domain string. This variable may be set                  ",{}]],"26":[["           multiple times and is matched in the given order; the first match wins.                                                     ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           Can be overridden by the ",{}],["GIT_PROXY_COMMAND",{"underline":true}],[" environment variable (which always applies universally, without the              ",{}]],"29":[["           special \"for\" handling).                                                                                                    ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           The special string ",{}],["none",{"bold":true}],[" can be used as the proxy command to specify that no proxy be used for a given domain                ",{}]],"32":[["           pattern. This is useful for excluding servers inside a firewall from proxy use, while defaulting to a common                ",{}]],"33":[[" Manual page git-config(1) line 567 (press h for help or q to quit)                                                                    ",{}]]}}],[0.145136,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"2":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"3":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"4":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"5":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"6":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       core.autocrlf                                                                                                                   ",{}]],"9":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"10":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"11":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"12":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"13":[["           conversion is performed.                                                                                                    ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       core.symlinks                                                                                                                   ",{}]],"16":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"17":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"18":[["           support symbolic links.                                                                                                     ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"21":[["           when the repository is created.                                                                                             ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       core.gitProxy                                                                                                                   ",{}]],"24":[["           A \"proxy command\" to execute (as ",{}],["command",{"underline":true}],[" ",{}],["host",{"underline":true}],[" ",{}],["port",{"underline":true}],[") instead of establishing direct connection to the remote                 ",{}]],"25":[["           server when using the Git protocol for fetching. If the variable value is in the \"COMMAND for DOMAIN\" format,               ",{}]],"26":[["           the command is applied only on hostnames ending with the specified domain string. This variable may be set                  ",{}]],"27":[["           multiple times and is matched in the given order; the first match wins.                                                     ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           Can be overridden by the ",{}],["GIT_PROXY_COMMAND",{"underline":true}],[" environment variable (which always applies universally, without the              ",{}]],"30":[["           special \"for\" handling).                                                                                                    ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           The special string ",{}],["none",{"bold":true}],[" can be used as the proxy command to specify that no proxy be used for a given domain                ",{}]],"33":[[" Manual page git-config(1) line 566 (press h for help or q to quit)                                                                    ",{}]]}}],[0.291796,{"lines":{"0":[["           corrupts data.                                                                                                              ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"3":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"4":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"5":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"6":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"7":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       core.autocrlf                                                                                                                   ",{}]],"10":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"11":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"12":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"13":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"14":[["           conversion is performed.                                                                                                    ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       core.symlinks                                                                                                                   ",{}]],"17":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"18":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"19":[["           support symbolic links.                                                                                                     ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"22":[["           when the repository is created.                                                                                             ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       core.gitProxy                                                                                                                   ",{}]],"25":[["           A \"proxy command\" to execute (as ",{}],["command",{"underline":true}],[" ",{}],["host",{"underline":true}],[" ",{}],["port",{"underline":true}],[") instead of establishing direct connection to the remote                 ",{}]],"26":[["           server when using the Git protocol for fetching. If the variable value is in the \"COMMAND for DOMAIN\" format,               ",{}]],"27":[["           the command is applied only on hostnames ending with the specified domain string. This variable may be set                  ",{}]],"28":[["           multiple times and is matched in the given order; the first match wins.                                                     ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           Can be overridden by the ",{}],["GIT_PROXY_COMMAND",{"underline":true}],[" environment variable (which always applies universally, without the              ",{}]],"31":[["           special \"for\" handling).                                                                                                    ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-config(1) line 565 (press h for help or q to quit)                                                                    ",{}]]}}],[0.581774,{"lines":{"0":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"1":[["           corrupts data.                                                                                                              ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"4":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"5":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"6":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"7":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"8":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       core.autocrlf                                                                                                                   ",{}]],"11":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"12":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"13":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"14":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"15":[["           conversion is performed.                                                                                                    ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       core.symlinks                                                                                                                   ",{}]],"18":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"19":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"20":[["           support symbolic links.                                                                                                     ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"23":[["           when the repository is created.                                                                                             ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       core.gitProxy                                                                                                                   ",{}]],"26":[["           A \"proxy command\" to execute (as ",{}],["command",{"underline":true}],[" ",{}],["host",{"underline":true}],[" ",{}],["port",{"underline":true}],[") instead of establishing direct connection to the remote                 ",{}]],"27":[["           server when using the Git protocol for fetching. If the variable value is in the \"COMMAND for DOMAIN\" format,               ",{}]],"28":[["           the command is applied only on hostnames ending with the specified domain string. This variable may be set                  ",{}]],"29":[["           multiple times and is matched in the given order; the first match wins.                                                     ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           Can be overridden by the ",{}],["GIT_PROXY_COMMAND",{"underline":true}],[" environment variable (which always applies universally, without the              ",{}]],"32":[["           special \"for\" handling).                                                                                                    ",{}]],"33":[[" Manual page git-config(1) line 564 (press h for help or q to quit)                                                                    ",{}]]}}],[0.144348,{"lines":{"0":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"1":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"2":[["           corrupts data.                                                                                                              ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"5":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"6":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"7":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"8":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"9":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       core.autocrlf                                                                                                                   ",{}]],"12":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"13":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"14":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"15":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"16":[["           conversion is performed.                                                                                                    ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       core.symlinks                                                                                                                   ",{}]],"19":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"20":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"21":[["           support symbolic links.                                                                                                     ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"24":[["           when the repository is created.                                                                                             ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       core.gitProxy                                                                                                                   ",{}]],"27":[["           A \"proxy command\" to execute (as ",{}],["command",{"underline":true}],[" ",{}],["host",{"underline":true}],[" ",{}],["port",{"underline":true}],[") instead of establishing direct connection to the remote                 ",{}]],"28":[["           server when using the Git protocol for fetching. If the variable value is in the \"COMMAND for DOMAIN\" format,               ",{}]],"29":[["           the command is applied only on hostnames ending with the specified domain string. This variable may be set                  ",{}]],"30":[["           multiple times and is matched in the given order; the first match wins.                                                     ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           Can be overridden by the ",{}],["GIT_PROXY_COMMAND",{"underline":true}],[" environment variable (which always applies universally, without the              ",{}]],"33":[[" Manual page git-config(1) line 563 (press h for help or q to quit)                                                                    ",{}]]}}],[0.147325,{"lines":{"0":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"1":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"2":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"3":[["           corrupts data.                                                                                                              ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"6":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"7":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"8":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"9":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"10":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       core.autocrlf                                                                                                                   ",{}]],"13":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"14":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"15":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"16":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"17":[["           conversion is performed.                                                                                                    ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       core.symlinks                                                                                                                   ",{}]],"20":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"21":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"22":[["           support symbolic links.                                                                                                     ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"25":[["           when the repository is created.                                                                                             ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       core.gitProxy                                                                                                                   ",{}]],"28":[["           A \"proxy command\" to execute (as ",{}],["command",{"underline":true}],[" ",{}],["host",{"underline":true}],[" ",{}],["port",{"underline":true}],[") instead of establishing direct connection to the remote                 ",{}]],"29":[["           server when using the Git protocol for fetching. If the variable value is in the \"COMMAND for DOMAIN\" format,               ",{}]],"30":[["           the command is applied only on hostnames ending with the specified domain string. This variable may be set                  ",{}]],"31":[["           multiple times and is matched in the given order; the first match wins.                                                     ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-config(1) line 562 (press h for help or q to quit)                                                                    ",{}]]}}],[0.299268,{"lines":{"0":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"1":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"2":[["           corrupts data.                                                                                                              ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"5":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"6":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"7":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"8":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"9":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       core.autocrlf                                                                                                                   ",{}]],"12":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"13":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"14":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"15":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"16":[["           conversion is performed.                                                                                                    ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       core.symlinks                                                                                                                   ",{}]],"19":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"20":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"21":[["           support symbolic links.                                                                                                     ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"24":[["           when the repository is created.                                                                                             ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       core.gitProxy                                                                                                                   ",{}]],"27":[["           A \"proxy command\" to execute (as ",{}],["command",{"underline":true}],[" ",{}],["host",{"underline":true}],[" ",{}],["port",{"underline":true}],[") instead of establishing direct connection to the remote                 ",{}]],"28":[["           server when using the Git protocol for fetching. If the variable value is in the \"COMMAND for DOMAIN\" format,               ",{}]],"29":[["           the command is applied only on hostnames ending with the specified domain string. This variable may be set                  ",{}]],"30":[["           multiple times and is matched in the given order; the first match wins.                                                     ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           Can be overridden by the ",{}],["GIT_PROXY_COMMAND",{"underline":true}],[" environment variable (which always applies universally, without the              ",{}]],"33":[[" Manual page git-config(1) line 563 (press h for help or q to quit)                                                                    ",{}]]}}],[0.151009,{"lines":{"0":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"1":[["           corrupts data.                                                                                                              ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"4":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"5":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"6":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"7":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"8":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       core.autocrlf                                                                                                                   ",{}]],"11":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"12":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"13":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"14":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"15":[["           conversion is performed.                                                                                                    ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       core.symlinks                                                                                                                   ",{}]],"18":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"19":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"20":[["           support symbolic links.                                                                                                     ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"23":[["           when the repository is created.                                                                                             ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       core.gitProxy                                                                                                                   ",{}]],"26":[["           A \"proxy command\" to execute (as ",{}],["command",{"underline":true}],[" ",{}],["host",{"underline":true}],[" ",{}],["port",{"underline":true}],[") instead of establishing direct connection to the remote                 ",{}]],"27":[["           server when using the Git protocol for fetching. If the variable value is in the \"COMMAND for DOMAIN\" format,               ",{}]],"28":[["           the command is applied only on hostnames ending with the specified domain string. This variable may be set                  ",{}]],"29":[["           multiple times and is matched in the given order; the first match wins.                                                     ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           Can be overridden by the ",{}],["GIT_PROXY_COMMAND",{"underline":true}],[" environment variable (which always applies universally, without the              ",{}]],"32":[["           special \"for\" handling).                                                                                                    ",{}]],"33":[[" Manual page git-config(1) line 564 (press h for help or q to quit)                                                                    ",{}]]}}],[0.478828,{"lines":{"0":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"1":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"2":[["           corrupts data.                                                                                                              ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"5":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"6":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"7":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"8":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"9":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       core.autocrlf                                                                                                                   ",{}]],"12":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"13":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"14":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"15":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"16":[["           conversion is performed.                                                                                                    ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       core.symlinks                                                                                                                   ",{}]],"19":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"20":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"21":[["           support symbolic links.                                                                                                     ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"24":[["           when the repository is created.                                                                                             ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       core.gitProxy                                                                                                                   ",{}]],"27":[["           A \"proxy command\" to execute (as ",{}],["command",{"underline":true}],[" ",{}],["host",{"underline":true}],[" ",{}],["port",{"underline":true}],[") instead of establishing direct connection to the remote                 ",{}]],"28":[["           server when using the Git protocol for fetching. If the variable value is in the \"COMMAND for DOMAIN\" format,               ",{}]],"29":[["           the command is applied only on hostnames ending with the specified domain string. This variable may be set                  ",{}]],"30":[["           multiple times and is matched in the given order; the first match wins.                                                     ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           Can be overridden by the ",{}],["GIT_PROXY_COMMAND",{"underline":true}],[" environment variable (which always applies universally, without the              ",{}]],"33":[[" Manual page git-config(1) line 563 (press h for help or q to quit)                                                                    ",{}]]}}],[0.467702,{"lines":{"0":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"1":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"2":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"3":[["           corrupts data.                                                                                                              ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"6":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"7":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"8":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"9":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"10":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["       core.autocrlf                                                                                                                   ",{}]],"13":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"14":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"15":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"16":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"17":[["           conversion is performed.                                                                                                    ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       core.symlinks                                                                                                                   ",{}]],"20":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"21":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"22":[["           support symbolic links.                                                                                                     ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"25":[["           when the repository is created.                                                                                             ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       core.gitProxy                                                                                                                   ",{}]],"28":[["           A \"proxy command\" to execute (as ",{}],["command",{"underline":true}],[" ",{}],["host",{"underline":true}],[" ",{}],["port",{"underline":true}],[") instead of establishing direct connection to the remote                 ",{}]],"29":[["           server when using the Git protocol for fetching. If the variable value is in the \"COMMAND for DOMAIN\" format,               ",{}]],"30":[["           the command is applied only on hostnames ending with the specified domain string. This variable may be set                  ",{}]],"31":[["           multiple times and is matched in the given order; the first match wins.                                                     ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-config(1) line 562 (press h for help or q to quit)                                                                    ",{}]]}}],[0.153173,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"2":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"3":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"4":[["           corrupts data.                                                                                                              ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"7":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"8":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"9":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"10":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"11":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["       core.autocrlf                                                                                                                   ",{}]],"14":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"15":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"16":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"17":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"18":[["           conversion is performed.                                                                                                    ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       core.symlinks                                                                                                                   ",{}]],"21":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"22":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"23":[["           support symbolic links.                                                                                                     ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"26":[["           when the repository is created.                                                                                             ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       core.gitProxy                                                                                                                   ",{}]],"29":[["           A \"proxy command\" to execute (as ",{}],["command",{"underline":true}],[" ",{}],["host",{"underline":true}],[" ",{}],["port",{"underline":true}],[") instead of establishing direct connection to the remote                 ",{}]],"30":[["           server when using the Git protocol for fetching. If the variable value is in the \"COMMAND for DOMAIN\" format,               ",{}]],"31":[["           the command is applied only on hostnames ending with the specified domain string. This variable may be set                  ",{}]],"32":[["           multiple times and is matched in the given order; the first match wins.                                                     ",{}]],"33":[[" Manual page git-config(1) line 561 (press h for help or q to quit)                                                                    ",{}]]}}],[0.388474,{"lines":{"0":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"3":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"4":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"5":[["           corrupts data.                                                                                                              ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"8":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"9":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"10":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"11":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"12":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["       core.autocrlf                                                                                                                   ",{}]],"15":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"16":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"17":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"18":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"19":[["           conversion is performed.                                                                                                    ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       core.symlinks                                                                                                                   ",{}]],"22":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"23":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"24":[["           support symbolic links.                                                                                                     ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"27":[["           when the repository is created.                                                                                             ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       core.gitProxy                                                                                                                   ",{}]],"30":[["           A \"proxy command\" to execute (as ",{}],["command",{"underline":true}],[" ",{}],["host",{"underline":true}],[" ",{}],["port",{"underline":true}],[") instead of establishing direct connection to the remote                 ",{}]],"31":[["           server when using the Git protocol for fetching. If the variable value is in the \"COMMAND for DOMAIN\" format,               ",{}]],"32":[["           the command is applied only on hostnames ending with the specified domain string. This variable may be set                  ",{}]],"33":[[" Manual page git-config(1) line 560 (press h for help or q to quit)                                                                    ",{}]]}}],[0.174488,{"lines":{"0":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"1":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"4":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"5":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"6":[["           corrupts data.                                                                                                              ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"9":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"10":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"11":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"12":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"13":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["       core.autocrlf                                                                                                                   ",{}]],"16":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"17":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"18":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"19":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"20":[["           conversion is performed.                                                                                                    ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       core.symlinks                                                                                                                   ",{}]],"23":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"24":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"25":[["           support symbolic links.                                                                                                     ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"28":[["           when the repository is created.                                                                                             ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       core.gitProxy                                                                                                                   ",{}]],"31":[["           A \"proxy command\" to execute (as ",{}],["command",{"underline":true}],[" ",{}],["host",{"underline":true}],[" ",{}],["port",{"underline":true}],[") instead of establishing direct connection to the remote                 ",{}]],"32":[["           server when using the Git protocol for fetching. If the variable value is in the \"COMMAND for DOMAIN\" format,               ",{}]],"33":[[" Manual page git-config(1) line 559 (press h for help or q to quit)                                                                    ",{}]]}}],[0.117845,{"lines":{"0":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"1":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"2":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"5":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"6":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"7":[["           corrupts data.                                                                                                              ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"10":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"11":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"12":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"13":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"14":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["       core.autocrlf                                                                                                                   ",{}]],"17":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"18":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"19":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"20":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"21":[["           conversion is performed.                                                                                                    ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       core.symlinks                                                                                                                   ",{}]],"24":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"25":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"26":[["           support symbolic links.                                                                                                     ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"29":[["           when the repository is created.                                                                                             ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       core.gitProxy                                                                                                                   ",{}]],"32":[["           A \"proxy command\" to execute (as ",{}],["command",{"underline":true}],[" ",{}],["host",{"underline":true}],[" ",{}],["port",{"underline":true}],[") instead of establishing direct connection to the remote                 ",{}]],"33":[[" Manual page git-config(1) line 558 (press h for help or q to quit)                                                                    ",{}]]}}],[0.316034,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"2":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"3":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"6":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"7":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"8":[["           corrupts data.                                                                                                              ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"11":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"12":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"13":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"14":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"15":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["       core.autocrlf                                                                                                                   ",{}]],"18":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"19":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"20":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"21":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"22":[["           conversion is performed.                                                                                                    ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       core.symlinks                                                                                                                   ",{}]],"25":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"26":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"27":[["           support symbolic links.                                                                                                     ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"30":[["           when the repository is created.                                                                                             ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       core.gitProxy                                                                                                                   ",{}]],"33":[[" Manual page git-config(1) line 557 (press h for help or q to quit)                                                                    ",{}]]}}],[0.105579,{"lines":{"0":[["           can corrupt data.                                                                                                           ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"3":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"4":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"7":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"8":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"9":[["           corrupts data.                                                                                                              ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"12":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"13":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"14":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"15":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"16":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["       core.autocrlf                                                                                                                   ",{}]],"19":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"20":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"21":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"22":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"23":[["           conversion is performed.                                                                                                    ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       core.symlinks                                                                                                                   ",{}]],"26":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"27":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"28":[["           support symbolic links.                                                                                                     ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"31":[["           when the repository is created.                                                                                             ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-config(1) line 556 (press h for help or q to quit)                                                                    ",{}]]}}],[0.160576,{"lines":{"0":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"1":[["           can corrupt data.                                                                                                           ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"4":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"5":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"8":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"9":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"10":[["           corrupts data.                                                                                                              ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"13":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"14":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"15":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"16":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"17":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["       core.autocrlf                                                                                                                   ",{}]],"20":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"21":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"22":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"23":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"24":[["           conversion is performed.                                                                                                    ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       core.symlinks                                                                                                                   ",{}]],"27":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"28":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"29":[["           support symbolic links.                                                                                                     ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"32":[["           when the repository is created.                                                                                             ",{}]],"33":[[" Manual page git-config(1) line 555 (press h for help or q to quit)                                                                    ",{}]]}}],[0.284561,{"lines":{"0":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"1":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"2":[["           can corrupt data.                                                                                                           ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"5":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"6":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"9":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"10":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"11":[["           corrupts data.                                                                                                              ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"14":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"15":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"16":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"17":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"18":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["       core.autocrlf                                                                                                                   ",{}]],"21":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"22":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"23":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"24":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"25":[["           conversion is performed.                                                                                                    ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       core.symlinks                                                                                                                   ",{}]],"28":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"29":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"30":[["           support symbolic links.                                                                                                     ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           The default is true, except ",{}],["git-clone",{"bold":true}],["(1) or ",{}],["git-init",{"bold":true}],["(1) will probe and set core.symlinks false if appropriate               ",{}]],"33":[[" Manual page git-config(1) line 554 (press h for help or q to quit)                                                                    ",{}]]}}],[0.14715,{"lines":{"0":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"1":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"2":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"3":[["           can corrupt data.                                                                                                           ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"6":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"7":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"10":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"11":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"12":[["           corrupts data.                                                                                                              ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"15":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"16":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"17":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"18":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"19":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["       core.autocrlf                                                                                                                   ",{}]],"22":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"23":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"24":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"25":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"26":[["           conversion is performed.                                                                                                    ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       core.symlinks                                                                                                                   ",{}]],"29":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"30":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"31":[["           support symbolic links.                                                                                                     ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-config(1) line 553 (press h for help or q to quit)                                                                    ",{}]]}}],[0.149683,{"lines":{"0":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"1":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"2":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"3":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"4":[["           can corrupt data.                                                                                                           ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"7":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"8":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"11":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"12":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"13":[["           corrupts data.                                                                                                              ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"16":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"17":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"18":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"19":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"20":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["       core.autocrlf                                                                                                                   ",{}]],"23":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"24":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"25":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"26":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"27":[["           conversion is performed.                                                                                                    ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       core.symlinks                                                                                                                   ",{}]],"30":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"31":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"32":[["           support symbolic links.                                                                                                     ",{}]],"33":[[" Manual page git-config(1) line 552 (press h for help or q to quit)                                                                    ",{}]]}}],[0.15078,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"2":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"3":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"4":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"5":[["           can corrupt data.                                                                                                           ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"8":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"9":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"12":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"13":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"14":[["           corrupts data.                                                                                                              ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"17":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"18":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"19":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"20":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"21":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["       core.autocrlf                                                                                                                   ",{}]],"24":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"25":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"26":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"27":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"28":[["           conversion is performed.                                                                                                    ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       core.symlinks                                                                                                                   ",{}]],"31":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"32":[["           and ",{}],["git-add",{"bold":true}],["(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not                ",{}]],"33":[[" Manual page git-config(1) line 551 (press h for help or q to quit)                                                                    ",{}]]}}],[0.135393,{"lines":{"0":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"3":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"4":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"5":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"6":[["           can corrupt data.                                                                                                           ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"9":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"10":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"13":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"14":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"15":[["           corrupts data.                                                                                                              ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"18":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"19":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"20":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"21":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"22":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["       core.autocrlf                                                                                                                   ",{}]],"25":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"26":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"27":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"28":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"29":[["           conversion is performed.                                                                                                    ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       core.symlinks                                                                                                                   ",{}]],"32":[["           If false, symbolic links are checked out as small plain files that contain the link text.  ",{}],["git-update-index",{"bold":true}],["(1)              ",{}]],"33":[[" Manual page git-config(1) line 550 (press h for help or q to quit)                                                                    ",{}]]}}],[0.160695,{"lines":{"0":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"1":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"4":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"5":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"6":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"7":[["           can corrupt data.                                                                                                           ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"10":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"11":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"14":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"15":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"16":[["           corrupts data.                                                                                                              ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"19":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"20":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"21":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"22":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"23":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["       core.autocrlf                                                                                                                   ",{}]],"26":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"27":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"28":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"29":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"30":[["           conversion is performed.                                                                                                    ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       core.symlinks                                                                                                                   ",{}]],"33":[[" Manual page git-config(1) line 549 (press h for help or q to quit)                                                                    ",{}]]}}],[0.169175,{"lines":{"0":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"1":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"2":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"5":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"6":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"7":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"8":[["           can corrupt data.                                                                                                           ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"11":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"12":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"15":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"16":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"17":[["           corrupts data.                                                                                                              ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"20":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"21":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"22":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"23":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"24":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["       core.autocrlf                                                                                                                   ",{}]],"27":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"28":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"29":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"30":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"31":[["           conversion is performed.                                                                                                    ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-config(1) line 548 (press h for help or q to quit)                                                                    ",{}]]}}],[0.133116,{"lines":{"0":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"1":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"2":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"3":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"6":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"7":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"8":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"9":[["           can corrupt data.                                                                                                           ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"12":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"13":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"16":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"17":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"18":[["           corrupts data.                                                                                                              ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"21":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"22":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"23":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"24":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"25":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["       core.autocrlf                                                                                                                   ",{}]],"28":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"29":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"30":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"31":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"32":[["           conversion is performed.                                                                                                    ",{}]],"33":[[" Manual page git-config(1) line 547 (press h for help or q to quit)                                                                    ",{}]]}}],[0.08250200000000001,{"lines":{"0":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"1":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"2":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"3":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"4":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"7":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"8":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"9":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"10":[["           can corrupt data.                                                                                                           ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"13":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"14":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"17":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"18":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"19":[["           corrupts data.                                                                                                              ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"22":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"23":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"24":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"25":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"26":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["       core.autocrlf                                                                                                                   ",{}]],"29":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"30":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"31":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"32":[["           repository does not have normalized line endings. This variable can be set to ",{}],["input",{"underline":true}],[", in which case no output                ",{}]],"33":[[" Manual page git-config(1) line 546 (press h for help or q to quit)                                                                    ",{}]]}}],[0.425087,{"lines":{"0":[["       core.safecrlf                                                                                                                   ",{}]],"1":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"2":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"3":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"4":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"5":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"8":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"9":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"10":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"11":[["           can corrupt data.                                                                                                           ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"14":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"15":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"18":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"19":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"20":[["           corrupts data.                                                                                                              ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"23":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"24":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"25":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"26":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"27":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       core.autocrlf                                                                                                                   ",{}]],"30":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"31":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"32":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"33":[[" Manual page git-config(1) line 545 (press h for help or q to quit)                                                                    ",{}]]}}],[0.152363,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       core.safecrlf                                                                                                                   ",{}]],"2":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"3":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"4":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"5":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"6":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"9":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"10":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"11":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"12":[["           can corrupt data.                                                                                                           ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"15":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"16":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"19":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"20":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"21":[["           corrupts data.                                                                                                              ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"24":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"25":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"26":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"27":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"28":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       core.autocrlf                                                                                                                   ",{}]],"31":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"32":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"33":[[" Manual page git-config(1) line 544 (press h for help or q to quit)                                                                    ",{}]]}}],[0.14576,{"lines":{"0":[["           See ",{}],["gitattributes",{"bold":true}],["(5) for more information on end-of-line conversion.                                                        ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       core.safecrlf                                                                                                                   ",{}]],"3":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"4":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"5":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"6":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"7":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"10":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"11":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"12":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"13":[["           can corrupt data.                                                                                                           ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"16":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"17":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"20":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"21":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"22":[["           corrupts data.                                                                                                              ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"25":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"26":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"27":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"28":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"29":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       core.autocrlf                                                                                                                   ",{}]],"32":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"33":[[" Manual page git-config(1) line 543 (press h for help or q to quit)                                                                    ",{}]]}}],[0.608183,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       core.safecrlf                                                                                                                   ",{}]],"2":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"3":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"4":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"5":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"6":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"9":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"10":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"11":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"12":[["           can corrupt data.                                                                                                           ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"15":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"16":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"19":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"20":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"21":[["           corrupts data.                                                                                                              ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"24":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"25":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"26":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"27":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"28":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       core.autocrlf                                                                                                                   ",{}]],"31":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"32":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"33":[[" Manual page git-config(1) line 544 (press h for help or q to quit)                                                                    ",{}]]}}],[0.386636,{"lines":{"0":[["       core.safecrlf                                                                                                                   ",{}]],"1":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"2":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"3":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"4":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"5":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"8":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"9":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"10":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"11":[["           can corrupt data.                                                                                                           ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"14":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"15":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"18":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"19":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"20":[["           corrupts data.                                                                                                              ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"23":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"24":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"25":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"26":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"27":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["       core.autocrlf                                                                                                                   ",{}]],"30":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"31":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"32":[["           touched. Use this setting if you want to have ",{}],["CRLF",{"bold":true}],[" line endings in your working directory even though the                   ",{}]],"33":[[" Manual page git-config(1) line 545 (press h for help or q to quit)                                                                    ",{}]]}}],[73.41325500000001,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       core.safecrlf                                                                                                                   ",{}]],"2":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"3":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"4":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"5":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"6":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"9":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"10":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"11":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"12":[["           can corrupt data.                                                                                                           ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"15":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"16":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"19":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"20":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"21":[["           corrupts data.                                                                                                              ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"24":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"25":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"26":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"27":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"28":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["       core.autocrlf                                                                                                                   ",{}]],"31":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"32":[["           that text files are not guaranteed to be normalized: files that contain ",{}],["CRLF",{"bold":true}],[" in the repository will not be                  ",{}]],"33":[[" Manual page git-config(1) line 544 (press h for help or q to quit)                                                                    ",{}]]}}],[0.173725,{"lines":{"0":[["           See ",{}],["gitattributes",{"bold":true}],["(5) for more information on end-of-line conversion.                                                        ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       core.safecrlf                                                                                                                   ",{}]],"3":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"4":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"5":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"6":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"7":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"10":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"11":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"12":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"13":[["           can corrupt data.                                                                                                           ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"16":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"17":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"20":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"21":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"22":[["           corrupts data.                                                                                                              ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"25":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"26":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"27":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"28":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"29":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["       core.autocrlf                                                                                                                   ",{}]],"32":[["           Setting this variable to \"true\" is almost the same as setting the ",{}],["text",{"bold":true}],[" attribute to \"auto\" on all files except              ",{}]],"33":[[" Manual page git-config(1) line 543 (press h for help or q to quit)                                                                    ",{}]]}}],[0.248483,{"lines":{"0":[["           Alternatives are ",{}],["lf",{"underline":true}],[", ",{}],["crlf",{"underline":true}],[" and ",{}],["native",{"underline":true}],[", which uses the platform’s native line ending. The default value is ",{}],["native",{"bold":true}],[".            ",{}]],"1":[["           See ",{}],["gitattributes",{"bold":true}],["(5) for more information on end-of-line conversion.                                                        ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       core.safecrlf                                                                                                                   ",{}]],"4":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"5":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"6":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"7":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"8":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"11":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"12":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"13":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"14":[["           can corrupt data.                                                                                                           ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"17":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"18":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"21":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"22":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"23":[["           corrupts data.                                                                                                              ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"26":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"27":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"28":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"29":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"30":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["       core.autocrlf                                                                                                                   ",{}]],"33":[[" Manual page git-config(1) line 542 (press h for help or q to quit)                                                                    ",{}]]}}],[0.10335,{"lines":{"0":[["           Sets the line ending type to use in the working directory for files that have the ",{}],["text",{"bold":true}],[" property set.                        ",{}]],"1":[["           Alternatives are ",{}],["lf",{"underline":true}],[", ",{}],["crlf",{"underline":true}],[" and ",{}],["native",{"underline":true}],[", which uses the platform’s native line ending. The default value is ",{}],["native",{"bold":true}],[".            ",{}]],"2":[["           See ",{}],["gitattributes",{"bold":true}],["(5) for more information on end-of-line conversion.                                                        ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       core.safecrlf                                                                                                                   ",{}]],"5":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"6":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"7":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"8":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"9":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"12":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"13":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"14":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"15":[["           can corrupt data.                                                                                                           ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"18":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"19":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"22":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"23":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"24":[["           corrupts data.                                                                                                              ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"27":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"28":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"29":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"30":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"31":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-config(1) line 541 (press h for help or q to quit)                                                                    ",{}]]}}],[0.147571,{"lines":{"0":[["       core.eol                                                                                                                        ",{}]],"1":[["           Sets the line ending type to use in the working directory for files that have the ",{}],["text",{"bold":true}],[" property set.                        ",{}]],"2":[["           Alternatives are ",{}],["lf",{"underline":true}],[", ",{}],["crlf",{"underline":true}],[" and ",{}],["native",{"underline":true}],[", which uses the platform’s native line ending. The default value is ",{}],["native",{"bold":true}],[".            ",{}]],"3":[["           See ",{}],["gitattributes",{"bold":true}],["(5) for more information on end-of-line conversion.                                                        ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       core.safecrlf                                                                                                                   ",{}]],"6":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"7":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"8":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"9":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"10":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"11":[["                                                                                                                                       ",{}]],"12":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"13":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"14":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"15":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"16":[["           can corrupt data.                                                                                                           ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"19":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"20":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"23":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"24":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"25":[["           corrupts data.                                                                                                              ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"28":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"29":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"30":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"31":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"32":[["           would be reported by the ",{}],["core.safecrlf",{"bold":true}],[" mechanism.                                                                           ",{}]],"33":[[" Manual page git-config(1) line 540 (press h for help or q to quit)                                                                    ",{}]]}}],[0.118675,{"lines":{"0":[["                                                                                                                                       ",{}]],"1":[["       core.eol                                                                                                                        ",{}]],"2":[["           Sets the line ending type to use in the working directory for files that have the ",{}],["text",{"bold":true}],[" property set.                        ",{}]],"3":[["           Alternatives are ",{}],["lf",{"underline":true}],[", ",{}],["crlf",{"underline":true}],[" and ",{}],["native",{"underline":true}],[", which uses the platform’s native line ending. The default value is ",{}],["native",{"bold":true}],[".            ",{}]],"4":[["           See ",{}],["gitattributes",{"bold":true}],["(5) for more information on end-of-line conversion.                                                        ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       core.safecrlf                                                                                                                   ",{}]],"7":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"8":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"9":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"10":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"11":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"12":[["                                                                                                                                       ",{}]],"13":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"14":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"15":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"16":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"17":[["           can corrupt data.                                                                                                           ",{}]],"18":[["                                                                                                                                       ",{}]],"19":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"20":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"21":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"24":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"25":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"26":[["           corrupts data.                                                                                                              ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"29":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"30":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"31":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"32":[["           endings would be consistent, that is either all ",{}],["LF",{"bold":true}],[" or all ",{}],["CRLF",{"bold":true}],[", but never mixed. A file with mixed line endings             ",{}]],"33":[[" Manual page git-config(1) line 539 (press h for help or q to quit)                                                                    ",{}]]}}],[0.127892,{"lines":{"0":[["           regardless of the setting of this variable.                                                                                 ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       core.eol                                                                                                                        ",{}]],"3":[["           Sets the line ending type to use in the working directory for files that have the ",{}],["text",{"bold":true}],[" property set.                        ",{}]],"4":[["           Alternatives are ",{}],["lf",{"underline":true}],[", ",{}],["crlf",{"underline":true}],[" and ",{}],["native",{"underline":true}],[", which uses the platform’s native line ending. The default value is ",{}],["native",{"bold":true}],[".            ",{}]],"5":[["           See ",{}],["gitattributes",{"bold":true}],["(5) for more information on end-of-line conversion.                                                        ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       core.safecrlf                                                                                                                   ",{}]],"8":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"9":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"10":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"11":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"12":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"15":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"16":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"17":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"18":[["           can corrupt data.                                                                                                           ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"21":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"22":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"25":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"26":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"27":[["           corrupts data.                                                                                                              ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"30":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"31":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"32":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"33":[[" Manual page git-config(1) line 538 (press h for help or q to quit)                                                                    ",{}]]}}],[0.100375,{"lines":{"0":[["           but output as verbatim. Note that double quote, backslash and control characters are always quoted without ",{}],["-z",{"bold":true}],["               ",{}]],"1":[["           regardless of the setting of this variable.                                                                                 ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       core.eol                                                                                                                        ",{}]],"4":[["           Sets the line ending type to use in the working directory for files that have the ",{}],["text",{"bold":true}],[" property set.                        ",{}]],"5":[["           Alternatives are ",{}],["lf",{"underline":true}],[", ",{}],["crlf",{"underline":true}],[" and ",{}],["native",{"underline":true}],[", which uses the platform’s native line ending. The default value is ",{}],["native",{"bold":true}],[".            ",{}]],"6":[["           See ",{}],["gitattributes",{"bold":true}],["(5) for more information on end-of-line conversion.                                                        ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       core.safecrlf                                                                                                                   ",{}]],"9":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"10":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"11":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"12":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"13":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"16":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"17":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"18":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"19":[["           can corrupt data.                                                                                                           ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"22":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"23":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"26":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"27":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"28":[["           corrupts data.                                                                                                              ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"31":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"32":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"33":[[" Manual page git-config(1) line 537 (press h for help or q to quit)                                                                    ",{}]]}}],[0.118492,{"lines":{"0":[["           strings in C source code are quoted. If this variable is set to false, the bytes higher than 0x80 are not quoted            ",{}]],"1":[["           but output as verbatim. Note that double quote, backslash and control characters are always quoted without ",{}],["-z",{"bold":true}],["               ",{}]],"2":[["           regardless of the setting of this variable.                                                                                 ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       core.eol                                                                                                                        ",{}]],"5":[["           Sets the line ending type to use in the working directory for files that have the ",{}],["text",{"bold":true}],[" property set.                        ",{}]],"6":[["           Alternatives are ",{}],["lf",{"underline":true}],[", ",{}],["crlf",{"underline":true}],[" and ",{}],["native",{"underline":true}],[", which uses the platform’s native line ending. The default value is ",{}],["native",{"bold":true}],[".            ",{}]],"7":[["           See ",{}],["gitattributes",{"bold":true}],["(5) for more information on end-of-line conversion.                                                        ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       core.safecrlf                                                                                                                   ",{}]],"10":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"11":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"12":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"13":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"14":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"17":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"18":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"19":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"20":[["           can corrupt data.                                                                                                           ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"23":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"24":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"27":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"28":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"29":[["           corrupts data.                                                                                                              ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"32":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"33":[[" Manual page git-config(1) line 536 (press h for help or q to quit)                                                                    ",{}]]}}],[0.256143,{"lines":{"0":[["           characters in the pathname by enclosing the pathname in a double-quote pair and with backslashes the same way               ",{}]],"1":[["           strings in C source code are quoted. If this variable is set to false, the bytes higher than 0x80 are not quoted            ",{}]],"2":[["           but output as verbatim. Note that double quote, backslash and control characters are always quoted without ",{}],["-z",{"bold":true}],["               ",{}]],"3":[["           regardless of the setting of this variable.                                                                                 ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       core.eol                                                                                                                        ",{}]],"6":[["           Sets the line ending type to use in the working directory for files that have the ",{}],["text",{"bold":true}],[" property set.                        ",{}]],"7":[["           Alternatives are ",{}],["lf",{"underline":true}],[", ",{}],["crlf",{"underline":true}],[" and ",{}],["native",{"underline":true}],[", which uses the platform’s native line ending. The default value is ",{}],["native",{"bold":true}],[".            ",{}]],"8":[["           See ",{}],["gitattributes",{"bold":true}],["(5) for more information on end-of-line conversion.                                                        ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       core.safecrlf                                                                                                                   ",{}]],"11":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"12":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"13":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"14":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"15":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"18":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"19":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"20":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"21":[["           can corrupt data.                                                                                                           ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"24":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"25":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"28":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"29":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"30":[["           corrupts data.                                                                                                              ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"33":[[" Manual page git-config(1) line 535 (press h for help or q to quit)                                                                    ",{}]]}}],[0.120409,{"lines":{"0":[["           The commands that output paths (e.g.  ",{}],["ls-files",{"underline":true}],[", ",{}],["diff",{"underline":true}],["), when not given the ",{}],["-z",{"bold":true}],[" option, will quote \"unusual\"                   ",{}]],"1":[["           characters in the pathname by enclosing the pathname in a double-quote pair and with backslashes the same way               ",{}]],"2":[["           strings in C source code are quoted. If this variable is set to false, the bytes higher than 0x80 are not quoted            ",{}]],"3":[["           but output as verbatim. Note that double quote, backslash and control characters are always quoted without ",{}],["-z",{"bold":true}],["               ",{}]],"4":[["           regardless of the setting of this variable.                                                                                 ",{}]],"5":[["                                                                                                                                       ",{}]],"6":[["       core.eol                                                                                                                        ",{}]],"7":[["           Sets the line ending type to use in the working directory for files that have the ",{}],["text",{"bold":true}],[" property set.                        ",{}]],"8":[["           Alternatives are ",{}],["lf",{"underline":true}],[", ",{}],["crlf",{"underline":true}],[" and ",{}],["native",{"underline":true}],[", which uses the platform’s native line ending. The default value is ",{}],["native",{"bold":true}],[".            ",{}]],"9":[["           See ",{}],["gitattributes",{"bold":true}],["(5) for more information on end-of-line conversion.                                                        ",{}]],"10":[["                                                                                                                                       ",{}]],"11":[["       core.safecrlf                                                                                                                   ",{}]],"12":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"13":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"14":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"15":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"16":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"17":[["                                                                                                                                       ",{}]],"18":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"19":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"20":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"21":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"22":[["           can corrupt data.                                                                                                           ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"25":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"26":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"27":[["                                                                                                                                       ",{}]],"28":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"29":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"30":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"31":[["           corrupts data.                                                                                                              ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[[" Manual page git-config(1) line 534 (press h for help or q to quit)                                                                    ",{}]]}}],[0.187825,{"lines":{"0":[["           characters in the pathname by enclosing the pathname in a double-quote pair and with backslashes the same way               ",{}]],"1":[["           strings in C source code are quoted. If this variable is set to false, the bytes higher than 0x80 are not quoted            ",{}]],"2":[["           but output as verbatim. Note that double quote, backslash and control characters are always quoted without ",{}],["-z",{"bold":true}],["               ",{}]],"3":[["           regardless of the setting of this variable.                                                                                 ",{}]],"4":[["                                                                                                                                       ",{}]],"5":[["       core.eol                                                                                                                        ",{}]],"6":[["           Sets the line ending type to use in the working directory for files that have the ",{}],["text",{"bold":true}],[" property set.                        ",{}]],"7":[["           Alternatives are ",{}],["lf",{"underline":true}],[", ",{}],["crlf",{"underline":true}],[" and ",{}],["native",{"underline":true}],[", which uses the platform’s native line ending. The default value is ",{}],["native",{"bold":true}],[".            ",{}]],"8":[["           See ",{}],["gitattributes",{"bold":true}],["(5) for more information on end-of-line conversion.                                                        ",{}]],"9":[["                                                                                                                                       ",{}]],"10":[["       core.safecrlf                                                                                                                   ",{}]],"11":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"12":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"13":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"14":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"15":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"16":[["                                                                                                                                       ",{}]],"17":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"18":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"19":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"20":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"21":[["           can corrupt data.                                                                                                           ",{}]],"22":[["                                                                                                                                       ",{}]],"23":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"24":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"25":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"28":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"29":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"30":[["           corrupts data.                                                                                                              ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"33":[[" Manual page git-config(1) line 535 (press h for help or q to quit)                                                                    ",{}]]}}],[0.145673,{"lines":{"0":[["           strings in C source code are quoted. If this variable is set to false, the bytes higher than 0x80 are not quoted            ",{}]],"1":[["           but output as verbatim. Note that double quote, backslash and control characters are always quoted without ",{}],["-z",{"bold":true}],["               ",{}]],"2":[["           regardless of the setting of this variable.                                                                                 ",{}]],"3":[["                                                                                                                                       ",{}]],"4":[["       core.eol                                                                                                                        ",{}]],"5":[["           Sets the line ending type to use in the working directory for files that have the ",{}],["text",{"bold":true}],[" property set.                        ",{}]],"6":[["           Alternatives are ",{}],["lf",{"underline":true}],[", ",{}],["crlf",{"underline":true}],[" and ",{}],["native",{"underline":true}],[", which uses the platform’s native line ending. The default value is ",{}],["native",{"bold":true}],[".            ",{}]],"7":[["           See ",{}],["gitattributes",{"bold":true}],["(5) for more information on end-of-line conversion.                                                        ",{}]],"8":[["                                                                                                                                       ",{}]],"9":[["       core.safecrlf                                                                                                                   ",{}]],"10":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"11":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"12":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"13":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"14":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"15":[["                                                                                                                                       ",{}]],"16":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"17":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"18":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"19":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"20":[["           can corrupt data.                                                                                                           ",{}]],"21":[["                                                                                                                                       ",{}]],"22":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"23":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"24":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"27":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"28":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"29":[["           corrupts data.                                                                                                              ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"32":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"33":[[" Manual page git-config(1) line 536 (press h for help or q to quit)                                                                    ",{}]]}}],[0.10926,{"lines":{"0":[["           but output as verbatim. Note that double quote, backslash and control characters are always quoted without ",{}],["-z",{"bold":true}],["               ",{}]],"1":[["           regardless of the setting of this variable.                                                                                 ",{}]],"2":[["                                                                                                                                       ",{}]],"3":[["       core.eol                                                                                                                        ",{}]],"4":[["           Sets the line ending type to use in the working directory for files that have the ",{}],["text",{"bold":true}],[" property set.                        ",{}]],"5":[["           Alternatives are ",{}],["lf",{"underline":true}],[", ",{}],["crlf",{"underline":true}],[" and ",{}],["native",{"underline":true}],[", which uses the platform’s native line ending. The default value is ",{}],["native",{"bold":true}],[".            ",{}]],"6":[["           See ",{}],["gitattributes",{"bold":true}],["(5) for more information on end-of-line conversion.                                                        ",{}]],"7":[["                                                                                                                                       ",{}]],"8":[["       core.safecrlf                                                                                                                   ",{}]],"9":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"10":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"11":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"12":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"13":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"14":[["                                                                                                                                       ",{}]],"15":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"16":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"17":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"18":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"19":[["           can corrupt data.                                                                                                           ",{}]],"20":[["                                                                                                                                       ",{}]],"21":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"22":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"23":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"26":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"27":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"28":[["           corrupts data.                                                                                                              ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"31":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"32":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"33":[[" Manual page git-config(1) line 537 (press h for help or q to quit)                                                                    ",{}]]}}],[0.112216,{"lines":{"0":[["           regardless of the setting of this variable.                                                                                 ",{}]],"1":[["                                                                                                                                       ",{}]],"2":[["       core.eol                                                                                                                        ",{}]],"3":[["           Sets the line ending type to use in the working directory for files that have the ",{}],["text",{"bold":true}],[" property set.                        ",{}]],"4":[["           Alternatives are ",{}],["lf",{"underline":true}],[", ",{}],["crlf",{"underline":true}],[" and ",{}],["native",{"underline":true}],[", which uses the platform’s native line ending. The default value is ",{}],["native",{"bold":true}],[".            ",{}]],"5":[["           See ",{}],["gitattributes",{"bold":true}],["(5) for more information on end-of-line conversion.                                                        ",{}]],"6":[["                                                                                                                                       ",{}]],"7":[["       core.safecrlf                                                                                                                   ",{}]],"8":[["           If true, makes Git check if converting ",{}],["CRLF",{"bold":true}],[" is reversible when end-of-line conversion is active. Git will verify            ",{}]],"9":[["           if a command modifies a file in the work tree either directly or indirectly. For example, committing a file                 ",{}]],"10":[["           followed by checking out the same file should yield the original file in the work tree. If this is not the case             ",{}]],"11":[["           for the current setting of ",{}],["core.autocrlf",{"bold":true}],[", Git will reject the file. The variable can be set to \"warn\", in which             ",{}]],"12":[["           case Git will only warn about an irreversible conversion but continue the operation.                                        ",{}]],"13":[["                                                                                                                                       ",{}]],"14":[["           CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during            ",{}]],"15":[["           commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be            ",{}]],"16":[["           recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only             ",{}]],"17":[["           LF line endings in the repository. But for binary files that are accidentally classified as text the conversion             ",{}]],"18":[["           can corrupt data.                                                                                                           ",{}]],"19":[["                                                                                                                                       ",{}]],"20":[["           If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in                   ",{}]],"21":[["           .gitattributes. Right after committing you still have the original file in your work tree and this file is not              ",{}]],"22":[["           yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.             ",{}]],"23":[["                                                                                                                                       ",{}]],"24":[["           Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of             ",{}]],"25":[["           corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For                ",{}]],"26":[["           text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs            ",{}]],"27":[["           corrupts data.                                                                                                              ",{}]],"28":[["                                                                                                                                       ",{}]],"29":[["           Note, this safety check does not mean that a checkout will generate a file identical to the original file for a             ",{}]],"30":[["           different setting of ",{}],["core.eol",{"bold":true}],[" and ",{}],["core.autocrlf",{"bold":true}],[", but only for the current one. For example, a text file with ",{}],["LF",{"bold":true}],["             ",{}]],"31":[["           would be accepted with ",{}],["core.eol=lf",{"bold":true}],[" and could later be checked out with ",{}],["core.eol=crlf",{"bold":true}],[", in which case the                     ",{}]],"32":[["           resulting file would contain ",{}],["CRLF",{"bold":true}],[", although the original file contained ",{}],["LF",{"bold":true}],[". However, in both work trees the line            ",{}]],"33":[[" Manual page git-config(1) line 538 (press h for help or q to quit)                                                                    ",{}]]}}],[56.005541,{"lines":{"0":[["d0e33b2",{"fg":3}],[" HEAD@{10}: rebase -i (finish): returning to refs/heads/master                                                                  ",{}]],"1":[["d0e33b2",{"fg":3}],[" HEAD@{11}: rebase -i (pick): Add Print of Summation of Sequence                                                                ",{}]],"2":[["b254e4a",{"fg":3}],[" HEAD@{12}: rebase -i (squash): Create a Fibonacci Sequence                                                                     ",{}]],"3":[["84a9b65",{"fg":3}],[" HEAD@{13}: rebase -i (start): checkout HEAD~3                                                                                  ",{}]],"4":[["07bb65b",{"fg":3}],[" HEAD@{14}: commit: Corrected range of list                                                                                     ",{}]],"5":[["69baed7",{"fg":3}],[" HEAD@{15}: checkout: moving from iterative_refactor to master                                                                  ",{}]],"6":[["1b3f416",{"fg":3}],[" HEAD@{16}: commit: Print the sum of the list                                                                                   ",{}]],"7":[["cc9e6f4",{"fg":3}],[" HEAD@{17}: commit (amend): Implment Iterative Version of Fibonacci List                                                        ",{}]],"8":[["690124f",{"fg":3}],[" HEAD@{18}: commit: Implment Iterative Version of Fibonacci List                                                                ",{}]],"9":[["6724d2f",{"fg":3}],[" HEAD@{19}: checkout: moving from iterative_refactor to iterative_refactor                                                      ",{}]],"10":[["6724d2f",{"fg":3}],[" HEAD@{20}: checkout: moving from iterative_refactor to iterative_refactor                                                      ",{}]],"11":[["6724d2f",{"fg":3}],[" HEAD@{21}: checkout: moving from iterative_refactor to iterative_refactor                                                      ",{}]],"12":[["6724d2f",{"fg":3}],[" HEAD@{22}: checkout: moving from master to iterative_refactor                                                                  ",{}]],"13":[["69baed7",{"fg":3}],[" HEAD@{23}: commit: Add Print of Summation of Sequence                                                                          ",{}]],"14":[["84a9b65",{"fg":3}],[" HEAD@{24}: commit: Create a Fibonacci Sequence                                                                                 ",{}]],"15":[["8f01ee3",{"fg":3}],[" HEAD@{25}: commit: Recursive Fibonacci Definition                                                                              ",{}]],"16":[["6724d2f",{"fg":3}],[" HEAD@{26}: commit (amend): Initial Program Definition                                                                          ",{}]],"17":[["5b681c9",{"fg":3}],[" HEAD@{27}: commit: Initial Program Definition                                                                                  ",{}]],"18":[["9e24883",{"fg":3}],[" HEAD@{28}: commit (initial): Initial Commit                                                                                    ",{}]],"19":[["benjica@",{}],["gunter",{"underline":true}],["> git reset --hard HEAD@{1}                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"20":[["HEAD is now at 9ac0e47 Merge branch 'iterative_refactor'                                                                               ",{}]],"21":[["benjica@",{}],["gunter",{"underline":true}],["> man git-config                                                                              ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]],"22":[["                                                                                                                                       ",{}]],"24":[["                                                                                                                                       ",{}]],"25":[["                                                                                                                                       ",{}]],"26":[["                                                                                                                                       ",{}]],"27":[["                                                                                                                                       ",{}]],"29":[["                                                                                                                                       ",{}]],"30":[["                                                                                                                                       ",{}]],"31":[["                                                                                                                                       ",{}]],"32":[["                                                                                                                                       ",{}]],"33":[["                                                                                                                                       ",{}]]},"cursor":{"x":0,"y":22}}],[0.002843,{"lines":{"22":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                             ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":16}}],[193.919052,{"lines":{"22":[["benjica@",{}],["gunter",{"underline":true}],["> ^T                                                                                          ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":18}}],[1.140528,{"lines":{"22":[["benjica@",{}],["gunter",{"underline":true}],["> ^T^T                                                                                        ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]},"cursor":{"x":20}}],[11.581522,{"lines":{"22":[["benjica@",{}],["gunter",{"underline":true}],["> ^T^T                            ",{}],["/tmp/git-fibonacci",{"fg":2}],["                                                                     ",{}]]}}],[12.59029,{"lines":{"22":[["benjica@",{}],["gunter",{"underline":true}],["> ^T^T                                                                                        ",{}],["/tmp/git-fibonacci",{"fg":2}],["         ",{}]]}}],[1.162438,{"lines":{"22":[["benjica@",{}],["gunter",{"underline":true}],["> ^T^T                                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],[" ",{}]]}}],[1.739877,{"lines":{"22":[["benjica@",{}],["gunter",{"underline":true}],["> ^T                                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],[" ",{}]]},"cursor":{"x":18}}],[0.186296,{"lines":{"22":[["benjica@",{}],["gunter",{"underline":true}],[">                                                                                                     ",{}],["/tmp/git-fibonacci",{"fg":2}],[" ",{}]]},"cursor":{"x":16}}],[4.120695,{"lines":{"22":[["benjica@",{}],["gunter",{"underline":true}],["> e                                                                                                   ",{}],["/tmp/git-fibonacci",{"fg":2}],[" ",{}]]},"cursor":{"x":17}}],[0.265578,{"lines":{"22":[["benjica@",{}],["gunter",{"underline":true}],["> ex                                                                                                  ",{}],["/tmp/git-fibonacci",{"fg":2}],[" ",{}]]},"cursor":{"x":18}}],[0.130189,{"lines":{"22":[["benjica@",{}],["gunter",{"underline":true}],["> exi                                                                                                 ",{}],["/tmp/git-fibonacci",{"fg":2}],[" ",{}]]},"cursor":{"x":19}}],[0.113104,{"lines":{"22":[["benjica@",{}],["gunter",{"underline":true}],["> exit                                                                                                ",{}],["/tmp/git-fibonacci",{"fg":2}],[" ",{}]]},"cursor":{"x":20}}],[0.340229,{"cursor":{"x":0,"y":23}}]]